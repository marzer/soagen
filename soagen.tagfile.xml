<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile doxygen_version="1.9.1">
  <compound kind="file">
    <name>entities.hpp</name>
    <filename>entities_8hpp.html</filename>
    <includes id="soagen_8hpp" name="soagen.hpp" local="no" imported="no">soagen.hpp</includes>
    <class kind="class">soagen::examples::entities</class>
    <namespace>soagen</namespace>
    <namespace>soagen::examples</namespace>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>namespacesoagen_1_1examples.html</anchorfile>
      <anchor>ab27a4c779651cc5c8bb538ba7f5b7802</anchor>
      <arglist>(entities &amp;lhs, entities &amp;rhs) noexcept(soagen::has_nothrow_swap_member&lt; entities &gt;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>shapes.hpp</name>
    <filename>shapes_8hpp.html</filename>
    <includes id="soagen_8hpp" name="soagen.hpp" local="no" imported="no">soagen.hpp</includes>
    <class kind="class">soagen::examples::boxes</class>
    <class kind="class">soagen::examples::spheres</class>
    <namespace>soagen</namespace>
    <namespace>soagen::examples</namespace>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>namespacesoagen_1_1examples.html</anchorfile>
      <anchor>a73ca6e1dfeb7041e934e8694d2cf2d6b</anchor>
      <arglist>(boxes &amp;lhs, boxes &amp;rhs) noexcept(soagen::has_nothrow_swap_member&lt; boxes &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>namespacesoagen_1_1examples.html</anchorfile>
      <anchor>a2f2937d0182090b040da55081644f65f</anchor>
      <arglist>(spheres &amp;lhs, spheres &amp;rhs) noexcept(soagen::has_nothrow_swap_member&lt; spheres &gt;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>soagen.hpp</name>
    <filename>soagen_8hpp.html</filename>
  </compound>
  <compound kind="struct">
    <name>soagen::allocator</name>
    <filename>structsoagen_1_1allocator.html</filename>
    <member kind="typedef">
      <type>std::byte</type>
      <name>value_type</name>
      <anchorfile>structsoagen_1_1allocator.html</anchorfile>
      <anchor>aba2ca5c1dab7bb208da881989ca8eb69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::true_type</type>
      <name>is_always_equal</name>
      <anchorfile>structsoagen_1_1allocator.html</anchorfile>
      <anchor>a70693a30d83b4bf8257b7b5fdbc6c1c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::false_type</type>
      <name>propagate_on_container_copy_assignment</name>
      <anchorfile>structsoagen_1_1allocator.html</anchorfile>
      <anchor>a94f66255e4a892b9415c33beb4fe0df4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::false_type</type>
      <name>propagate_on_container_move_assignment</name>
      <anchorfile>structsoagen_1_1allocator.html</anchorfile>
      <anchor>af9f354372099aca15526fcb63143f827</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::false_type</type>
      <name>propagate_on_container_swap</name>
      <anchorfile>structsoagen_1_1allocator.html</anchorfile>
      <anchor>acd4166ae64119659c42b16e9b39d7185</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>value_type *</type>
      <name>allocate</name>
      <anchorfile>structsoagen_1_1allocator.html</anchorfile>
      <anchor>add1b597c98a840fbdc210811428787c8</anchor>
      <arglist>(size_t size, std::align_val_t alignment=std::align_val_t{ min_alignment })</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocate</name>
      <anchorfile>structsoagen_1_1allocator.html</anchorfile>
      <anchor>a922dad9dc86d8ad039273104c8ddaa65</anchor>
      <arglist>(value_type *ptr, [[maybe_unused]] size_t size) noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>min_alignment</name>
      <anchorfile>structsoagen_1_1allocator.html</anchorfile>
      <anchor>ac1f730d0e4d9368899dedb8f1eaf21b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>structsoagen_1_1allocator.html</anchorfile>
      <anchor>a1c923b7e894d9cf2a14dd278021e65f5</anchor>
      <arglist>(const allocator &amp;, const allocator &amp;) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>structsoagen_1_1allocator.html</anchorfile>
      <anchor>a1f0ba8d66cbc541d18e9934dc950c9fd</anchor>
      <arglist>(const allocator &amp;, const allocator &amp;) noexcept</arglist>
    </member>
    <docanchor file="structsoagen_1_1allocator.html" title="Customizing allocators for soagen">customizing_allocators</docanchor>
    <docanchor file="structsoagen_1_1allocator.html" title="Specifying a min_alignment">customizing_allocators_min_alignment</docanchor>
    <docanchor file="structsoagen_1_1allocator.html" title="Providing an alignment-aware allocate()">customizing_allocators_aligned_allocate</docanchor>
  </compound>
  <compound kind="class">
    <name>soagen::examples::boxes</name>
    <filename>classsoagen_1_1examples_1_1boxes.html</filename>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a79aeedacf92fcfff7477633c99832b3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ae80d9e115e4caf6a3c8489002762dfd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::allocator_type&lt; boxes &gt;</type>
      <name>allocator_type</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a35a212c2b6a6d0a5d17fc45fbb09abd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::table_type&lt; boxes &gt;</type>
      <name>table_type</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>af1c2c265684acf95551939feaab9efc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::table_traits_type&lt; boxes &gt;</type>
      <name>table_traits</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>abf96250c6c5d66b906cacbf90c59b4a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename table_traits::template column&lt; static_cast&lt; size_type &gt;(Column)&gt;</type>
      <name>column_traits</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a194f1fb2e2977c510ccb8e308f66f3c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename column_traits&lt; static_cast&lt; size_type &gt;(Column)&gt;::value_type</type>
      <name>column_type</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a1938b4ca96bcfdd85bf2277fd59fb48a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::iterator_type&lt; boxes &amp; &gt;</type>
      <name>iterator</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>aef8174e1019b1089c58b3f2079deadda</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::iterator_type&lt; const boxes &amp; &gt;</type>
      <name>const_iterator</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a11e18b5f0a691433c06f3ba1c8d8512c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::iterator_type&lt; boxes &amp;&amp; &gt;</type>
      <name>rvalue_iterator</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a25760ee413bbb77dbaa70a34bd075008</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::row_type&lt; boxes &amp; &gt;</type>
      <name>row_type</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ae6ba3ef73b5b03f774fa1590afda5525</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::row_type&lt; const boxes &amp; &gt;</type>
      <name>const_row_type</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a4f58e325579b81917487021d9736970d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::row_type&lt; boxes &amp;&amp; &gt;</type>
      <name>rvalue_row_type</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a86838c0fc1d81e5ddcc63a37cfe1b746</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>columns</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ad6bf5f2165ececbd3f63099102e2771b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>boxes</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a6264b86eff1f40143dbce82cbd6f6866</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>boxes</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a0de413c75f96495cf3a9e8154b7e882c</anchor>
      <arglist>(boxes &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>operator=</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>adffe7f9a7e41e09b615873ad2ff5269c</anchor>
      <arglist>(boxes &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>boxes</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a5993e472547bf5be4ef8e9d98c67526d</anchor>
      <arglist>(const boxes &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>operator=</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a551fb8fb5bc83e9bcd65a5f09fc51113</anchor>
      <arglist>(const boxes &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~boxes</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a8fd3f937f12ced496d7818402c823680</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>boxes</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a6791a97971ee2bb79a1ddb3eaef5f1ff</anchor>
      <arglist>(const allocator_type &amp;alloc) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>boxes</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a6659e7c96ab9df03d1839737c346c701</anchor>
      <arglist>(allocator_type &amp;&amp;alloc) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr allocator_type</type>
      <name>get_allocator</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ac05a944668996fb2c2a91c6a2f3cda3a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr table_type &amp;</type>
      <name>table</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a99563640025b1fb960ec361646528942</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr table_type &amp;&amp;</type>
      <name>table</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ac0ef0df0f8f31275d0c4133ddf3ab842</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const table_type &amp;</type>
      <name>table</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>aefe8fe689544b84cccdfbff0965b3c64</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a0e382d8361550b4947c6bc20ba87b23d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ad33f90666f5212fdcaa994199fea3bee</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>max_size</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a6ab29aa4d92e24c4bd6abff41d2bf79d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>allocation_size</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>aa5d4a754dcd04a4fd96d0f099d2d22a9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>reserve</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ae2305c967e3364d59220f5e61192729a</anchor>
      <arglist>(size_type new_cap) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().reserve(size_type{})))</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>capacity</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a81b31273b263010ea1029a700bfc0319</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>shrink_to_fit</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a86e4755492c40813995181b713c27d77</anchor>
      <arglist>() noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().shrink_to_fit()))</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>clear</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a10f4bd307be07ef1d39d6fd2e913599c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>erase</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a56fc579011858012868b0eaae8533561</anchor>
      <arglist>(size_type pos) noexcept(soagen::has_nothrow_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::optional&lt; size_type &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a34a9a22db200dea0d73728197ee359df</anchor>
      <arglist>(size_type pos) noexcept(soagen::has_nothrow_unordered_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>erase</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a2ebddcd74e613217fe2a5402f30eaa4d</anchor>
      <arglist>(iterator pos) noexcept(soagen::has_nothrow_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::optional&lt; iterator &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a7aad701061b665a2776503fbd06ce476</anchor>
      <arglist>(iterator pos) noexcept(soagen::has_nothrow_unordered_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>erase</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a27ffa0f01ba36c7df7e163c03df6aec6</anchor>
      <arglist>(const_iterator pos) noexcept(soagen::has_nothrow_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::optional&lt; const_iterator &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>af85d1082d316c7d898417496ce1e074d</anchor>
      <arglist>(const_iterator pos) noexcept(soagen::has_nothrow_unordered_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>pop_back</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>acaa8dac3c9162d6f073a9ea7cb951152</anchor>
      <arglist>(size_type num=1) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().pop_back(size_type{})))</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>swap_columns</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ad934a46b87981fcde7ace3076772a4a3</anchor>
      <arglist>() noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().template swap_columns&lt; static_cast&lt; size_t &gt;(A), static_cast&lt; size_t &gt;(B)&gt;()))</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>resize</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a1fb70d2be920112ec429076aadf6e3f6</anchor>
      <arglist>(size_type new_size) noexcept(soagen::has_nothrow_resize_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ad2204ab6797d1a7b3c7daa4950c50e75</anchor>
      <arglist>(boxes &amp;other) noexcept(soagen::has_nothrow_swap_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>push_back</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a0f84d504156267cdf9343bfc225dd542</anchor>
      <arglist>(column_traits&lt; 0 &gt;::param_type center_x, column_traits&lt; 1 &gt;::param_type center_y, column_traits&lt; 2 &gt;::param_type center_z, column_traits&lt; 3 &gt;::param_type extents_x=0.5, column_traits&lt; 4 &gt;::param_type extents_y=0.5, column_traits&lt; 5 &gt;::param_type extents_z=0.5, column_traits&lt; 6 &gt;::param_type mass=default_mass) noexcept(table_traits::push_back_is_nothrow&lt; table_type &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>push_back</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a2f998dea4c14b6c3d0efc621a55ba9df</anchor>
      <arglist>(column_traits&lt; 0 &gt;::rvalue_type center_x, column_traits&lt; 1 &gt;::rvalue_type center_y, column_traits&lt; 2 &gt;::rvalue_type center_z, column_traits&lt; 3 &gt;::rvalue_type extents_x=0.5, column_traits&lt; 4 &gt;::rvalue_type extents_y=0.5, column_traits&lt; 5 &gt;::rvalue_type extents_z=0.5, column_traits&lt; 6 &gt;::rvalue_type mass=default_mass) noexcept(table_traits::rvalue_push_back_is_nothrow&lt; table_type &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>emplace_back</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>aec61c54495e3bd4922e1c770f62f3ee3</anchor>
      <arglist>(CenterX &amp;&amp;center_x, CenterY &amp;&amp;center_y, CenterZ &amp;&amp;center_z, ExtentsX &amp;&amp;extents_x=0.5, ExtentsY &amp;&amp;extents_y=0.5, ExtentsZ &amp;&amp;extents_z=0.5, Mass &amp;&amp;mass=default_mass) noexcept(table_traits::emplace_back_is_nothrow&lt; table_type &amp;, CenterX &amp;&amp;, CenterY &amp;&amp;, CenterZ &amp;&amp;, ExtentsX &amp;&amp;, ExtentsY &amp;&amp;, ExtentsZ &amp;&amp;, Mass &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>emplace_back</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ac6b07c19d98a928c4e4b13e4d538bcce</anchor>
      <arglist>(Tuple &amp;&amp;tuple_) noexcept(table_traits::emplace_back_is_nothrow&lt; table_type &amp;, Tuple &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a7312b5656a0a8d50f3dd15261e4056a0</anchor>
      <arglist>(size_type index_, column_traits&lt; 0 &gt;::param_type center_x, column_traits&lt; 1 &gt;::param_type center_y, column_traits&lt; 2 &gt;::param_type center_z, column_traits&lt; 3 &gt;::param_type extents_x=0.5, column_traits&lt; 4 &gt;::param_type extents_y=0.5, column_traits&lt; 5 &gt;::param_type extents_z=0.5, column_traits&lt; 6 &gt;::param_type mass=default_mass) noexcept(table_traits::insert_is_nothrow&lt; table_type &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>acc8d4d59fddcc7bb66bec0d27a023e94</anchor>
      <arglist>(iterator iter_, column_traits&lt; 0 &gt;::param_type center_x, column_traits&lt; 1 &gt;::param_type center_y, column_traits&lt; 2 &gt;::param_type center_z, column_traits&lt; 3 &gt;::param_type extents_x=0.5, column_traits&lt; 4 &gt;::param_type extents_y=0.5, column_traits&lt; 5 &gt;::param_type extents_z=0.5, column_traits&lt; 6 &gt;::param_type mass=default_mass) noexcept(table_traits::insert_is_nothrow&lt; table_type &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ae6a5df19ff8a60a2b8a1165d29b46cf1</anchor>
      <arglist>(const_iterator iter_, column_traits&lt; 0 &gt;::param_type center_x, column_traits&lt; 1 &gt;::param_type center_y, column_traits&lt; 2 &gt;::param_type center_z, column_traits&lt; 3 &gt;::param_type extents_x=0.5, column_traits&lt; 4 &gt;::param_type extents_y=0.5, column_traits&lt; 5 &gt;::param_type extents_z=0.5, column_traits&lt; 6 &gt;::param_type mass=default_mass) noexcept(table_traits::insert_is_nothrow&lt; table_type &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a31c57d9cce568f5521d37173c96100d7</anchor>
      <arglist>(size_type index_, column_traits&lt; 0 &gt;::rvalue_type center_x, column_traits&lt; 1 &gt;::rvalue_type center_y, column_traits&lt; 2 &gt;::rvalue_type center_z, column_traits&lt; 3 &gt;::rvalue_type extents_x=0.5, column_traits&lt; 4 &gt;::rvalue_type extents_y=0.5, column_traits&lt; 5 &gt;::rvalue_type extents_z=0.5, column_traits&lt; 6 &gt;::rvalue_type mass=default_mass) noexcept(table_traits::rvalue_insert_is_nothrow&lt; table_type &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a2ab7407e8b5d73824fca2681f71def9d</anchor>
      <arglist>(iterator iter_, column_traits&lt; 0 &gt;::rvalue_type center_x, column_traits&lt; 1 &gt;::rvalue_type center_y, column_traits&lt; 2 &gt;::rvalue_type center_z, column_traits&lt; 3 &gt;::rvalue_type extents_x=0.5, column_traits&lt; 4 &gt;::rvalue_type extents_y=0.5, column_traits&lt; 5 &gt;::rvalue_type extents_z=0.5, column_traits&lt; 6 &gt;::rvalue_type mass=default_mass) noexcept(table_traits::rvalue_insert_is_nothrow&lt; table_type &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ae51faeecaa3042c2be30eacb508562f2</anchor>
      <arglist>(const_iterator iter_, column_traits&lt; 0 &gt;::rvalue_type center_x, column_traits&lt; 1 &gt;::rvalue_type center_y, column_traits&lt; 2 &gt;::rvalue_type center_z, column_traits&lt; 3 &gt;::rvalue_type extents_x=0.5, column_traits&lt; 4 &gt;::rvalue_type extents_y=0.5, column_traits&lt; 5 &gt;::rvalue_type extents_z=0.5, column_traits&lt; 6 &gt;::rvalue_type mass=default_mass) noexcept(table_traits::rvalue_insert_is_nothrow&lt; table_type &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ad374cd87d30dbd79030a94a2ea5458b5</anchor>
      <arglist>(size_type index_, CenterX &amp;&amp;center_x, CenterY &amp;&amp;center_y, CenterZ &amp;&amp;center_z, ExtentsX &amp;&amp;extents_x=0.5, ExtentsY &amp;&amp;extents_y=0.5, ExtentsZ &amp;&amp;extents_z=0.5, Mass &amp;&amp;mass=default_mass) noexcept(table_traits::emplace_is_nothrow&lt; table_type &amp;, CenterX &amp;&amp;, CenterY &amp;&amp;, CenterZ &amp;&amp;, ExtentsX &amp;&amp;, ExtentsY &amp;&amp;, ExtentsZ &amp;&amp;, Mass &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>afb4725a43830b0bc8c796d009d2f9c9e</anchor>
      <arglist>(iterator iter_, CenterX &amp;&amp;center_x, CenterY &amp;&amp;center_y, CenterZ &amp;&amp;center_z, ExtentsX &amp;&amp;extents_x=0.5, ExtentsY &amp;&amp;extents_y=0.5, ExtentsZ &amp;&amp;extents_z=0.5, Mass &amp;&amp;mass=default_mass) noexcept(table_traits::emplace_is_nothrow&lt; table_type &amp;, CenterX &amp;&amp;, CenterY &amp;&amp;, CenterZ &amp;&amp;, ExtentsX &amp;&amp;, ExtentsY &amp;&amp;, ExtentsZ &amp;&amp;, Mass &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a30de0986a3c86c8a7399068c6e8a56ed</anchor>
      <arglist>(const_iterator iter_, CenterX &amp;&amp;center_x, CenterY &amp;&amp;center_y, CenterZ &amp;&amp;center_z, ExtentsX &amp;&amp;extents_x=0.5, ExtentsY &amp;&amp;extents_y=0.5, ExtentsZ &amp;&amp;extents_z=0.5, Mass &amp;&amp;mass=default_mass) noexcept(table_traits::emplace_is_nothrow&lt; table_type &amp;, CenterX &amp;&amp;, CenterY &amp;&amp;, CenterZ &amp;&amp;, ExtentsX &amp;&amp;, ExtentsY &amp;&amp;, ExtentsZ &amp;&amp;, Mass &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>acb3277deea4ed8b90d37daf8912fc2cc</anchor>
      <arglist>(size_type index_, Tuple &amp;&amp;tuple_) noexcept(table_traits::emplace_is_nothrow&lt; table_type &amp;, Tuple &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>aa2c670bcd63783d71c426260fc4ac9b5</anchor>
      <arglist>(iterator iter_, Tuple &amp;&amp;tuple_) noexcept(table_traits::emplace_is_nothrow&lt; table_type &amp;, Tuple &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ab3e7d43664137c66d43df288a2206c85</anchor>
      <arglist>(const_iterator iter_, Tuple &amp;&amp;tuple_) noexcept(table_traits::emplace_is_nothrow&lt; table_type &amp;, Tuple &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::byte *</type>
      <name>data</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a458ac020588a64bb9ae192cbecdcead8</anchor>
      <arglist>() noexcept(soagen::has_nothrow_data_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const std::byte *const</type>
      <name>data</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ab51fdd28b22c7ed85f189ef102d2cd04</anchor>
      <arglist>() noexcept(soagen::has_nothrow_data_member&lt; const table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr column_type&lt; Column &gt; *</type>
      <name>column</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a2a641f6146abdf6174a1107948c465e4</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::add_const_t&lt; column_type&lt; Column &gt; &gt; *</type>
      <name>column</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>af5e23463c10124397b1c79459f0cf1a0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>center_x</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ac6340bb69743f8d5277374582fdeb0c9</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>center_x</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>af7ed114f61fee1579e6c2221d0207d8c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>center_y</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a0f7cc17a16452e63190e6d18b1e4329e</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>center_y</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a033078ff705254f7ae6cda6ef2191b3f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>center_z</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a6a25452fef8a9a20ffdd4bda107f7530</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>center_z</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a8b8e2024fe3e104940554d964e02a939</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>extents_x</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a214fc9dd629aa987e2b49dfb043288d2</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>extents_x</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>aa9073c2d39a00f007eb51ca38dbe7d7f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>extents_y</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>abcf87b3a283b18c7ad6fc82ffabe1b20</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>extents_y</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ab13c2649de4dba4d8b61a03e6f21af35</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>extents_z</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a0cc979a249dddbeb584106904a72f245</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>extents_z</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ae8aff289df8adc9dbda8e44adbed0e96</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>mass</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>af4bf12b35edd3e0814a8228d0c57787a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>mass</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>aef95352740973bf8212e76fe907cb7c8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>for_each_column</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a292e97c3af4c262c48f9a933734b7796</anchor>
      <arglist>(Func &amp;&amp;func) noexcept(table_traits::for_each_column_nothrow_invocable&lt; Func &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>for_each_column</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>af81fccb5cddd4848593f5fcc8e8475d4</anchor>
      <arglist>(Func &amp;&amp;func) const noexcept(table_traits::for_each_column_nothrow_invocable&lt; Func &amp;&amp;, true &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::row_type&lt; boxes &amp;, Columns... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a4f6eb1fbc156074c5a6fd73ad0d8813a</anchor>
      <arglist>(size_type index) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr row_type</type>
      <name>operator[]</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a58a774f50aec6f373540d0a0420378ef</anchor>
      <arglist>(size_type index) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr row_type</type>
      <name>at</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a26c74d06eacefabb88c0bb5f71c96a8e</anchor>
      <arglist>(size_type index) &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr row_type</type>
      <name>front</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a36ab4a53ed4bda8b2616da62b2de2bbb</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr row_type</type>
      <name>back</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>af73eb8f5e3e61847b734f6a06fa9a20b</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::row_type&lt; boxes &amp;&amp;, Columns... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ad7762debbda7f32bf5d6c486f07e1e30</anchor>
      <arglist>(size_type index) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr rvalue_row_type</type>
      <name>operator[]</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a0fb7fe7bddf46a3f814127090fdef814</anchor>
      <arglist>(size_type index) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr rvalue_row_type</type>
      <name>at</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a47d0d0c64f2bce29c8d415846564dd82</anchor>
      <arglist>(size_type index) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr rvalue_row_type</type>
      <name>front</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ac4230b1e373fd5e132392df9eb310331</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr rvalue_row_type</type>
      <name>back</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ac9c30453ef476be10d80f00db07a7a7f</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::row_type&lt; const boxes &amp;, Columns... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>adcbdb06cf30e10299bf6fbbdaa97ea2d</anchor>
      <arglist>(size_type index) const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_row_type</type>
      <name>operator[]</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a69de3173c9f1c5361548cbc613d71d75</anchor>
      <arglist>(size_type index) const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_row_type</type>
      <name>at</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a78db9cd2cdf3dc208fff5e7679730dc5</anchor>
      <arglist>(size_type index) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_row_type</type>
      <name>front</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a28796a982c57ea3a977d1557295efd22</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_row_type</type>
      <name>back</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ae50216d95648a45a8da24d3e98ce62f6</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; boxes &amp;, Columns... &gt;</type>
      <name>begin</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a38cad9f859e199fced6f61e56e690e1b</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; boxes &amp;, Columns... &gt;</type>
      <name>end</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a0195488fe6eeb003b0ae5d8695b55590</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; boxes &amp;&amp;, Columns... &gt;</type>
      <name>begin</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a77f126817e2a6269992e35d2ac3f5ee8</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; boxes &amp;&amp;, Columns... &gt;</type>
      <name>end</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>aad42eabef97077ca65034436b24b6736</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; const boxes &amp;, Columns... &gt;</type>
      <name>begin</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a4108ca879ec498585a720c13da42a075</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; const boxes &amp;, Columns... &gt;</type>
      <name>end</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a9cf2fa11b69ba008e39c5c366d157357</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; const boxes &amp;, Columns... &gt;</type>
      <name>cbegin</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ad7d208b305ad9db24fe72449474e5429</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; const boxes &amp;, Columns... &gt;</type>
      <name>cend</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a089d75354cd5575ceca9808affb5efdb</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_type</type>
      <name>column_count</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>aba2d427764b2295b6167944d37221f34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_type</type>
      <name>aligned_stride</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>af0361fb59169d8b55024aaa61443f26f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto &amp;</type>
      <name>column_name</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>aac799b93448ba55381670ab5be1992c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>af1de6b8326125457c073d8d439964d5d</anchor>
      <arglist>(const boxes &amp;lhs, const boxes &amp;rhs) noexcept(soagen::is_nothrow_equality_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a1afe9819ec24b878abee954830e1978c</anchor>
      <arglist>(const boxes &amp;lhs, const boxes &amp;rhs) noexcept(soagen::is_nothrow_equality_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a7f151b8aef59afec875f119f846ac342</anchor>
      <arglist>(const boxes &amp;lhs, const boxes &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a97f21f38b98f2fdaf973393825a37a86</anchor>
      <arglist>(const boxes &amp;lhs, const boxes &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ac9bfe5aeaefee1ceb1bd77ee6b43b7e0</anchor>
      <arglist>(const boxes &amp;lhs, const boxes &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a225cdcffa1c29725a6600e20e1cf0d7a</anchor>
      <arglist>(const boxes &amp;lhs, const boxes &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr table_type &amp;</type>
      <name>table</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a99563640025b1fb960ec361646528942</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr table_type &amp;&amp;</type>
      <name>table</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ac0ef0df0f8f31275d0c4133ddf3ab842</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const table_type &amp;</type>
      <name>table</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>aefe8fe689544b84cccdfbff0965b3c64</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a0e382d8361550b4947c6bc20ba87b23d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ad33f90666f5212fdcaa994199fea3bee</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>max_size</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a6ab29aa4d92e24c4bd6abff41d2bf79d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>allocation_size</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>aa5d4a754dcd04a4fd96d0f099d2d22a9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>reserve</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ae2305c967e3364d59220f5e61192729a</anchor>
      <arglist>(size_type new_cap) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().reserve(size_type{})))</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>capacity</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a81b31273b263010ea1029a700bfc0319</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>shrink_to_fit</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a86e4755492c40813995181b713c27d77</anchor>
      <arglist>() noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().shrink_to_fit()))</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>clear</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a10f4bd307be07ef1d39d6fd2e913599c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>erase</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a56fc579011858012868b0eaae8533561</anchor>
      <arglist>(size_type pos) noexcept(soagen::has_nothrow_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::optional&lt; size_type &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a34a9a22db200dea0d73728197ee359df</anchor>
      <arglist>(size_type pos) noexcept(soagen::has_nothrow_unordered_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>erase</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a2ebddcd74e613217fe2a5402f30eaa4d</anchor>
      <arglist>(iterator pos) noexcept(soagen::has_nothrow_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::optional&lt; iterator &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a7aad701061b665a2776503fbd06ce476</anchor>
      <arglist>(iterator pos) noexcept(soagen::has_nothrow_unordered_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>erase</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a27ffa0f01ba36c7df7e163c03df6aec6</anchor>
      <arglist>(const_iterator pos) noexcept(soagen::has_nothrow_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::optional&lt; const_iterator &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>af85d1082d316c7d898417496ce1e074d</anchor>
      <arglist>(const_iterator pos) noexcept(soagen::has_nothrow_unordered_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>pop_back</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>acaa8dac3c9162d6f073a9ea7cb951152</anchor>
      <arglist>(size_type num=1) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().pop_back(size_type{})))</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>swap_columns</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ad934a46b87981fcde7ace3076772a4a3</anchor>
      <arglist>() noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().template swap_columns&lt; static_cast&lt; size_t &gt;(A), static_cast&lt; size_t &gt;(B)&gt;()))</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>resize</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a1fb70d2be920112ec429076aadf6e3f6</anchor>
      <arglist>(size_type new_size) noexcept(soagen::has_nothrow_resize_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ad2204ab6797d1a7b3c7daa4950c50e75</anchor>
      <arglist>(boxes &amp;other) noexcept(soagen::has_nothrow_swap_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>push_back</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a0f84d504156267cdf9343bfc225dd542</anchor>
      <arglist>(column_traits&lt; 0 &gt;::param_type center_x, column_traits&lt; 1 &gt;::param_type center_y, column_traits&lt; 2 &gt;::param_type center_z, column_traits&lt; 3 &gt;::param_type extents_x=0.5, column_traits&lt; 4 &gt;::param_type extents_y=0.5, column_traits&lt; 5 &gt;::param_type extents_z=0.5, column_traits&lt; 6 &gt;::param_type mass=default_mass) noexcept(table_traits::push_back_is_nothrow&lt; table_type &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>push_back</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a2f998dea4c14b6c3d0efc621a55ba9df</anchor>
      <arglist>(column_traits&lt; 0 &gt;::rvalue_type center_x, column_traits&lt; 1 &gt;::rvalue_type center_y, column_traits&lt; 2 &gt;::rvalue_type center_z, column_traits&lt; 3 &gt;::rvalue_type extents_x=0.5, column_traits&lt; 4 &gt;::rvalue_type extents_y=0.5, column_traits&lt; 5 &gt;::rvalue_type extents_z=0.5, column_traits&lt; 6 &gt;::rvalue_type mass=default_mass) noexcept(table_traits::rvalue_push_back_is_nothrow&lt; table_type &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>emplace_back</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>aec61c54495e3bd4922e1c770f62f3ee3</anchor>
      <arglist>(CenterX &amp;&amp;center_x, CenterY &amp;&amp;center_y, CenterZ &amp;&amp;center_z, ExtentsX &amp;&amp;extents_x=0.5, ExtentsY &amp;&amp;extents_y=0.5, ExtentsZ &amp;&amp;extents_z=0.5, Mass &amp;&amp;mass=default_mass) noexcept(table_traits::emplace_back_is_nothrow&lt; table_type &amp;, CenterX &amp;&amp;, CenterY &amp;&amp;, CenterZ &amp;&amp;, ExtentsX &amp;&amp;, ExtentsY &amp;&amp;, ExtentsZ &amp;&amp;, Mass &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>emplace_back</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ac6b07c19d98a928c4e4b13e4d538bcce</anchor>
      <arglist>(Tuple &amp;&amp;tuple_) noexcept(table_traits::emplace_back_is_nothrow&lt; table_type &amp;, Tuple &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a7312b5656a0a8d50f3dd15261e4056a0</anchor>
      <arglist>(size_type index_, column_traits&lt; 0 &gt;::param_type center_x, column_traits&lt; 1 &gt;::param_type center_y, column_traits&lt; 2 &gt;::param_type center_z, column_traits&lt; 3 &gt;::param_type extents_x=0.5, column_traits&lt; 4 &gt;::param_type extents_y=0.5, column_traits&lt; 5 &gt;::param_type extents_z=0.5, column_traits&lt; 6 &gt;::param_type mass=default_mass) noexcept(table_traits::insert_is_nothrow&lt; table_type &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>acc8d4d59fddcc7bb66bec0d27a023e94</anchor>
      <arglist>(iterator iter_, column_traits&lt; 0 &gt;::param_type center_x, column_traits&lt; 1 &gt;::param_type center_y, column_traits&lt; 2 &gt;::param_type center_z, column_traits&lt; 3 &gt;::param_type extents_x=0.5, column_traits&lt; 4 &gt;::param_type extents_y=0.5, column_traits&lt; 5 &gt;::param_type extents_z=0.5, column_traits&lt; 6 &gt;::param_type mass=default_mass) noexcept(table_traits::insert_is_nothrow&lt; table_type &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ae6a5df19ff8a60a2b8a1165d29b46cf1</anchor>
      <arglist>(const_iterator iter_, column_traits&lt; 0 &gt;::param_type center_x, column_traits&lt; 1 &gt;::param_type center_y, column_traits&lt; 2 &gt;::param_type center_z, column_traits&lt; 3 &gt;::param_type extents_x=0.5, column_traits&lt; 4 &gt;::param_type extents_y=0.5, column_traits&lt; 5 &gt;::param_type extents_z=0.5, column_traits&lt; 6 &gt;::param_type mass=default_mass) noexcept(table_traits::insert_is_nothrow&lt; table_type &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a31c57d9cce568f5521d37173c96100d7</anchor>
      <arglist>(size_type index_, column_traits&lt; 0 &gt;::rvalue_type center_x, column_traits&lt; 1 &gt;::rvalue_type center_y, column_traits&lt; 2 &gt;::rvalue_type center_z, column_traits&lt; 3 &gt;::rvalue_type extents_x=0.5, column_traits&lt; 4 &gt;::rvalue_type extents_y=0.5, column_traits&lt; 5 &gt;::rvalue_type extents_z=0.5, column_traits&lt; 6 &gt;::rvalue_type mass=default_mass) noexcept(table_traits::rvalue_insert_is_nothrow&lt; table_type &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a2ab7407e8b5d73824fca2681f71def9d</anchor>
      <arglist>(iterator iter_, column_traits&lt; 0 &gt;::rvalue_type center_x, column_traits&lt; 1 &gt;::rvalue_type center_y, column_traits&lt; 2 &gt;::rvalue_type center_z, column_traits&lt; 3 &gt;::rvalue_type extents_x=0.5, column_traits&lt; 4 &gt;::rvalue_type extents_y=0.5, column_traits&lt; 5 &gt;::rvalue_type extents_z=0.5, column_traits&lt; 6 &gt;::rvalue_type mass=default_mass) noexcept(table_traits::rvalue_insert_is_nothrow&lt; table_type &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ae51faeecaa3042c2be30eacb508562f2</anchor>
      <arglist>(const_iterator iter_, column_traits&lt; 0 &gt;::rvalue_type center_x, column_traits&lt; 1 &gt;::rvalue_type center_y, column_traits&lt; 2 &gt;::rvalue_type center_z, column_traits&lt; 3 &gt;::rvalue_type extents_x=0.5, column_traits&lt; 4 &gt;::rvalue_type extents_y=0.5, column_traits&lt; 5 &gt;::rvalue_type extents_z=0.5, column_traits&lt; 6 &gt;::rvalue_type mass=default_mass) noexcept(table_traits::rvalue_insert_is_nothrow&lt; table_type &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ad374cd87d30dbd79030a94a2ea5458b5</anchor>
      <arglist>(size_type index_, CenterX &amp;&amp;center_x, CenterY &amp;&amp;center_y, CenterZ &amp;&amp;center_z, ExtentsX &amp;&amp;extents_x=0.5, ExtentsY &amp;&amp;extents_y=0.5, ExtentsZ &amp;&amp;extents_z=0.5, Mass &amp;&amp;mass=default_mass) noexcept(table_traits::emplace_is_nothrow&lt; table_type &amp;, CenterX &amp;&amp;, CenterY &amp;&amp;, CenterZ &amp;&amp;, ExtentsX &amp;&amp;, ExtentsY &amp;&amp;, ExtentsZ &amp;&amp;, Mass &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>afb4725a43830b0bc8c796d009d2f9c9e</anchor>
      <arglist>(iterator iter_, CenterX &amp;&amp;center_x, CenterY &amp;&amp;center_y, CenterZ &amp;&amp;center_z, ExtentsX &amp;&amp;extents_x=0.5, ExtentsY &amp;&amp;extents_y=0.5, ExtentsZ &amp;&amp;extents_z=0.5, Mass &amp;&amp;mass=default_mass) noexcept(table_traits::emplace_is_nothrow&lt; table_type &amp;, CenterX &amp;&amp;, CenterY &amp;&amp;, CenterZ &amp;&amp;, ExtentsX &amp;&amp;, ExtentsY &amp;&amp;, ExtentsZ &amp;&amp;, Mass &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a30de0986a3c86c8a7399068c6e8a56ed</anchor>
      <arglist>(const_iterator iter_, CenterX &amp;&amp;center_x, CenterY &amp;&amp;center_y, CenterZ &amp;&amp;center_z, ExtentsX &amp;&amp;extents_x=0.5, ExtentsY &amp;&amp;extents_y=0.5, ExtentsZ &amp;&amp;extents_z=0.5, Mass &amp;&amp;mass=default_mass) noexcept(table_traits::emplace_is_nothrow&lt; table_type &amp;, CenterX &amp;&amp;, CenterY &amp;&amp;, CenterZ &amp;&amp;, ExtentsX &amp;&amp;, ExtentsY &amp;&amp;, ExtentsZ &amp;&amp;, Mass &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>acb3277deea4ed8b90d37daf8912fc2cc</anchor>
      <arglist>(size_type index_, Tuple &amp;&amp;tuple_) noexcept(table_traits::emplace_is_nothrow&lt; table_type &amp;, Tuple &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>aa2c670bcd63783d71c426260fc4ac9b5</anchor>
      <arglist>(iterator iter_, Tuple &amp;&amp;tuple_) noexcept(table_traits::emplace_is_nothrow&lt; table_type &amp;, Tuple &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ab3e7d43664137c66d43df288a2206c85</anchor>
      <arglist>(const_iterator iter_, Tuple &amp;&amp;tuple_) noexcept(table_traits::emplace_is_nothrow&lt; table_type &amp;, Tuple &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::byte *</type>
      <name>data</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a458ac020588a64bb9ae192cbecdcead8</anchor>
      <arglist>() noexcept(soagen::has_nothrow_data_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const std::byte *const</type>
      <name>data</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ab51fdd28b22c7ed85f189ef102d2cd04</anchor>
      <arglist>() noexcept(soagen::has_nothrow_data_member&lt; const table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr column_type&lt; Column &gt; *</type>
      <name>column</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a2a641f6146abdf6174a1107948c465e4</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::add_const_t&lt; column_type&lt; Column &gt; &gt; *</type>
      <name>column</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>af5e23463c10124397b1c79459f0cf1a0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>center_x</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ac6340bb69743f8d5277374582fdeb0c9</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>center_x</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>af7ed114f61fee1579e6c2221d0207d8c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>center_y</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a0f7cc17a16452e63190e6d18b1e4329e</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>center_y</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a033078ff705254f7ae6cda6ef2191b3f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>center_z</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a6a25452fef8a9a20ffdd4bda107f7530</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>center_z</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a8b8e2024fe3e104940554d964e02a939</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>extents_x</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a214fc9dd629aa987e2b49dfb043288d2</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>extents_x</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>aa9073c2d39a00f007eb51ca38dbe7d7f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>extents_y</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>abcf87b3a283b18c7ad6fc82ffabe1b20</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>extents_y</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ab13c2649de4dba4d8b61a03e6f21af35</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>extents_z</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a0cc979a249dddbeb584106904a72f245</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>extents_z</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ae8aff289df8adc9dbda8e44adbed0e96</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>mass</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>af4bf12b35edd3e0814a8228d0c57787a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>mass</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>aef95352740973bf8212e76fe907cb7c8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>for_each_column</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a292e97c3af4c262c48f9a933734b7796</anchor>
      <arglist>(Func &amp;&amp;func) noexcept(table_traits::for_each_column_nothrow_invocable&lt; Func &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>for_each_column</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>af81fccb5cddd4848593f5fcc8e8475d4</anchor>
      <arglist>(Func &amp;&amp;func) const noexcept(table_traits::for_each_column_nothrow_invocable&lt; Func &amp;&amp;, true &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::row_type&lt; boxes &amp;, Columns... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a4f6eb1fbc156074c5a6fd73ad0d8813a</anchor>
      <arglist>(size_type index) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr row_type</type>
      <name>operator[]</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a58a774f50aec6f373540d0a0420378ef</anchor>
      <arglist>(size_type index) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr row_type</type>
      <name>at</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a26c74d06eacefabb88c0bb5f71c96a8e</anchor>
      <arglist>(size_type index) &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr row_type</type>
      <name>front</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a36ab4a53ed4bda8b2616da62b2de2bbb</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr row_type</type>
      <name>back</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>af73eb8f5e3e61847b734f6a06fa9a20b</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::row_type&lt; boxes &amp;&amp;, Columns... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ad7762debbda7f32bf5d6c486f07e1e30</anchor>
      <arglist>(size_type index) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr rvalue_row_type</type>
      <name>operator[]</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a0fb7fe7bddf46a3f814127090fdef814</anchor>
      <arglist>(size_type index) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr rvalue_row_type</type>
      <name>at</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a47d0d0c64f2bce29c8d415846564dd82</anchor>
      <arglist>(size_type index) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr rvalue_row_type</type>
      <name>front</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ac4230b1e373fd5e132392df9eb310331</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr rvalue_row_type</type>
      <name>back</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ac9c30453ef476be10d80f00db07a7a7f</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::row_type&lt; const boxes &amp;, Columns... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>adcbdb06cf30e10299bf6fbbdaa97ea2d</anchor>
      <arglist>(size_type index) const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_row_type</type>
      <name>operator[]</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a69de3173c9f1c5361548cbc613d71d75</anchor>
      <arglist>(size_type index) const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_row_type</type>
      <name>at</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a78db9cd2cdf3dc208fff5e7679730dc5</anchor>
      <arglist>(size_type index) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_row_type</type>
      <name>front</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a28796a982c57ea3a977d1557295efd22</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_row_type</type>
      <name>back</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ae50216d95648a45a8da24d3e98ce62f6</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; boxes &amp;, Columns... &gt;</type>
      <name>begin</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a38cad9f859e199fced6f61e56e690e1b</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; boxes &amp;, Columns... &gt;</type>
      <name>end</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a0195488fe6eeb003b0ae5d8695b55590</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; boxes &amp;&amp;, Columns... &gt;</type>
      <name>begin</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a77f126817e2a6269992e35d2ac3f5ee8</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; boxes &amp;&amp;, Columns... &gt;</type>
      <name>end</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>aad42eabef97077ca65034436b24b6736</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; const boxes &amp;, Columns... &gt;</type>
      <name>begin</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a4108ca879ec498585a720c13da42a075</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; const boxes &amp;, Columns... &gt;</type>
      <name>end</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a9cf2fa11b69ba008e39c5c366d157357</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; const boxes &amp;, Columns... &gt;</type>
      <name>cbegin</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ad7d208b305ad9db24fe72449474e5429</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; const boxes &amp;, Columns... &gt;</type>
      <name>cend</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a089d75354cd5575ceca9808affb5efdb</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>af1de6b8326125457c073d8d439964d5d</anchor>
      <arglist>(const boxes &amp;lhs, const boxes &amp;rhs) noexcept(soagen::is_nothrow_equality_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a1afe9819ec24b878abee954830e1978c</anchor>
      <arglist>(const boxes &amp;lhs, const boxes &amp;rhs) noexcept(soagen::is_nothrow_equality_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a7f151b8aef59afec875f119f846ac342</anchor>
      <arglist>(const boxes &amp;lhs, const boxes &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a97f21f38b98f2fdaf973393825a37a86</anchor>
      <arglist>(const boxes &amp;lhs, const boxes &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ac9bfe5aeaefee1ceb1bd77ee6b43b7e0</anchor>
      <arglist>(const boxes &amp;lhs, const boxes &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a225cdcffa1c29725a6600e20e1cf0d7a</anchor>
      <arglist>(const boxes &amp;lhs, const boxes &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>soagen::column_traits</name>
    <filename>structsoagen_1_1column__traits.html</filename>
    <templarg></templarg>
    <templarg>Align</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>storage_type</name>
      <anchorfile>structsoagen_1_1column__traits.html</anchorfile>
      <anchor>ac7565614ad518f9c714936305838dc9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ValueType</type>
      <name>value_type</name>
      <anchorfile>structsoagen_1_1column__traits.html</anchorfile>
      <anchor>abc43a55237ba1212da2a82decedd8a8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParamType</type>
      <name>param_type</name>
      <anchorfile>structsoagen_1_1column__traits.html</anchorfile>
      <anchor>a7e97ca614d4d8f34e873fee45cb0f047</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>forward_type&lt; param_type &gt;</type>
      <name>param_forward_type</name>
      <anchorfile>structsoagen_1_1column__traits.html</anchorfile>
      <anchor>a269906021dadcb9a9d6ad1aff3364cf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::rvalue_type&lt; param_type &gt;</type>
      <name>rvalue_type</name>
      <anchorfile>structsoagen_1_1column__traits.html</anchorfile>
      <anchor>afef9b99d2dda22869ae2f8ddb471287b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>forward_type&lt; rvalue_type &gt;</type>
      <name>rvalue_forward_type</name>
      <anchorfile>structsoagen_1_1column__traits.html</anchorfile>
      <anchor>aed32c7d75d45d823910737cc1a0d7a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>make_cref&lt; rvalue_type &gt;</type>
      <name>default_emplace_type</name>
      <anchorfile>structsoagen_1_1column__traits.html</anchorfile>
      <anchor>abf21e5f782da944947f7b20b3af8c80d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>alignment</name>
      <anchorfile>structsoagen_1_1column__traits.html</anchorfile>
      <anchor>ac4f3d2258732b02124b46658afd5c4e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>aligned_stride</name>
      <anchorfile>structsoagen_1_1column__traits.html</anchorfile>
      <anchor>a662bd935d7b9454d7f6751934185cdea</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>soagen::emplacer</name>
    <filename>structsoagen_1_1emplacer.html</filename>
    <templarg>Args</templarg>
  </compound>
  <compound kind="class">
    <name>soagen::examples::entities</name>
    <filename>classsoagen_1_1examples_1_1entities.html</filename>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>acbb62a3e02159f733fa9267dfdf3b75f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a7656c80ce8625679628d7f4d918ba478</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::allocator_type&lt; entities &gt;</type>
      <name>allocator_type</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a34a7613616bb4279d75edaf49516728f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::table_type&lt; entities &gt;</type>
      <name>table_type</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a1bd996f5c4022db5f147db8af5790747</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::table_traits_type&lt; entities &gt;</type>
      <name>table_traits</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>aae71ecd2ce17f7cbdb99ffd0b8430783</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename table_traits::template column&lt; static_cast&lt; size_type &gt;(Column)&gt;</type>
      <name>column_traits</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a74983f80835c4a0cbc578226d9ca8716</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename column_traits&lt; static_cast&lt; size_type &gt;(Column)&gt;::value_type</type>
      <name>column_type</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>aa273beb1983767b0807856f7ecb6178b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::iterator_type&lt; entities &amp; &gt;</type>
      <name>iterator</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>ad2f2b31fb6540fc757ff5c35f01fb133</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::iterator_type&lt; const entities &amp; &gt;</type>
      <name>const_iterator</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a8232d8ad1d89e65222f0b7998c3f9d7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::iterator_type&lt; entities &amp;&amp; &gt;</type>
      <name>rvalue_iterator</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>afa1a94ccc4e8f8a7be760120b5efec23</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::row_type&lt; entities &amp; &gt;</type>
      <name>row_type</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a4c637fe34b49861d05241cd05eefd351</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::row_type&lt; const entities &amp; &gt;</type>
      <name>const_row_type</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a5180f16c2c5a9013ca6ea80ffb687376</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::row_type&lt; entities &amp;&amp; &gt;</type>
      <name>rvalue_row_type</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>aec920fefa9351139ce90047effde9300</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>columns</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>ac794e09312922513568a829b957945b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>entities</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a1d70b7f712792d2754b1a99e5a5a2e7e</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>entities</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>ab84f48d46d2cc0ce2fd0a19a0682a851</anchor>
      <arglist>(entities &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>entities &amp;</type>
      <name>operator=</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a01eeb58c10ec1107f73ac71ba907efdf</anchor>
      <arglist>(entities &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>entities</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a2b1829339099d03df04f79994d28a455</anchor>
      <arglist>(const entities &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>entities &amp;</type>
      <name>operator=</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>aa7b8f6c2209351ed118081143ed2dfe6</anchor>
      <arglist>(const entities &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~entities</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a29d7413b5b7241fc74d9d86dbb758616</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>entities</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a4151778de07646aa512da1063a0da468</anchor>
      <arglist>(const allocator_type &amp;alloc) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>entities</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a3c13993c1dbe68b3cfca2e888daa60e7</anchor>
      <arglist>(allocator_type &amp;&amp;alloc) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr allocator_type</type>
      <name>get_allocator</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a5e7bea256e62d305c7b0c30c015bfe57</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr table_type &amp;</type>
      <name>table</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a2d1c7235defa00d7015a60ca6e1c36b8</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr table_type &amp;&amp;</type>
      <name>table</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a19591536f444db20b93ab73782f0799a</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const table_type &amp;</type>
      <name>table</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>aeb3e013b73cba6af6bc2bdcbe537488f</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>acf59f7b2de775f95b8fc2859a6b98af8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a17e92df127739e7cf8235c734f07e678</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>max_size</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>af085b8dfcaccff366850498627eea014</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>allocation_size</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a96b127e9ca0eb95673500990fa015003</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr entities &amp;</type>
      <name>reserve</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a2a53c0dd35e8510f1eed901a405cbdb8</anchor>
      <arglist>(size_type new_cap) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().reserve(size_type{})))</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>capacity</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a33df734ca632adb2810447e4623871cf</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr entities &amp;</type>
      <name>shrink_to_fit</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a988e5cd3cdfe5d776f11e35eb27e87d8</anchor>
      <arglist>() noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().shrink_to_fit()))</arglist>
    </member>
    <member kind="function">
      <type>constexpr entities &amp;</type>
      <name>clear</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>ae9384f36d67b0865af625712cb8012bf</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr entities &amp;</type>
      <name>erase</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a81ed248f20d54859adbed93a75c5fc1f</anchor>
      <arglist>(size_type pos) noexcept(soagen::has_nothrow_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::optional&lt; size_type &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>ad99aa12e13d5084fcd13062c51aa7585</anchor>
      <arglist>(size_type pos) noexcept(soagen::has_nothrow_unordered_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>erase</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a0cfc569515fd8e042d68b63a8685200f</anchor>
      <arglist>(iterator pos) noexcept(soagen::has_nothrow_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::optional&lt; iterator &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a5777db35e317da6aeed59841a8e25a8e</anchor>
      <arglist>(iterator pos) noexcept(soagen::has_nothrow_unordered_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>erase</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>ab754c3f27c6d9029c349230f4003331f</anchor>
      <arglist>(const_iterator pos) noexcept(soagen::has_nothrow_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::optional&lt; const_iterator &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a4ab08f64c4be2abbeb86f820cd6098c1</anchor>
      <arglist>(const_iterator pos) noexcept(soagen::has_nothrow_unordered_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr entities &amp;</type>
      <name>pop_back</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a5ea61707e6ad840bf8d3a9ec0ac201c1</anchor>
      <arglist>(size_type num=1) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().pop_back(size_type{})))</arglist>
    </member>
    <member kind="function">
      <type>constexpr entities &amp;</type>
      <name>swap_columns</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>ae43100cda52104bab25ead8e7de0654d</anchor>
      <arglist>() noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().template swap_columns&lt; static_cast&lt; size_t &gt;(A), static_cast&lt; size_t &gt;(B)&gt;()))</arglist>
    </member>
    <member kind="function">
      <type>entities &amp;</type>
      <name>resize</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a7c276434607741aa7faedbc6692e97b2</anchor>
      <arglist>(size_type new_size) noexcept(soagen::has_nothrow_resize_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a16afc16b389d4a28dcb41f006cde323e</anchor>
      <arglist>(entities &amp;other) noexcept(soagen::has_nothrow_swap_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr entities &amp;</type>
      <name>push_back</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a2f999557490235c7c255fe086f9172f6</anchor>
      <arglist>(column_traits&lt; 0 &gt;::param_type id, column_traits&lt; 1 &gt;::param_type name=&quot;&quot;, column_traits&lt; 2 &gt;::param_type pos={}, column_traits&lt; 3 &gt;::param_type orient={ 1, 0, 0, 0 }) noexcept(table_traits::push_back_is_nothrow&lt; table_type &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr entities &amp;</type>
      <name>push_back</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>acaa409bda15a7112eb5935ef6c14e505</anchor>
      <arglist>(column_traits&lt; 0 &gt;::rvalue_type id, column_traits&lt; 1 &gt;::rvalue_type name=&quot;&quot;, column_traits&lt; 2 &gt;::rvalue_type pos={}, column_traits&lt; 3 &gt;::rvalue_type orient={ 1, 0, 0, 0 }) noexcept(table_traits::rvalue_push_back_is_nothrow&lt; table_type &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr entities &amp;</type>
      <name>emplace_back</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a65178b9952067575c5d0b297c72376ba</anchor>
      <arglist>(Id &amp;&amp;id, Name &amp;&amp;name=&quot;&quot;, Pos &amp;&amp;pos={}, Orient &amp;&amp;orient={ 1, 0, 0, 0 }) noexcept(table_traits::emplace_back_is_nothrow&lt; table_type &amp;, Id &amp;&amp;, Name &amp;&amp;, Pos &amp;&amp;, Orient &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr entities &amp;</type>
      <name>emplace_back</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>ad27336af4c66435705637136142009eb</anchor>
      <arglist>(Tuple &amp;&amp;tuple_) noexcept(table_traits::emplace_back_is_nothrow&lt; table_type &amp;, Tuple &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr entities &amp;</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a9291176b1bd4fb287d4c252160ea7225</anchor>
      <arglist>(size_type index_, column_traits&lt; 0 &gt;::param_type id, column_traits&lt; 1 &gt;::param_type name=&quot;&quot;, column_traits&lt; 2 &gt;::param_type pos={}, column_traits&lt; 3 &gt;::param_type orient={ 1, 0, 0, 0 }) noexcept(table_traits::insert_is_nothrow&lt; table_type &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>abe9f16c4280fb7555bcaa021c9e36c94</anchor>
      <arglist>(iterator iter_, column_traits&lt; 0 &gt;::param_type id, column_traits&lt; 1 &gt;::param_type name=&quot;&quot;, column_traits&lt; 2 &gt;::param_type pos={}, column_traits&lt; 3 &gt;::param_type orient={ 1, 0, 0, 0 }) noexcept(table_traits::insert_is_nothrow&lt; table_type &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a7b47165f127834bef0143d1143d25350</anchor>
      <arglist>(const_iterator iter_, column_traits&lt; 0 &gt;::param_type id, column_traits&lt; 1 &gt;::param_type name=&quot;&quot;, column_traits&lt; 2 &gt;::param_type pos={}, column_traits&lt; 3 &gt;::param_type orient={ 1, 0, 0, 0 }) noexcept(table_traits::insert_is_nothrow&lt; table_type &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr entities &amp;</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a0993ab1eed3cb5c8c992ada94dd5b2df</anchor>
      <arglist>(size_type index_, column_traits&lt; 0 &gt;::rvalue_type id, column_traits&lt; 1 &gt;::rvalue_type name=&quot;&quot;, column_traits&lt; 2 &gt;::rvalue_type pos={}, column_traits&lt; 3 &gt;::rvalue_type orient={ 1, 0, 0, 0 }) noexcept(table_traits::rvalue_insert_is_nothrow&lt; table_type &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a7d03c980c8f22fb18073376a1603a67d</anchor>
      <arglist>(iterator iter_, column_traits&lt; 0 &gt;::rvalue_type id, column_traits&lt; 1 &gt;::rvalue_type name=&quot;&quot;, column_traits&lt; 2 &gt;::rvalue_type pos={}, column_traits&lt; 3 &gt;::rvalue_type orient={ 1, 0, 0, 0 }) noexcept(table_traits::rvalue_insert_is_nothrow&lt; table_type &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a2f31a8e1ffa5c0991fe9785068018f2b</anchor>
      <arglist>(const_iterator iter_, column_traits&lt; 0 &gt;::rvalue_type id, column_traits&lt; 1 &gt;::rvalue_type name=&quot;&quot;, column_traits&lt; 2 &gt;::rvalue_type pos={}, column_traits&lt; 3 &gt;::rvalue_type orient={ 1, 0, 0, 0 }) noexcept(table_traits::rvalue_insert_is_nothrow&lt; table_type &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr entities &amp;</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a2ec6d3ead7895acaeffa581c54c8ccc8</anchor>
      <arglist>(size_type index_, Id &amp;&amp;id, Name &amp;&amp;name=&quot;&quot;, Pos &amp;&amp;pos={}, Orient &amp;&amp;orient={ 1, 0, 0, 0 }) noexcept(table_traits::emplace_is_nothrow&lt; table_type &amp;, Id &amp;&amp;, Name &amp;&amp;, Pos &amp;&amp;, Orient &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>ac44cb146ded481538b8ed4fbd44c3a60</anchor>
      <arglist>(iterator iter_, Id &amp;&amp;id, Name &amp;&amp;name=&quot;&quot;, Pos &amp;&amp;pos={}, Orient &amp;&amp;orient={ 1, 0, 0, 0 }) noexcept(table_traits::emplace_is_nothrow&lt; table_type &amp;, Id &amp;&amp;, Name &amp;&amp;, Pos &amp;&amp;, Orient &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a962744a219ad067e4263ffbe4ef5db30</anchor>
      <arglist>(const_iterator iter_, Id &amp;&amp;id, Name &amp;&amp;name=&quot;&quot;, Pos &amp;&amp;pos={}, Orient &amp;&amp;orient={ 1, 0, 0, 0 }) noexcept(table_traits::emplace_is_nothrow&lt; table_type &amp;, Id &amp;&amp;, Name &amp;&amp;, Pos &amp;&amp;, Orient &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr entities &amp;</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a1b0db75cc2f6a5bb522467a5f37678c0</anchor>
      <arglist>(size_type index_, Tuple &amp;&amp;tuple_) noexcept(table_traits::emplace_is_nothrow&lt; table_type &amp;, Tuple &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a9502cbc9cc97c07c002bd5613ed54d54</anchor>
      <arglist>(iterator iter_, Tuple &amp;&amp;tuple_) noexcept(table_traits::emplace_is_nothrow&lt; table_type &amp;, Tuple &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a6d5840838cfc85d56a4c159ee41ac8aa</anchor>
      <arglist>(const_iterator iter_, Tuple &amp;&amp;tuple_) noexcept(table_traits::emplace_is_nothrow&lt; table_type &amp;, Tuple &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::byte *</type>
      <name>data</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>af8f6930ff0ef56a7fd6e369569fa9dcf</anchor>
      <arglist>() noexcept(soagen::has_nothrow_data_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const std::byte *const</type>
      <name>data</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>aca7c130a73a73351d588bea297d48577</anchor>
      <arglist>() noexcept(soagen::has_nothrow_data_member&lt; const table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr column_type&lt; Column &gt; *</type>
      <name>column</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a1a9c843c5d5cd567cd5a0beff16e397c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::add_const_t&lt; column_type&lt; Column &gt; &gt; *</type>
      <name>column</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>ab37a1695bfe83ab604a2ec48f3241ba3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr unsigned *</type>
      <name>id</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>acc3f6c1506b983e5ff4ed6ef52ab5339</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const unsigned *</type>
      <name>id</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>ad31682dc12439caff4a67a34fe410f04</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::string *</type>
      <name>name</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>aa834d3c58ebda1fa261fc1079a4939dc</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const std::string *</type>
      <name>name</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a053464e06cb9cd34b4122754b1ce0f52</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vec3 *</type>
      <name>pos</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>afbdca4f9a868a49b78753313721a7fc0</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const vec3 *</type>
      <name>pos</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a9b90fd3d48bc328dc4c0bff9c7685c4d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr quaternion *</type>
      <name>orient</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a45c5f188a3907c016e37fe9809ecffa1</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const quaternion *</type>
      <name>orient</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>acea5a84312d0194132a68400788ae8c7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>for_each_column</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a35216890417b46bee1132f938d113607</anchor>
      <arglist>(Func &amp;&amp;func) noexcept(table_traits::for_each_column_nothrow_invocable&lt; Func &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>for_each_column</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>ab10be2c6213f42bbf1da0af7488aaab8</anchor>
      <arglist>(Func &amp;&amp;func) const noexcept(table_traits::for_each_column_nothrow_invocable&lt; Func &amp;&amp;, true &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::row_type&lt; entities &amp;, Columns... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>af34a8946c3226593a5beeced21fe0170</anchor>
      <arglist>(size_type index) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr row_type</type>
      <name>operator[]</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a45959a41e8234de93607950b96fba2d0</anchor>
      <arglist>(size_type index) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr row_type</type>
      <name>at</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a3641f80b7f9695e4b27ba689a49b74eb</anchor>
      <arglist>(size_type index) &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr row_type</type>
      <name>front</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a89af2a4afa90dcf3f5dee369c9cc5f48</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr row_type</type>
      <name>back</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a7abe8b63de4dc0beadf5bb482c30ea2a</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::row_type&lt; entities &amp;&amp;, Columns... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>af07854584da0a67a4e91f5e78b03d226</anchor>
      <arglist>(size_type index) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr rvalue_row_type</type>
      <name>operator[]</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>aee6765e6edb38c16d362a9012e8a1fd8</anchor>
      <arglist>(size_type index) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr rvalue_row_type</type>
      <name>at</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>add61a7d69da13649ec1847eb4878d922</anchor>
      <arglist>(size_type index) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr rvalue_row_type</type>
      <name>front</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>aeaff3f66203adc156e40d3483d530f27</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr rvalue_row_type</type>
      <name>back</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a1c37fc682f0dc12466712260b26d519c</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::row_type&lt; const entities &amp;, Columns... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a9be3011b7c7a6723f874b4eea6ed4960</anchor>
      <arglist>(size_type index) const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_row_type</type>
      <name>operator[]</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a5abf0c9db6e24cf31fad7e17296237d2</anchor>
      <arglist>(size_type index) const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_row_type</type>
      <name>at</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a5e9190a8ef2f18c78fd548ac68a434f7</anchor>
      <arglist>(size_type index) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_row_type</type>
      <name>front</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a2c33a2105b50d96e233dd9cd62438b45</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_row_type</type>
      <name>back</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a2bee1a86227062530e3a778badd4a3fe</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; entities &amp;, Columns... &gt;</type>
      <name>begin</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>adb2f6c65e5be2400591e2697631ce06f</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; entities &amp;, Columns... &gt;</type>
      <name>end</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a56bbaee411a98b0bee1c9c224c62f9f6</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; entities &amp;&amp;, Columns... &gt;</type>
      <name>begin</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a38dcc33b0c98e79f9267f3df6c7acdf6</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; entities &amp;&amp;, Columns... &gt;</type>
      <name>end</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>adbceccc16df9a5574184764ce54775d6</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; const entities &amp;, Columns... &gt;</type>
      <name>begin</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>aea70143616d0f705e9b8056c480c45ee</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; const entities &amp;, Columns... &gt;</type>
      <name>end</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a72707e72215bc1a9eb5918ae07b53fcb</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; const entities &amp;, Columns... &gt;</type>
      <name>cbegin</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>aedadad81055464147ea8bf96f6293a50</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; const entities &amp;, Columns... &gt;</type>
      <name>cend</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>ae8cc3863462336fddae247f3ffa65090</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_type</type>
      <name>column_count</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a6135b8551750b36d51f78c953f7ef64d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_type</type>
      <name>aligned_stride</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>aacafb3baabbbd1a586b5812b4c7a827a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto &amp;</type>
      <name>column_name</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a49a7ec3fe4037841ea4676ea65816f6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a25f4af4d89b5a3d783ab059b610a85aa</anchor>
      <arglist>(const entities &amp;lhs, const entities &amp;rhs) noexcept(soagen::is_nothrow_equality_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a70bb5da3f4f9c8d615536e65a70813ca</anchor>
      <arglist>(const entities &amp;lhs, const entities &amp;rhs) noexcept(soagen::is_nothrow_equality_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a3d3b2f5880d87fb39abbd97dc3d0bf91</anchor>
      <arglist>(const entities &amp;lhs, const entities &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a3f8b925c2c2febfbfb2e70c4a3a2fe16</anchor>
      <arglist>(const entities &amp;lhs, const entities &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a585baf2e4aa58fa6f6c8864d80ec5b5c</anchor>
      <arglist>(const entities &amp;lhs, const entities &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a6f2ca9b2bf25e5d549778858686d15ff</anchor>
      <arglist>(const entities &amp;lhs, const entities &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr table_type &amp;</type>
      <name>table</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a2d1c7235defa00d7015a60ca6e1c36b8</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr table_type &amp;&amp;</type>
      <name>table</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a19591536f444db20b93ab73782f0799a</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const table_type &amp;</type>
      <name>table</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>aeb3e013b73cba6af6bc2bdcbe537488f</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>acf59f7b2de775f95b8fc2859a6b98af8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a17e92df127739e7cf8235c734f07e678</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>max_size</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>af085b8dfcaccff366850498627eea014</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>allocation_size</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a96b127e9ca0eb95673500990fa015003</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr entities &amp;</type>
      <name>reserve</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a2a53c0dd35e8510f1eed901a405cbdb8</anchor>
      <arglist>(size_type new_cap) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().reserve(size_type{})))</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>capacity</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a33df734ca632adb2810447e4623871cf</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr entities &amp;</type>
      <name>shrink_to_fit</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a988e5cd3cdfe5d776f11e35eb27e87d8</anchor>
      <arglist>() noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().shrink_to_fit()))</arglist>
    </member>
    <member kind="function">
      <type>constexpr entities &amp;</type>
      <name>clear</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>ae9384f36d67b0865af625712cb8012bf</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr entities &amp;</type>
      <name>erase</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a81ed248f20d54859adbed93a75c5fc1f</anchor>
      <arglist>(size_type pos) noexcept(soagen::has_nothrow_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::optional&lt; size_type &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>ad99aa12e13d5084fcd13062c51aa7585</anchor>
      <arglist>(size_type pos) noexcept(soagen::has_nothrow_unordered_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>erase</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a0cfc569515fd8e042d68b63a8685200f</anchor>
      <arglist>(iterator pos) noexcept(soagen::has_nothrow_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::optional&lt; iterator &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a5777db35e317da6aeed59841a8e25a8e</anchor>
      <arglist>(iterator pos) noexcept(soagen::has_nothrow_unordered_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>erase</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>ab754c3f27c6d9029c349230f4003331f</anchor>
      <arglist>(const_iterator pos) noexcept(soagen::has_nothrow_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::optional&lt; const_iterator &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a4ab08f64c4be2abbeb86f820cd6098c1</anchor>
      <arglist>(const_iterator pos) noexcept(soagen::has_nothrow_unordered_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr entities &amp;</type>
      <name>pop_back</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a5ea61707e6ad840bf8d3a9ec0ac201c1</anchor>
      <arglist>(size_type num=1) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().pop_back(size_type{})))</arglist>
    </member>
    <member kind="function">
      <type>constexpr entities &amp;</type>
      <name>swap_columns</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>ae43100cda52104bab25ead8e7de0654d</anchor>
      <arglist>() noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().template swap_columns&lt; static_cast&lt; size_t &gt;(A), static_cast&lt; size_t &gt;(B)&gt;()))</arglist>
    </member>
    <member kind="function">
      <type>entities &amp;</type>
      <name>resize</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a7c276434607741aa7faedbc6692e97b2</anchor>
      <arglist>(size_type new_size) noexcept(soagen::has_nothrow_resize_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a16afc16b389d4a28dcb41f006cde323e</anchor>
      <arglist>(entities &amp;other) noexcept(soagen::has_nothrow_swap_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr entities &amp;</type>
      <name>push_back</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a2f999557490235c7c255fe086f9172f6</anchor>
      <arglist>(column_traits&lt; 0 &gt;::param_type id, column_traits&lt; 1 &gt;::param_type name=&quot;&quot;, column_traits&lt; 2 &gt;::param_type pos={}, column_traits&lt; 3 &gt;::param_type orient={ 1, 0, 0, 0 }) noexcept(table_traits::push_back_is_nothrow&lt; table_type &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr entities &amp;</type>
      <name>push_back</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>acaa409bda15a7112eb5935ef6c14e505</anchor>
      <arglist>(column_traits&lt; 0 &gt;::rvalue_type id, column_traits&lt; 1 &gt;::rvalue_type name=&quot;&quot;, column_traits&lt; 2 &gt;::rvalue_type pos={}, column_traits&lt; 3 &gt;::rvalue_type orient={ 1, 0, 0, 0 }) noexcept(table_traits::rvalue_push_back_is_nothrow&lt; table_type &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr entities &amp;</type>
      <name>emplace_back</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a65178b9952067575c5d0b297c72376ba</anchor>
      <arglist>(Id &amp;&amp;id, Name &amp;&amp;name=&quot;&quot;, Pos &amp;&amp;pos={}, Orient &amp;&amp;orient={ 1, 0, 0, 0 }) noexcept(table_traits::emplace_back_is_nothrow&lt; table_type &amp;, Id &amp;&amp;, Name &amp;&amp;, Pos &amp;&amp;, Orient &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr entities &amp;</type>
      <name>emplace_back</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>ad27336af4c66435705637136142009eb</anchor>
      <arglist>(Tuple &amp;&amp;tuple_) noexcept(table_traits::emplace_back_is_nothrow&lt; table_type &amp;, Tuple &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr entities &amp;</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a9291176b1bd4fb287d4c252160ea7225</anchor>
      <arglist>(size_type index_, column_traits&lt; 0 &gt;::param_type id, column_traits&lt; 1 &gt;::param_type name=&quot;&quot;, column_traits&lt; 2 &gt;::param_type pos={}, column_traits&lt; 3 &gt;::param_type orient={ 1, 0, 0, 0 }) noexcept(table_traits::insert_is_nothrow&lt; table_type &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>abe9f16c4280fb7555bcaa021c9e36c94</anchor>
      <arglist>(iterator iter_, column_traits&lt; 0 &gt;::param_type id, column_traits&lt; 1 &gt;::param_type name=&quot;&quot;, column_traits&lt; 2 &gt;::param_type pos={}, column_traits&lt; 3 &gt;::param_type orient={ 1, 0, 0, 0 }) noexcept(table_traits::insert_is_nothrow&lt; table_type &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a7b47165f127834bef0143d1143d25350</anchor>
      <arglist>(const_iterator iter_, column_traits&lt; 0 &gt;::param_type id, column_traits&lt; 1 &gt;::param_type name=&quot;&quot;, column_traits&lt; 2 &gt;::param_type pos={}, column_traits&lt; 3 &gt;::param_type orient={ 1, 0, 0, 0 }) noexcept(table_traits::insert_is_nothrow&lt; table_type &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr entities &amp;</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a0993ab1eed3cb5c8c992ada94dd5b2df</anchor>
      <arglist>(size_type index_, column_traits&lt; 0 &gt;::rvalue_type id, column_traits&lt; 1 &gt;::rvalue_type name=&quot;&quot;, column_traits&lt; 2 &gt;::rvalue_type pos={}, column_traits&lt; 3 &gt;::rvalue_type orient={ 1, 0, 0, 0 }) noexcept(table_traits::rvalue_insert_is_nothrow&lt; table_type &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a7d03c980c8f22fb18073376a1603a67d</anchor>
      <arglist>(iterator iter_, column_traits&lt; 0 &gt;::rvalue_type id, column_traits&lt; 1 &gt;::rvalue_type name=&quot;&quot;, column_traits&lt; 2 &gt;::rvalue_type pos={}, column_traits&lt; 3 &gt;::rvalue_type orient={ 1, 0, 0, 0 }) noexcept(table_traits::rvalue_insert_is_nothrow&lt; table_type &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a2f31a8e1ffa5c0991fe9785068018f2b</anchor>
      <arglist>(const_iterator iter_, column_traits&lt; 0 &gt;::rvalue_type id, column_traits&lt; 1 &gt;::rvalue_type name=&quot;&quot;, column_traits&lt; 2 &gt;::rvalue_type pos={}, column_traits&lt; 3 &gt;::rvalue_type orient={ 1, 0, 0, 0 }) noexcept(table_traits::rvalue_insert_is_nothrow&lt; table_type &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr entities &amp;</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a2ec6d3ead7895acaeffa581c54c8ccc8</anchor>
      <arglist>(size_type index_, Id &amp;&amp;id, Name &amp;&amp;name=&quot;&quot;, Pos &amp;&amp;pos={}, Orient &amp;&amp;orient={ 1, 0, 0, 0 }) noexcept(table_traits::emplace_is_nothrow&lt; table_type &amp;, Id &amp;&amp;, Name &amp;&amp;, Pos &amp;&amp;, Orient &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>ac44cb146ded481538b8ed4fbd44c3a60</anchor>
      <arglist>(iterator iter_, Id &amp;&amp;id, Name &amp;&amp;name=&quot;&quot;, Pos &amp;&amp;pos={}, Orient &amp;&amp;orient={ 1, 0, 0, 0 }) noexcept(table_traits::emplace_is_nothrow&lt; table_type &amp;, Id &amp;&amp;, Name &amp;&amp;, Pos &amp;&amp;, Orient &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a962744a219ad067e4263ffbe4ef5db30</anchor>
      <arglist>(const_iterator iter_, Id &amp;&amp;id, Name &amp;&amp;name=&quot;&quot;, Pos &amp;&amp;pos={}, Orient &amp;&amp;orient={ 1, 0, 0, 0 }) noexcept(table_traits::emplace_is_nothrow&lt; table_type &amp;, Id &amp;&amp;, Name &amp;&amp;, Pos &amp;&amp;, Orient &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr entities &amp;</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a1b0db75cc2f6a5bb522467a5f37678c0</anchor>
      <arglist>(size_type index_, Tuple &amp;&amp;tuple_) noexcept(table_traits::emplace_is_nothrow&lt; table_type &amp;, Tuple &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a9502cbc9cc97c07c002bd5613ed54d54</anchor>
      <arglist>(iterator iter_, Tuple &amp;&amp;tuple_) noexcept(table_traits::emplace_is_nothrow&lt; table_type &amp;, Tuple &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a6d5840838cfc85d56a4c159ee41ac8aa</anchor>
      <arglist>(const_iterator iter_, Tuple &amp;&amp;tuple_) noexcept(table_traits::emplace_is_nothrow&lt; table_type &amp;, Tuple &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::byte *</type>
      <name>data</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>af8f6930ff0ef56a7fd6e369569fa9dcf</anchor>
      <arglist>() noexcept(soagen::has_nothrow_data_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const std::byte *const</type>
      <name>data</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>aca7c130a73a73351d588bea297d48577</anchor>
      <arglist>() noexcept(soagen::has_nothrow_data_member&lt; const table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr column_type&lt; Column &gt; *</type>
      <name>column</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a1a9c843c5d5cd567cd5a0beff16e397c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::add_const_t&lt; column_type&lt; Column &gt; &gt; *</type>
      <name>column</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>ab37a1695bfe83ab604a2ec48f3241ba3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr unsigned *</type>
      <name>id</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>acc3f6c1506b983e5ff4ed6ef52ab5339</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const unsigned *</type>
      <name>id</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>ad31682dc12439caff4a67a34fe410f04</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::string *</type>
      <name>name</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>aa834d3c58ebda1fa261fc1079a4939dc</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const std::string *</type>
      <name>name</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a053464e06cb9cd34b4122754b1ce0f52</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vec3 *</type>
      <name>pos</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>afbdca4f9a868a49b78753313721a7fc0</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const vec3 *</type>
      <name>pos</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a9b90fd3d48bc328dc4c0bff9c7685c4d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr quaternion *</type>
      <name>orient</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a45c5f188a3907c016e37fe9809ecffa1</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const quaternion *</type>
      <name>orient</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>acea5a84312d0194132a68400788ae8c7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>for_each_column</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a35216890417b46bee1132f938d113607</anchor>
      <arglist>(Func &amp;&amp;func) noexcept(table_traits::for_each_column_nothrow_invocable&lt; Func &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>for_each_column</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>ab10be2c6213f42bbf1da0af7488aaab8</anchor>
      <arglist>(Func &amp;&amp;func) const noexcept(table_traits::for_each_column_nothrow_invocable&lt; Func &amp;&amp;, true &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::row_type&lt; entities &amp;, Columns... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>af34a8946c3226593a5beeced21fe0170</anchor>
      <arglist>(size_type index) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr row_type</type>
      <name>operator[]</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a45959a41e8234de93607950b96fba2d0</anchor>
      <arglist>(size_type index) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr row_type</type>
      <name>at</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a3641f80b7f9695e4b27ba689a49b74eb</anchor>
      <arglist>(size_type index) &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr row_type</type>
      <name>front</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a89af2a4afa90dcf3f5dee369c9cc5f48</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr row_type</type>
      <name>back</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a7abe8b63de4dc0beadf5bb482c30ea2a</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::row_type&lt; entities &amp;&amp;, Columns... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>af07854584da0a67a4e91f5e78b03d226</anchor>
      <arglist>(size_type index) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr rvalue_row_type</type>
      <name>operator[]</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>aee6765e6edb38c16d362a9012e8a1fd8</anchor>
      <arglist>(size_type index) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr rvalue_row_type</type>
      <name>at</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>add61a7d69da13649ec1847eb4878d922</anchor>
      <arglist>(size_type index) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr rvalue_row_type</type>
      <name>front</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>aeaff3f66203adc156e40d3483d530f27</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr rvalue_row_type</type>
      <name>back</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a1c37fc682f0dc12466712260b26d519c</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::row_type&lt; const entities &amp;, Columns... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a9be3011b7c7a6723f874b4eea6ed4960</anchor>
      <arglist>(size_type index) const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_row_type</type>
      <name>operator[]</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a5abf0c9db6e24cf31fad7e17296237d2</anchor>
      <arglist>(size_type index) const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_row_type</type>
      <name>at</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a5e9190a8ef2f18c78fd548ac68a434f7</anchor>
      <arglist>(size_type index) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_row_type</type>
      <name>front</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a2c33a2105b50d96e233dd9cd62438b45</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_row_type</type>
      <name>back</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a2bee1a86227062530e3a778badd4a3fe</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; entities &amp;, Columns... &gt;</type>
      <name>begin</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>adb2f6c65e5be2400591e2697631ce06f</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; entities &amp;, Columns... &gt;</type>
      <name>end</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a56bbaee411a98b0bee1c9c224c62f9f6</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; entities &amp;&amp;, Columns... &gt;</type>
      <name>begin</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a38dcc33b0c98e79f9267f3df6c7acdf6</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; entities &amp;&amp;, Columns... &gt;</type>
      <name>end</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>adbceccc16df9a5574184764ce54775d6</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; const entities &amp;, Columns... &gt;</type>
      <name>begin</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>aea70143616d0f705e9b8056c480c45ee</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; const entities &amp;, Columns... &gt;</type>
      <name>end</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a72707e72215bc1a9eb5918ae07b53fcb</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; const entities &amp;, Columns... &gt;</type>
      <name>cbegin</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>aedadad81055464147ea8bf96f6293a50</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; const entities &amp;, Columns... &gt;</type>
      <name>cend</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>ae8cc3863462336fddae247f3ffa65090</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a25f4af4d89b5a3d783ab059b610a85aa</anchor>
      <arglist>(const entities &amp;lhs, const entities &amp;rhs) noexcept(soagen::is_nothrow_equality_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a70bb5da3f4f9c8d615536e65a70813ca</anchor>
      <arglist>(const entities &amp;lhs, const entities &amp;rhs) noexcept(soagen::is_nothrow_equality_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a3d3b2f5880d87fb39abbd97dc3d0bf91</anchor>
      <arglist>(const entities &amp;lhs, const entities &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a3f8b925c2c2febfbfb2e70c4a3a2fe16</anchor>
      <arglist>(const entities &amp;lhs, const entities &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a585baf2e4aa58fa6f6c8864d80ec5b5c</anchor>
      <arglist>(const entities &amp;lhs, const entities &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a6f2ca9b2bf25e5d549778858686d15ff</anchor>
      <arglist>(const entities &amp;lhs, const entities &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>soagen::identity_base</name>
    <filename>structsoagen_1_1identity__base.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>soagen::iterator</name>
    <filename>classsoagen_1_1iterator.html</filename>
    <templarg></templarg>
    <templarg>Columns</templarg>
    <member kind="typedef">
      <type>remove_cvref&lt; Table &gt;</type>
      <name>table_type</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a1425bea4f7dd71141ff1453ac9415b00</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Table</type>
      <name>table_ref</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>adb6cb52980743dc604be458e808d502f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename table_type::difference_type</type>
      <name>difference_type</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a24db054f296e0a48f03ef0320351b07a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>row&lt; Table, Columns... &gt;</type>
      <name>row_type</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a7d8f97161fa0d70952f32886aeac2749</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>row_type</type>
      <name>value_type</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a68fab7106d025950a23e4c3d6f3b72f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>row_type</type>
      <name>reference</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a6d5ffc4d83214b1577d13b99a9e37ba1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::random_access_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>ae1e5d7ca5eaa9d5d8507a0d03aa3c7c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>iterator</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>ac269e699b1e3ee6b60387a3234b67fda</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>iterator</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a801e090fce572ce5de6ed9b1caed2bca</anchor>
      <arglist>(table_ref tbl, difference_type pos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr difference_type</type>
      <name>operator-</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>ad5f0178980af5fc0804ed3affe994f80</anchor>
      <arglist>(const iterator&lt; T, Cols... &gt; &amp;rhs) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>operator*</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>af527bc64284738934054fd142f7ed425</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr detail::arrow_proxy&lt; row_type &gt;</type>
      <name>operator-&gt;</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>aba1ac1d8bde4b321e83d07c551d35eb7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>operator[]</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>aecca7968bbd070958aced80f23fe19d3</anchor>
      <arglist>(difference_type offset) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a24ebc7856d468676127838cf57d63204</anchor>
      <arglist>(const iterator&lt; T, Cols... &gt; &amp;rhs) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a138367725fc5872ca170bd7a6d49b48e</anchor>
      <arglist>(const iterator&lt; T, Cols... &gt; &amp;rhs) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a0cbfed61243974fa940c612ed8779612</anchor>
      <arglist>(const iterator&lt; T, Cols... &gt; &amp;rhs) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a232611cbd2d7fd07d494193db0750894</anchor>
      <arglist>(const iterator&lt; T, Cols... &gt; &amp;rhs) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator iterator&lt; T, Cols... &gt;</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>ad1eb6bd1096ac2557efbeda55e033c0f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator difference_type</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a8204d9e0cee138cb3f30267a31b08de5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a734fd3df3b6d80c9d71ff8d8f3bf776e</anchor>
      <arglist>(iterator &amp;it) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator</type>
      <name>operator++</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>afa985da3b39b42c99544ae16cae0e0dc</anchor>
      <arglist>(iterator &amp;it, int) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator &amp;</type>
      <name>operator+=</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>acbfffd554042f2882c2baa4afd134c27</anchor>
      <arglist>(iterator &amp;it, difference_type n) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator</type>
      <name>operator+</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>afcc32be7a707083d7a68b0166ad0d2fc</anchor>
      <arglist>(const iterator &amp;it, difference_type n) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator &amp;</type>
      <name>operator--</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a6151a5148a247f521cf4e148fc65f85e</anchor>
      <arglist>(iterator &amp;it) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator</type>
      <name>operator--</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a15ade785b30bd7ab2b73ad9cce8af505</anchor>
      <arglist>(iterator &amp;it, int) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator &amp;</type>
      <name>operator-=</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>ab94c4d5c5401feb11a5700c787026e47</anchor>
      <arglist>(iterator &amp;it, difference_type n) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator</type>
      <name>operator-</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a5e0bd834a7f89cfd220c53bc3c9baaae</anchor>
      <arglist>(const iterator &amp;it, difference_type n) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr difference_type</type>
      <name>operator-</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>ad5f0178980af5fc0804ed3affe994f80</anchor>
      <arglist>(const iterator&lt; T, Cols... &gt; &amp;rhs) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>operator*</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>af527bc64284738934054fd142f7ed425</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr detail::arrow_proxy&lt; row_type &gt;</type>
      <name>operator-&gt;</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>aba1ac1d8bde4b321e83d07c551d35eb7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>operator[]</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>aecca7968bbd070958aced80f23fe19d3</anchor>
      <arglist>(difference_type offset) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>ae8ec1930767d75925cf417a28628e255</anchor>
      <arglist>(const iterator&lt; T, Cols... &gt; &amp;rhs) const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>aae008963a245dc475a120628c995c12f</anchor>
      <arglist>(const iterator &amp;lhs, const iterator&lt; T, Cols... &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a24ebc7856d468676127838cf57d63204</anchor>
      <arglist>(const iterator&lt; T, Cols... &gt; &amp;rhs) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a138367725fc5872ca170bd7a6d49b48e</anchor>
      <arglist>(const iterator&lt; T, Cols... &gt; &amp;rhs) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a0cbfed61243974fa940c612ed8779612</anchor>
      <arglist>(const iterator&lt; T, Cols... &gt; &amp;rhs) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a232611cbd2d7fd07d494193db0750894</anchor>
      <arglist>(const iterator&lt; T, Cols... &gt; &amp;rhs) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator iterator&lt; T, Cols... &gt;</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>ad1eb6bd1096ac2557efbeda55e033c0f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator difference_type</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a8204d9e0cee138cb3f30267a31b08de5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a734fd3df3b6d80c9d71ff8d8f3bf776e</anchor>
      <arglist>(iterator &amp;it) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator</type>
      <name>operator++</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>afa985da3b39b42c99544ae16cae0e0dc</anchor>
      <arglist>(iterator &amp;it, int) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator &amp;</type>
      <name>operator+=</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>acbfffd554042f2882c2baa4afd134c27</anchor>
      <arglist>(iterator &amp;it, difference_type n) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator</type>
      <name>operator+</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>afcc32be7a707083d7a68b0166ad0d2fc</anchor>
      <arglist>(const iterator &amp;it, difference_type n) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator &amp;</type>
      <name>operator--</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a6151a5148a247f521cf4e148fc65f85e</anchor>
      <arglist>(iterator &amp;it) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator</type>
      <name>operator--</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a15ade785b30bd7ab2b73ad9cce8af505</anchor>
      <arglist>(iterator &amp;it, int) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator &amp;</type>
      <name>operator-=</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>ab94c4d5c5401feb11a5700c787026e47</anchor>
      <arglist>(iterator &amp;it, difference_type n) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator</type>
      <name>operator-</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a5e0bd834a7f89cfd220c53bc3c9baaae</anchor>
      <arglist>(const iterator &amp;it, difference_type n) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>soagen::iterator_base</name>
    <filename>structsoagen_1_1iterator__base.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>soagen::row</name>
    <filename>structsoagen_1_1row.html</filename>
    <templarg></templarg>
    <templarg>Columns</templarg>
    <member kind="function">
      <type>constexpr</type>
      <name>operator row&lt; T, Cols... &gt;</name>
      <anchorfile>structsoagen_1_1row.html</anchorfile>
      <anchor>ad88edbbc3ba07dcc7d651f7591aab86f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>structsoagen_1_1row.html</anchorfile>
      <anchor>a7869c499e91447116e9ef958ef62a001</anchor>
      <arglist>(const row &amp;lhs, const row&lt; T, Columns... &gt; &amp;rhs) noexcept(table_traits_type&lt; remove_cvref&lt; Table &gt;&gt;::all_nothrow_equality_comparable)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>structsoagen_1_1row.html</anchorfile>
      <anchor>a6276c1071974968c161afab2b4788c0a</anchor>
      <arglist>(const row &amp;lhs, const row&lt; T, Columns... &gt; &amp;rhs) noexcept(table_traits_type&lt; remove_cvref&lt; Table &gt;&gt;::all_nothrow_equality_comparable)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>structsoagen_1_1row.html</anchorfile>
      <anchor>aeb90cd3b79c25e36c31fd7c841d345b3</anchor>
      <arglist>(const row &amp;lhs, const row&lt; T, Columns... &gt; &amp;rhs) noexcept(table_traits_type&lt; remove_cvref&lt; Table &gt;&gt;::all_nothrow_less_than_comparable)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>structsoagen_1_1row.html</anchorfile>
      <anchor>a96f5e7b7e697a1149e49a9fe974cae14</anchor>
      <arglist>(const row &amp;lhs, const row&lt; T, Columns... &gt; &amp;rhs) noexcept(table_traits_type&lt; remove_cvref&lt; Table &gt;&gt;::all_nothrow_less_than_comparable)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>structsoagen_1_1row.html</anchorfile>
      <anchor>a7eadb12421d84758725e918b457b098a</anchor>
      <arglist>(const row &amp;lhs, const row&lt; T, Columns... &gt; &amp;rhs) noexcept(table_traits_type&lt; remove_cvref&lt; Table &gt;&gt;::all_nothrow_less_than_comparable)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>structsoagen_1_1row.html</anchorfile>
      <anchor>ac3e2ca5f629b5f149eba5ccd1b92f549</anchor>
      <arglist>(const row &amp;lhs, const row&lt; T, Columns... &gt; &amp;rhs) noexcept(table_traits_type&lt; remove_cvref&lt; Table &gt;&gt;::all_nothrow_less_than_comparable)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator row&lt; T, Cols... &gt;</name>
      <anchorfile>structsoagen_1_1row.html</anchorfile>
      <anchor>ad88edbbc3ba07dcc7d651f7591aab86f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>structsoagen_1_1row.html</anchorfile>
      <anchor>a7869c499e91447116e9ef958ef62a001</anchor>
      <arglist>(const row &amp;lhs, const row&lt; T, Columns... &gt; &amp;rhs) noexcept(table_traits_type&lt; remove_cvref&lt; Table &gt;&gt;::all_nothrow_equality_comparable)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>structsoagen_1_1row.html</anchorfile>
      <anchor>a6276c1071974968c161afab2b4788c0a</anchor>
      <arglist>(const row &amp;lhs, const row&lt; T, Columns... &gt; &amp;rhs) noexcept(table_traits_type&lt; remove_cvref&lt; Table &gt;&gt;::all_nothrow_equality_comparable)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>structsoagen_1_1row.html</anchorfile>
      <anchor>aeb90cd3b79c25e36c31fd7c841d345b3</anchor>
      <arglist>(const row &amp;lhs, const row&lt; T, Columns... &gt; &amp;rhs) noexcept(table_traits_type&lt; remove_cvref&lt; Table &gt;&gt;::all_nothrow_less_than_comparable)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>structsoagen_1_1row.html</anchorfile>
      <anchor>a96f5e7b7e697a1149e49a9fe974cae14</anchor>
      <arglist>(const row &amp;lhs, const row&lt; T, Columns... &gt; &amp;rhs) noexcept(table_traits_type&lt; remove_cvref&lt; Table &gt;&gt;::all_nothrow_less_than_comparable)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>structsoagen_1_1row.html</anchorfile>
      <anchor>a7eadb12421d84758725e918b457b098a</anchor>
      <arglist>(const row &amp;lhs, const row&lt; T, Columns... &gt; &amp;rhs) noexcept(table_traits_type&lt; remove_cvref&lt; Table &gt;&gt;::all_nothrow_less_than_comparable)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>structsoagen_1_1row.html</anchorfile>
      <anchor>ac3e2ca5f629b5f149eba5ccd1b92f549</anchor>
      <arglist>(const row &amp;lhs, const row&lt; T, Columns... &gt; &amp;rhs) noexcept(table_traits_type&lt; remove_cvref&lt; Table &gt;&gt;::all_nothrow_less_than_comparable)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>soagen::row_base</name>
    <filename>structsoagen_1_1row__base.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>soagen::examples::spheres</name>
    <filename>classsoagen_1_1examples_1_1spheres.html</filename>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a08c94a4942bcca1038a28a00fc4a50f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ab9e836fc78bd3a4be98e921027c4cfb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::allocator_type&lt; spheres &gt;</type>
      <name>allocator_type</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a910d7d27563a2e6bf62047cde7dfe4e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::table_type&lt; spheres &gt;</type>
      <name>table_type</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>aaf24a52e7021d0bd7e988c20cb35b02c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::table_traits_type&lt; spheres &gt;</type>
      <name>table_traits</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>aef225f6c4ed449740c52fd96c15c0282</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename table_traits::template column&lt; static_cast&lt; size_type &gt;(Column)&gt;</type>
      <name>column_traits</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a6cb0675ee29203019d109b066f8f2594</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename column_traits&lt; static_cast&lt; size_type &gt;(Column)&gt;::value_type</type>
      <name>column_type</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a74e1c9f63ac8489fb8b91632d570fb05</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::iterator_type&lt; spheres &amp; &gt;</type>
      <name>iterator</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ace10e76a0b3a595ad91d594c13880821</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::iterator_type&lt; const spheres &amp; &gt;</type>
      <name>const_iterator</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a1cfa38fe1fb4e22de0092b3ca2570d96</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::iterator_type&lt; spheres &amp;&amp; &gt;</type>
      <name>rvalue_iterator</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ad16f6268ed50f6b4bff4df653f17efea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::row_type&lt; spheres &amp; &gt;</type>
      <name>row_type</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>abf005229546feba2a94ffc6159f46fb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::row_type&lt; const spheres &amp; &gt;</type>
      <name>const_row_type</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a2292841fdc26867ac5f06c8df71038dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::row_type&lt; spheres &amp;&amp; &gt;</type>
      <name>rvalue_row_type</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>addc39246b6b7ecf6118120406d48d2ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>columns</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>aa320de3f87173819382ea922a50226f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>spheres</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a8c9d746e87aa5a834949ca64106f6691</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>spheres</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a8a5497999770b47e13c75ee7b6d7d931</anchor>
      <arglist>(spheres &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>operator=</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ae7f82d0a8fc78f13ce29dce49c48b4a9</anchor>
      <arglist>(spheres &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>spheres</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a9c614147cad3baf75b3cd8c9d9c7e7e0</anchor>
      <arglist>(const spheres &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>operator=</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a9c45fd146c1dde07978dfb809caa6e71</anchor>
      <arglist>(const spheres &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~spheres</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ae8b5593b8cdb4f45cad89051da5017ef</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>spheres</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>abca5038237b135340c913b0b59ca0327</anchor>
      <arglist>(const allocator_type &amp;alloc) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>spheres</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ac067f40e77955ad3c2028578c5c2f777</anchor>
      <arglist>(allocator_type &amp;&amp;alloc) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr allocator_type</type>
      <name>get_allocator</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ad06d1f6f2aa8cda39360bf601eaf1217</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr table_type &amp;</type>
      <name>table</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a7e6b36eecf49e305fa8eb99ad79c9460</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr table_type &amp;&amp;</type>
      <name>table</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a277f06c64736f3e2d4d28d03c48f1ef0</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const table_type &amp;</type>
      <name>table</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a6254470367cdea596472975259c39a97</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a21db600b74615cf6bac286c6e1b5e95a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a437412ecf84dbccf377c5fc29910f74e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>max_size</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a54f75cec867b90bcabbb404d0edefe88</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>allocation_size</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ada9563d84c3e6d5edb6484843e611b68</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>reserve</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a72d550692d76e610b4deb7babf33015f</anchor>
      <arglist>(size_type new_cap) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().reserve(size_type{})))</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>capacity</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a47f8df10605e9cab275bb8c2ca4a8876</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>shrink_to_fit</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a643ac62bb09e8f02561e8ccc0747a01a</anchor>
      <arglist>() noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().shrink_to_fit()))</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>clear</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a702709217d1004d41a2f26220a262cda</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>erase</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a890d9bbce31f73a508e3f74cd9883213</anchor>
      <arglist>(size_type pos) noexcept(soagen::has_nothrow_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::optional&lt; size_type &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>aeebd21bc853a2bb49733a4610498af93</anchor>
      <arglist>(size_type pos) noexcept(soagen::has_nothrow_unordered_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>erase</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a9a5c10d386bd7d0c8adc75d82c10ae67</anchor>
      <arglist>(iterator pos) noexcept(soagen::has_nothrow_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::optional&lt; iterator &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>afceeb76c39dccef11f22d6e5bb8d1a8f</anchor>
      <arglist>(iterator pos) noexcept(soagen::has_nothrow_unordered_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>erase</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ab92c1f221d132393e2a35cfee39a2002</anchor>
      <arglist>(const_iterator pos) noexcept(soagen::has_nothrow_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::optional&lt; const_iterator &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a7edf77f9736d1e74e735586dc83af97d</anchor>
      <arglist>(const_iterator pos) noexcept(soagen::has_nothrow_unordered_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>pop_back</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>afd9a9bf8f9e4f131e8a6a0b246d5e654</anchor>
      <arglist>(size_type num=1) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().pop_back(size_type{})))</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>swap_columns</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>adcc719f00794a60c0c333b497c8519a5</anchor>
      <arglist>() noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().template swap_columns&lt; static_cast&lt; size_t &gt;(A), static_cast&lt; size_t &gt;(B)&gt;()))</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>resize</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ac7bfab8337b2cc736de2ee64775acbd8</anchor>
      <arglist>(size_type new_size) noexcept(soagen::has_nothrow_resize_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a0489cf91ad00e97256a8ed4f42394fac</anchor>
      <arglist>(spheres &amp;other) noexcept(soagen::has_nothrow_swap_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>push_back</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a6ff44556b94a02063656faf8e82b6f89</anchor>
      <arglist>(column_traits&lt; 0 &gt;::param_type center_x, column_traits&lt; 1 &gt;::param_type center_y, column_traits&lt; 2 &gt;::param_type center_z, column_traits&lt; 3 &gt;::param_type radius=0.5, column_traits&lt; 4 &gt;::param_type mass=default_mass) noexcept(table_traits::push_back_is_nothrow&lt; table_type &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>push_back</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>adf7854d44774bce23a9fcc7ddfa75b15</anchor>
      <arglist>(column_traits&lt; 0 &gt;::rvalue_type center_x, column_traits&lt; 1 &gt;::rvalue_type center_y, column_traits&lt; 2 &gt;::rvalue_type center_z, column_traits&lt; 3 &gt;::rvalue_type radius=0.5, column_traits&lt; 4 &gt;::rvalue_type mass=default_mass) noexcept(table_traits::rvalue_push_back_is_nothrow&lt; table_type &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>emplace_back</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a8b7b9261e64d973c4ca67547da8e32bd</anchor>
      <arglist>(CenterX &amp;&amp;center_x, CenterY &amp;&amp;center_y, CenterZ &amp;&amp;center_z, Radius &amp;&amp;radius=0.5, Mass &amp;&amp;mass=default_mass) noexcept(table_traits::emplace_back_is_nothrow&lt; table_type &amp;, CenterX &amp;&amp;, CenterY &amp;&amp;, CenterZ &amp;&amp;, Radius &amp;&amp;, Mass &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>emplace_back</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a5a8f8656e2534524cf8d4daab9d15576</anchor>
      <arglist>(Tuple &amp;&amp;tuple_) noexcept(table_traits::emplace_back_is_nothrow&lt; table_type &amp;, Tuple &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a4737476f52c6a122bc50d3c888213c72</anchor>
      <arglist>(size_type index_, column_traits&lt; 0 &gt;::param_type center_x, column_traits&lt; 1 &gt;::param_type center_y, column_traits&lt; 2 &gt;::param_type center_z, column_traits&lt; 3 &gt;::param_type radius=0.5, column_traits&lt; 4 &gt;::param_type mass=default_mass) noexcept(table_traits::insert_is_nothrow&lt; table_type &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a0bd336e4c7c8559312518661f5a970ce</anchor>
      <arglist>(iterator iter_, column_traits&lt; 0 &gt;::param_type center_x, column_traits&lt; 1 &gt;::param_type center_y, column_traits&lt; 2 &gt;::param_type center_z, column_traits&lt; 3 &gt;::param_type radius=0.5, column_traits&lt; 4 &gt;::param_type mass=default_mass) noexcept(table_traits::insert_is_nothrow&lt; table_type &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a5dcb4e6cd396c23dc0bd799164afe172</anchor>
      <arglist>(const_iterator iter_, column_traits&lt; 0 &gt;::param_type center_x, column_traits&lt; 1 &gt;::param_type center_y, column_traits&lt; 2 &gt;::param_type center_z, column_traits&lt; 3 &gt;::param_type radius=0.5, column_traits&lt; 4 &gt;::param_type mass=default_mass) noexcept(table_traits::insert_is_nothrow&lt; table_type &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a22298653c9e91ebf9ed82d3f7addf471</anchor>
      <arglist>(size_type index_, column_traits&lt; 0 &gt;::rvalue_type center_x, column_traits&lt; 1 &gt;::rvalue_type center_y, column_traits&lt; 2 &gt;::rvalue_type center_z, column_traits&lt; 3 &gt;::rvalue_type radius=0.5, column_traits&lt; 4 &gt;::rvalue_type mass=default_mass) noexcept(table_traits::rvalue_insert_is_nothrow&lt; table_type &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a1a54db92240a1abebceebceed4b825d0</anchor>
      <arglist>(iterator iter_, column_traits&lt; 0 &gt;::rvalue_type center_x, column_traits&lt; 1 &gt;::rvalue_type center_y, column_traits&lt; 2 &gt;::rvalue_type center_z, column_traits&lt; 3 &gt;::rvalue_type radius=0.5, column_traits&lt; 4 &gt;::rvalue_type mass=default_mass) noexcept(table_traits::rvalue_insert_is_nothrow&lt; table_type &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a258266339b57f8e98b14ffd417f0376f</anchor>
      <arglist>(const_iterator iter_, column_traits&lt; 0 &gt;::rvalue_type center_x, column_traits&lt; 1 &gt;::rvalue_type center_y, column_traits&lt; 2 &gt;::rvalue_type center_z, column_traits&lt; 3 &gt;::rvalue_type radius=0.5, column_traits&lt; 4 &gt;::rvalue_type mass=default_mass) noexcept(table_traits::rvalue_insert_is_nothrow&lt; table_type &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a6aca8adaf51ecbb54923197641e2d334</anchor>
      <arglist>(size_type index_, CenterX &amp;&amp;center_x, CenterY &amp;&amp;center_y, CenterZ &amp;&amp;center_z, Radius &amp;&amp;radius=0.5, Mass &amp;&amp;mass=default_mass) noexcept(table_traits::emplace_is_nothrow&lt; table_type &amp;, CenterX &amp;&amp;, CenterY &amp;&amp;, CenterZ &amp;&amp;, Radius &amp;&amp;, Mass &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a205faf54fe5f8930148248a184d432de</anchor>
      <arglist>(iterator iter_, CenterX &amp;&amp;center_x, CenterY &amp;&amp;center_y, CenterZ &amp;&amp;center_z, Radius &amp;&amp;radius=0.5, Mass &amp;&amp;mass=default_mass) noexcept(table_traits::emplace_is_nothrow&lt; table_type &amp;, CenterX &amp;&amp;, CenterY &amp;&amp;, CenterZ &amp;&amp;, Radius &amp;&amp;, Mass &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a5d5c51ce99c6d0689a0e5abcd37e530a</anchor>
      <arglist>(const_iterator iter_, CenterX &amp;&amp;center_x, CenterY &amp;&amp;center_y, CenterZ &amp;&amp;center_z, Radius &amp;&amp;radius=0.5, Mass &amp;&amp;mass=default_mass) noexcept(table_traits::emplace_is_nothrow&lt; table_type &amp;, CenterX &amp;&amp;, CenterY &amp;&amp;, CenterZ &amp;&amp;, Radius &amp;&amp;, Mass &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a1611a2e9bb9b822d619bd82f4e8c8f0e</anchor>
      <arglist>(size_type index_, Tuple &amp;&amp;tuple_) noexcept(table_traits::emplace_is_nothrow&lt; table_type &amp;, Tuple &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a8843d85d1b0397037e150be90bebb01d</anchor>
      <arglist>(iterator iter_, Tuple &amp;&amp;tuple_) noexcept(table_traits::emplace_is_nothrow&lt; table_type &amp;, Tuple &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a8c5142f0db82d043fc8aa4a5187c0381</anchor>
      <arglist>(const_iterator iter_, Tuple &amp;&amp;tuple_) noexcept(table_traits::emplace_is_nothrow&lt; table_type &amp;, Tuple &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::byte *</type>
      <name>data</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ae2c0c1bef674ad8d80eec45b81f7d67e</anchor>
      <arglist>() noexcept(soagen::has_nothrow_data_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const std::byte *const</type>
      <name>data</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a9bfa97f5c5d810a4af723f0e70c3cb05</anchor>
      <arglist>() noexcept(soagen::has_nothrow_data_member&lt; const table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr column_type&lt; Column &gt; *</type>
      <name>column</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a67a5c5fe70b4932d2b3f747c96223e66</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::add_const_t&lt; column_type&lt; Column &gt; &gt; *</type>
      <name>column</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a8d9e06c6cfc7ed698beba45529024dab</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>center_x</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>aea05122bb9759daec15a7a5c9eb25d46</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>center_x</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a44a0081edf5fbf043c4804deab132cbd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>center_y</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>aaf8083ab9a33b02d820f238c78cea296</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>center_y</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a27d2a022c370cf882e8f0583046ccf71</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>center_z</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a2fea223a8afe6b475e625fb81d409af7</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>center_z</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a63031f4cb3faad18f152955b4a92ad93</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>radius</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ac9f501b290fa85b358bd2a4fa67f5c99</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>radius</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a318449bf18c7b46ea77e7f56887ffc1b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>mass</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a509dc20b825074d8ea67907869b4c258</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>mass</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a35c9dd59de00c0f0a56027ff3623dd36</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>for_each_column</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>acb83bc7b78fcca6a44b976d289f6edc2</anchor>
      <arglist>(Func &amp;&amp;func) noexcept(table_traits::for_each_column_nothrow_invocable&lt; Func &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>for_each_column</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ac6f0090c2edf7bd0c8ddf7b33a206d72</anchor>
      <arglist>(Func &amp;&amp;func) const noexcept(table_traits::for_each_column_nothrow_invocable&lt; Func &amp;&amp;, true &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::row_type&lt; spheres &amp;, Columns... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a7b5bfe9664b678abc8e69c751b837b3c</anchor>
      <arglist>(size_type index) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr row_type</type>
      <name>operator[]</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a8d00efb65abface363dd144eb0938699</anchor>
      <arglist>(size_type index) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr row_type</type>
      <name>at</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a2e55f540850a7adda571a5ef4d421db7</anchor>
      <arglist>(size_type index) &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr row_type</type>
      <name>front</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a83216598b704fdf7e0e521e986ee3eed</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr row_type</type>
      <name>back</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a79891d7b50b87e776bf987af9d60f243</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::row_type&lt; spheres &amp;&amp;, Columns... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>aece85ee2616d1dfe8d9c5588e99c7851</anchor>
      <arglist>(size_type index) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr rvalue_row_type</type>
      <name>operator[]</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a03ba5864a08d1ac8637bccb8644b7bea</anchor>
      <arglist>(size_type index) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr rvalue_row_type</type>
      <name>at</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>af7c0d4caea19ec2a1673367e0005215b</anchor>
      <arglist>(size_type index) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr rvalue_row_type</type>
      <name>front</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a92aabcd011c28db08899de1a2f753127</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr rvalue_row_type</type>
      <name>back</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a47ff053025d2a0def6e032f3c46d782a</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::row_type&lt; const spheres &amp;, Columns... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a5e2349cfeae406af0092d917575e4072</anchor>
      <arglist>(size_type index) const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_row_type</type>
      <name>operator[]</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ac592afc8c0628b7b5c13ef956498089d</anchor>
      <arglist>(size_type index) const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_row_type</type>
      <name>at</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a880052324f4c3d6a98019fb451a02167</anchor>
      <arglist>(size_type index) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_row_type</type>
      <name>front</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a0b94bf03ca8ecc5ba313294d61f72070</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_row_type</type>
      <name>back</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a8e790103e2d0d2b05277db1b85a489d2</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; spheres &amp;, Columns... &gt;</type>
      <name>begin</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>acf6bc86b442e43603e0d1e308189000f</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; spheres &amp;, Columns... &gt;</type>
      <name>end</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>af9f6a4296b3eb08557018074a25dacc9</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; spheres &amp;&amp;, Columns... &gt;</type>
      <name>begin</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a491a4c75efbf2795988048f488bd36b5</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; spheres &amp;&amp;, Columns... &gt;</type>
      <name>end</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ae3802e9b31fe29151197cbe5343f541c</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; const spheres &amp;, Columns... &gt;</type>
      <name>begin</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ad70ddb6d380edd0265296d96c41d0f43</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; const spheres &amp;, Columns... &gt;</type>
      <name>end</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>af8d08988cb46da913939bfae32c57174</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; const spheres &amp;, Columns... &gt;</type>
      <name>cbegin</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a063609d98473efa9705541ff6bfe1a8a</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; const spheres &amp;, Columns... &gt;</type>
      <name>cend</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>afc4e20bbb43bd88980e934ed7719e4c7</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_type</type>
      <name>column_count</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a5673375cacaf6dfce4f70bdbd269c7b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_type</type>
      <name>aligned_stride</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a2d2ba7bad5fad60548156753b9e2ede7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto &amp;</type>
      <name>column_name</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>acc17bcf6059de245531ecf32fdfbc809</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a65ba32f00d34d6a5a5b8a7919f84e2d1</anchor>
      <arglist>(const spheres &amp;lhs, const spheres &amp;rhs) noexcept(soagen::is_nothrow_equality_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a120747d54b1f609346f629ee72e4c508</anchor>
      <arglist>(const spheres &amp;lhs, const spheres &amp;rhs) noexcept(soagen::is_nothrow_equality_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a0339ef900980527c37d896e7b5000aab</anchor>
      <arglist>(const spheres &amp;lhs, const spheres &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ab265a656698bc6bc41281ccdbd88dace</anchor>
      <arglist>(const spheres &amp;lhs, const spheres &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>afa6d9a31f01eb202cf008bbd26fa6f70</anchor>
      <arglist>(const spheres &amp;lhs, const spheres &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a91300ac4967a242152b40f57b75c401e</anchor>
      <arglist>(const spheres &amp;lhs, const spheres &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr table_type &amp;</type>
      <name>table</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a7e6b36eecf49e305fa8eb99ad79c9460</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr table_type &amp;&amp;</type>
      <name>table</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a277f06c64736f3e2d4d28d03c48f1ef0</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const table_type &amp;</type>
      <name>table</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a6254470367cdea596472975259c39a97</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a21db600b74615cf6bac286c6e1b5e95a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a437412ecf84dbccf377c5fc29910f74e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>max_size</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a54f75cec867b90bcabbb404d0edefe88</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>allocation_size</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ada9563d84c3e6d5edb6484843e611b68</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>reserve</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a72d550692d76e610b4deb7babf33015f</anchor>
      <arglist>(size_type new_cap) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().reserve(size_type{})))</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>capacity</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a47f8df10605e9cab275bb8c2ca4a8876</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>shrink_to_fit</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a643ac62bb09e8f02561e8ccc0747a01a</anchor>
      <arglist>() noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().shrink_to_fit()))</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>clear</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a702709217d1004d41a2f26220a262cda</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>erase</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a890d9bbce31f73a508e3f74cd9883213</anchor>
      <arglist>(size_type pos) noexcept(soagen::has_nothrow_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::optional&lt; size_type &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>aeebd21bc853a2bb49733a4610498af93</anchor>
      <arglist>(size_type pos) noexcept(soagen::has_nothrow_unordered_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>erase</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a9a5c10d386bd7d0c8adc75d82c10ae67</anchor>
      <arglist>(iterator pos) noexcept(soagen::has_nothrow_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::optional&lt; iterator &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>afceeb76c39dccef11f22d6e5bb8d1a8f</anchor>
      <arglist>(iterator pos) noexcept(soagen::has_nothrow_unordered_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>erase</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ab92c1f221d132393e2a35cfee39a2002</anchor>
      <arglist>(const_iterator pos) noexcept(soagen::has_nothrow_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::optional&lt; const_iterator &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a7edf77f9736d1e74e735586dc83af97d</anchor>
      <arglist>(const_iterator pos) noexcept(soagen::has_nothrow_unordered_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>pop_back</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>afd9a9bf8f9e4f131e8a6a0b246d5e654</anchor>
      <arglist>(size_type num=1) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().pop_back(size_type{})))</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>swap_columns</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>adcc719f00794a60c0c333b497c8519a5</anchor>
      <arglist>() noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().template swap_columns&lt; static_cast&lt; size_t &gt;(A), static_cast&lt; size_t &gt;(B)&gt;()))</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>resize</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ac7bfab8337b2cc736de2ee64775acbd8</anchor>
      <arglist>(size_type new_size) noexcept(soagen::has_nothrow_resize_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a0489cf91ad00e97256a8ed4f42394fac</anchor>
      <arglist>(spheres &amp;other) noexcept(soagen::has_nothrow_swap_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>push_back</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a6ff44556b94a02063656faf8e82b6f89</anchor>
      <arglist>(column_traits&lt; 0 &gt;::param_type center_x, column_traits&lt; 1 &gt;::param_type center_y, column_traits&lt; 2 &gt;::param_type center_z, column_traits&lt; 3 &gt;::param_type radius=0.5, column_traits&lt; 4 &gt;::param_type mass=default_mass) noexcept(table_traits::push_back_is_nothrow&lt; table_type &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>push_back</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>adf7854d44774bce23a9fcc7ddfa75b15</anchor>
      <arglist>(column_traits&lt; 0 &gt;::rvalue_type center_x, column_traits&lt; 1 &gt;::rvalue_type center_y, column_traits&lt; 2 &gt;::rvalue_type center_z, column_traits&lt; 3 &gt;::rvalue_type radius=0.5, column_traits&lt; 4 &gt;::rvalue_type mass=default_mass) noexcept(table_traits::rvalue_push_back_is_nothrow&lt; table_type &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>emplace_back</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a8b7b9261e64d973c4ca67547da8e32bd</anchor>
      <arglist>(CenterX &amp;&amp;center_x, CenterY &amp;&amp;center_y, CenterZ &amp;&amp;center_z, Radius &amp;&amp;radius=0.5, Mass &amp;&amp;mass=default_mass) noexcept(table_traits::emplace_back_is_nothrow&lt; table_type &amp;, CenterX &amp;&amp;, CenterY &amp;&amp;, CenterZ &amp;&amp;, Radius &amp;&amp;, Mass &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>emplace_back</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a5a8f8656e2534524cf8d4daab9d15576</anchor>
      <arglist>(Tuple &amp;&amp;tuple_) noexcept(table_traits::emplace_back_is_nothrow&lt; table_type &amp;, Tuple &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a4737476f52c6a122bc50d3c888213c72</anchor>
      <arglist>(size_type index_, column_traits&lt; 0 &gt;::param_type center_x, column_traits&lt; 1 &gt;::param_type center_y, column_traits&lt; 2 &gt;::param_type center_z, column_traits&lt; 3 &gt;::param_type radius=0.5, column_traits&lt; 4 &gt;::param_type mass=default_mass) noexcept(table_traits::insert_is_nothrow&lt; table_type &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a0bd336e4c7c8559312518661f5a970ce</anchor>
      <arglist>(iterator iter_, column_traits&lt; 0 &gt;::param_type center_x, column_traits&lt; 1 &gt;::param_type center_y, column_traits&lt; 2 &gt;::param_type center_z, column_traits&lt; 3 &gt;::param_type radius=0.5, column_traits&lt; 4 &gt;::param_type mass=default_mass) noexcept(table_traits::insert_is_nothrow&lt; table_type &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a5dcb4e6cd396c23dc0bd799164afe172</anchor>
      <arglist>(const_iterator iter_, column_traits&lt; 0 &gt;::param_type center_x, column_traits&lt; 1 &gt;::param_type center_y, column_traits&lt; 2 &gt;::param_type center_z, column_traits&lt; 3 &gt;::param_type radius=0.5, column_traits&lt; 4 &gt;::param_type mass=default_mass) noexcept(table_traits::insert_is_nothrow&lt; table_type &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a22298653c9e91ebf9ed82d3f7addf471</anchor>
      <arglist>(size_type index_, column_traits&lt; 0 &gt;::rvalue_type center_x, column_traits&lt; 1 &gt;::rvalue_type center_y, column_traits&lt; 2 &gt;::rvalue_type center_z, column_traits&lt; 3 &gt;::rvalue_type radius=0.5, column_traits&lt; 4 &gt;::rvalue_type mass=default_mass) noexcept(table_traits::rvalue_insert_is_nothrow&lt; table_type &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a1a54db92240a1abebceebceed4b825d0</anchor>
      <arglist>(iterator iter_, column_traits&lt; 0 &gt;::rvalue_type center_x, column_traits&lt; 1 &gt;::rvalue_type center_y, column_traits&lt; 2 &gt;::rvalue_type center_z, column_traits&lt; 3 &gt;::rvalue_type radius=0.5, column_traits&lt; 4 &gt;::rvalue_type mass=default_mass) noexcept(table_traits::rvalue_insert_is_nothrow&lt; table_type &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a258266339b57f8e98b14ffd417f0376f</anchor>
      <arglist>(const_iterator iter_, column_traits&lt; 0 &gt;::rvalue_type center_x, column_traits&lt; 1 &gt;::rvalue_type center_y, column_traits&lt; 2 &gt;::rvalue_type center_z, column_traits&lt; 3 &gt;::rvalue_type radius=0.5, column_traits&lt; 4 &gt;::rvalue_type mass=default_mass) noexcept(table_traits::rvalue_insert_is_nothrow&lt; table_type &amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a6aca8adaf51ecbb54923197641e2d334</anchor>
      <arglist>(size_type index_, CenterX &amp;&amp;center_x, CenterY &amp;&amp;center_y, CenterZ &amp;&amp;center_z, Radius &amp;&amp;radius=0.5, Mass &amp;&amp;mass=default_mass) noexcept(table_traits::emplace_is_nothrow&lt; table_type &amp;, CenterX &amp;&amp;, CenterY &amp;&amp;, CenterZ &amp;&amp;, Radius &amp;&amp;, Mass &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a205faf54fe5f8930148248a184d432de</anchor>
      <arglist>(iterator iter_, CenterX &amp;&amp;center_x, CenterY &amp;&amp;center_y, CenterZ &amp;&amp;center_z, Radius &amp;&amp;radius=0.5, Mass &amp;&amp;mass=default_mass) noexcept(table_traits::emplace_is_nothrow&lt; table_type &amp;, CenterX &amp;&amp;, CenterY &amp;&amp;, CenterZ &amp;&amp;, Radius &amp;&amp;, Mass &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a5d5c51ce99c6d0689a0e5abcd37e530a</anchor>
      <arglist>(const_iterator iter_, CenterX &amp;&amp;center_x, CenterY &amp;&amp;center_y, CenterZ &amp;&amp;center_z, Radius &amp;&amp;radius=0.5, Mass &amp;&amp;mass=default_mass) noexcept(table_traits::emplace_is_nothrow&lt; table_type &amp;, CenterX &amp;&amp;, CenterY &amp;&amp;, CenterZ &amp;&amp;, Radius &amp;&amp;, Mass &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a1611a2e9bb9b822d619bd82f4e8c8f0e</anchor>
      <arglist>(size_type index_, Tuple &amp;&amp;tuple_) noexcept(table_traits::emplace_is_nothrow&lt; table_type &amp;, Tuple &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a8843d85d1b0397037e150be90bebb01d</anchor>
      <arglist>(iterator iter_, Tuple &amp;&amp;tuple_) noexcept(table_traits::emplace_is_nothrow&lt; table_type &amp;, Tuple &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a8c5142f0db82d043fc8aa4a5187c0381</anchor>
      <arglist>(const_iterator iter_, Tuple &amp;&amp;tuple_) noexcept(table_traits::emplace_is_nothrow&lt; table_type &amp;, Tuple &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::byte *</type>
      <name>data</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ae2c0c1bef674ad8d80eec45b81f7d67e</anchor>
      <arglist>() noexcept(soagen::has_nothrow_data_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const std::byte *const</type>
      <name>data</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a9bfa97f5c5d810a4af723f0e70c3cb05</anchor>
      <arglist>() noexcept(soagen::has_nothrow_data_member&lt; const table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr column_type&lt; Column &gt; *</type>
      <name>column</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a67a5c5fe70b4932d2b3f747c96223e66</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::add_const_t&lt; column_type&lt; Column &gt; &gt; *</type>
      <name>column</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a8d9e06c6cfc7ed698beba45529024dab</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>center_x</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>aea05122bb9759daec15a7a5c9eb25d46</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>center_x</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a44a0081edf5fbf043c4804deab132cbd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>center_y</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>aaf8083ab9a33b02d820f238c78cea296</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>center_y</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a27d2a022c370cf882e8f0583046ccf71</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>center_z</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a2fea223a8afe6b475e625fb81d409af7</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>center_z</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a63031f4cb3faad18f152955b4a92ad93</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>radius</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ac9f501b290fa85b358bd2a4fa67f5c99</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>radius</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a318449bf18c7b46ea77e7f56887ffc1b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>mass</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a509dc20b825074d8ea67907869b4c258</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>mass</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a35c9dd59de00c0f0a56027ff3623dd36</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>for_each_column</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>acb83bc7b78fcca6a44b976d289f6edc2</anchor>
      <arglist>(Func &amp;&amp;func) noexcept(table_traits::for_each_column_nothrow_invocable&lt; Func &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>for_each_column</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ac6f0090c2edf7bd0c8ddf7b33a206d72</anchor>
      <arglist>(Func &amp;&amp;func) const noexcept(table_traits::for_each_column_nothrow_invocable&lt; Func &amp;&amp;, true &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::row_type&lt; spheres &amp;, Columns... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a7b5bfe9664b678abc8e69c751b837b3c</anchor>
      <arglist>(size_type index) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr row_type</type>
      <name>operator[]</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a8d00efb65abface363dd144eb0938699</anchor>
      <arglist>(size_type index) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr row_type</type>
      <name>at</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a2e55f540850a7adda571a5ef4d421db7</anchor>
      <arglist>(size_type index) &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr row_type</type>
      <name>front</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a83216598b704fdf7e0e521e986ee3eed</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr row_type</type>
      <name>back</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a79891d7b50b87e776bf987af9d60f243</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::row_type&lt; spheres &amp;&amp;, Columns... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>aece85ee2616d1dfe8d9c5588e99c7851</anchor>
      <arglist>(size_type index) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr rvalue_row_type</type>
      <name>operator[]</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a03ba5864a08d1ac8637bccb8644b7bea</anchor>
      <arglist>(size_type index) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr rvalue_row_type</type>
      <name>at</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>af7c0d4caea19ec2a1673367e0005215b</anchor>
      <arglist>(size_type index) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr rvalue_row_type</type>
      <name>front</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a92aabcd011c28db08899de1a2f753127</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr rvalue_row_type</type>
      <name>back</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a47ff053025d2a0def6e032f3c46d782a</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::row_type&lt; const spheres &amp;, Columns... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a5e2349cfeae406af0092d917575e4072</anchor>
      <arglist>(size_type index) const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_row_type</type>
      <name>operator[]</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ac592afc8c0628b7b5c13ef956498089d</anchor>
      <arglist>(size_type index) const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_row_type</type>
      <name>at</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a880052324f4c3d6a98019fb451a02167</anchor>
      <arglist>(size_type index) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_row_type</type>
      <name>front</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a0b94bf03ca8ecc5ba313294d61f72070</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_row_type</type>
      <name>back</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a8e790103e2d0d2b05277db1b85a489d2</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; spheres &amp;, Columns... &gt;</type>
      <name>begin</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>acf6bc86b442e43603e0d1e308189000f</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; spheres &amp;, Columns... &gt;</type>
      <name>end</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>af9f6a4296b3eb08557018074a25dacc9</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; spheres &amp;&amp;, Columns... &gt;</type>
      <name>begin</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a491a4c75efbf2795988048f488bd36b5</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; spheres &amp;&amp;, Columns... &gt;</type>
      <name>end</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ae3802e9b31fe29151197cbe5343f541c</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; const spheres &amp;, Columns... &gt;</type>
      <name>begin</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ad70ddb6d380edd0265296d96c41d0f43</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; const spheres &amp;, Columns... &gt;</type>
      <name>end</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>af8d08988cb46da913939bfae32c57174</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; const spheres &amp;, Columns... &gt;</type>
      <name>cbegin</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a063609d98473efa9705541ff6bfe1a8a</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; const spheres &amp;, Columns... &gt;</type>
      <name>cend</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>afc4e20bbb43bd88980e934ed7719e4c7</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a65ba32f00d34d6a5a5b8a7919f84e2d1</anchor>
      <arglist>(const spheres &amp;lhs, const spheres &amp;rhs) noexcept(soagen::is_nothrow_equality_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a120747d54b1f609346f629ee72e4c508</anchor>
      <arglist>(const spheres &amp;lhs, const spheres &amp;rhs) noexcept(soagen::is_nothrow_equality_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a0339ef900980527c37d896e7b5000aab</anchor>
      <arglist>(const spheres &amp;lhs, const spheres &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ab265a656698bc6bc41281ccdbd88dace</anchor>
      <arglist>(const spheres &amp;lhs, const spheres &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>afa6d9a31f01eb202cf008bbd26fa6f70</anchor>
      <arglist>(const spheres &amp;lhs, const spheres &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a91300ac4967a242152b40f57b75c401e</anchor>
      <arglist>(const spheres &amp;lhs, const spheres &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>soagen::table</name>
    <filename>classsoagen_1_1table.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>Base</templarg>
    <member kind="typedef">
      <type>Traits</type>
      <name>table_traits</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>acc2d13b69d268b87569c15c0ea002c3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Allocator</type>
      <name>allocator_type</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a6a2b8935dad2ac92f7c1128caf494c99</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename table_traits::template column&lt; static_cast&lt; size_t &gt;(Column)&gt;</type>
      <name>column_traits</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a722d28ab2b8ea1e37684cf673658a9d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename column_traits&lt; static_cast&lt; size_t &gt;(Column)&gt;::value_type</type>
      <name>column_type</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a18dd935dee97a20427a37c788cef0e27</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>table</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a8edac5c41795dd6175399d56ad76de9e</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>table</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a1443371ec55372e56c384ef94c9f59fb</anchor>
      <arglist>(table &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>table &amp;</type>
      <name>operator=</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a6aa6ea0883e095256d90b22c0c9719a4</anchor>
      <arglist>(table &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>table</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a810905840b359154654d9acbf9dc8f37</anchor>
      <arglist>(const table &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>table &amp;</type>
      <name>operator=</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a926cb62b12a8600487ab60ead9d3aa7f</anchor>
      <arglist>(const table &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~table</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a80859b85c8521b9f23543b07e2d5910c</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>table</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a76e5f037c0ae7e78d79bcf4161b5d596</anchor>
      <arglist>(const allocator_type &amp;alloc) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>table</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>acd05d1acfb66d62d4286532554b7c360</anchor>
      <arglist>(allocator_type &amp;&amp;alloc) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr allocator_type</type>
      <name>get_allocator</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>acebef9fb5432028601e0e559950777af</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a752d42045532578d287bd21ba020e207</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a646849eb38ec9ac1c18ef676d2c37f1c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>max_size</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a40ab4f9bfd2efffdca7871fff32a36d1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_t</type>
      <name>allocation_size</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a1aba4f539694195b84ab3109c03c9b8b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a92dff4d5f1e4d35e19b913ff433ef8bb</anchor>
      <arglist>(size_type new_cap) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>capacity</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>af5e441c2680a609d2e761f16ad01a143</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shrink_to_fit</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a5fd4daa4125e0a0941a32e413b9ae9e2</anchor>
      <arglist>() noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a8c29ade812e2eb1cfeeb24831999a1d7</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a2bedd9bfbd87fb8dce39f63f9d40960c</anchor>
      <arglist>(size_type pos) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>soagen::optional&lt; size_type &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a177ba24c17a0a3579e9b03ef9dea6109</anchor>
      <arglist>(size_type pos) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emplace_back</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a4f93756e5d23088ff54a3ae075bd2b33</anchor>
      <arglist>(Args &amp;&amp;... args) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a3b15daf232f2a0dd5b1562840d4c4d28</anchor>
      <arglist>(size_type index, Args &amp;&amp;... args) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop_back</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ab0a78c88f3d921ffee6f00e89d36e914</anchor>
      <arglist>(size_type num=1) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ac0254c367e0a656ac5a449965186e2aa</anchor>
      <arglist>(size_type new_size) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a027d3e2bd2d4cd59def2b35f2b072e7e</anchor>
      <arglist>(table &amp;other) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::byte *</type>
      <name>data</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a52fe4c66a3106c8be26f43ec8cabd26c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const std::byte *</type>
      <name>data</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a43a20b4f57e1cb476d5e446b0f993309</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr column_type&lt; Column &gt; *</type>
      <name>column</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>afd7b2f9ad6f49d83770c5e9fdfb7bee6</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::add_const_t&lt; column_type&lt; Column &gt; &gt; *</type>
      <name>column</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>acc96cf08f3908b155c1f7f7b1faf757e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>aligned_stride</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ad8dd7f519abb7087fbb132998062545e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>afb7c9b31b82a2f581341293d7b886bec</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept(...)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ae7e6dcd41e4076c6c0f17226c9f90606</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept(...)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a3284223bf5cebda393d8cfe864acfcf2</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept(...)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a538d7b417aa6bd97438f46cbd6fb4fcf</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept(...)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>aa4f939153878d51597644c36c682427f</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept(...)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ae16c2ee9b6ca0e308afca8f8c210e738</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a752d42045532578d287bd21ba020e207</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a646849eb38ec9ac1c18ef676d2c37f1c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>max_size</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a40ab4f9bfd2efffdca7871fff32a36d1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_t</type>
      <name>allocation_size</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a1aba4f539694195b84ab3109c03c9b8b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a92dff4d5f1e4d35e19b913ff433ef8bb</anchor>
      <arglist>(size_type new_cap) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>capacity</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>af5e441c2680a609d2e761f16ad01a143</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shrink_to_fit</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a5fd4daa4125e0a0941a32e413b9ae9e2</anchor>
      <arglist>() noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a8c29ade812e2eb1cfeeb24831999a1d7</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a2bedd9bfbd87fb8dce39f63f9d40960c</anchor>
      <arglist>(size_type pos) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>soagen::optional&lt; size_type &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a177ba24c17a0a3579e9b03ef9dea6109</anchor>
      <arglist>(size_type pos) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emplace_back</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a4f93756e5d23088ff54a3ae075bd2b33</anchor>
      <arglist>(Args &amp;&amp;... args) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a3b15daf232f2a0dd5b1562840d4c4d28</anchor>
      <arglist>(size_type index, Args &amp;&amp;... args) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop_back</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ab0a78c88f3d921ffee6f00e89d36e914</anchor>
      <arglist>(size_type num=1) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ac0254c367e0a656ac5a449965186e2aa</anchor>
      <arglist>(size_type new_size) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a027d3e2bd2d4cd59def2b35f2b072e7e</anchor>
      <arglist>(table &amp;other) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::byte *</type>
      <name>data</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a52fe4c66a3106c8be26f43ec8cabd26c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const std::byte *</type>
      <name>data</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a43a20b4f57e1cb476d5e446b0f993309</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr column_type&lt; Column &gt; *</type>
      <name>column</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>afd7b2f9ad6f49d83770c5e9fdfb7bee6</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::add_const_t&lt; column_type&lt; Column &gt; &gt; *</type>
      <name>column</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>acc96cf08f3908b155c1f7f7b1faf757e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>afb7c9b31b82a2f581341293d7b886bec</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept(...)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ae7e6dcd41e4076c6c0f17226c9f90606</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept(...)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a3284223bf5cebda393d8cfe864acfcf2</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept(...)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a538d7b417aa6bd97438f46cbd6fb4fcf</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept(...)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>aa4f939153878d51597644c36c682427f</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept(...)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ae16c2ee9b6ca0e308afca8f8c210e738</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept(...)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>soagen::table_base</name>
    <filename>structsoagen_1_1table__base.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>soagen::table_traits</name>
    <filename>structsoagen_1_1table__traits.html</filename>
    <templarg>Columns</templarg>
    <member kind="typedef">
      <type>type_at_index&lt; static_cast&lt; size_t &gt;(Index), Columns... &gt;</type>
      <name>column</name>
      <anchorfile>structsoagen_1_1table__traits.html</anchorfile>
      <anchor>ad872183b2c1b391637b41ba0b061a6b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>type_at_index&lt; static_cast&lt; size_t &gt;(IndexConstant::value), Columns... &gt;</type>
      <name>column_from_ic</name>
      <anchorfile>structsoagen_1_1table__traits.html</anchorfile>
      <anchor>a3975c779c5b48b44a7062c5d079e3399</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>column_count</name>
      <anchorfile>structsoagen_1_1table__traits.html</anchorfile>
      <anchor>a9c5de4cd50de5c424f1bd3eecc2bb228</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>aligned_stride</name>
      <anchorfile>structsoagen_1_1table__traits.html</anchorfile>
      <anchor>a7b18454ef28aa4279e1f1fc61bd15381</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>column_alignments</name>
      <anchorfile>structsoagen_1_1table__traits.html</anchorfile>
      <anchor>a0405d7fb8c928727d169f006fd46abac</anchor>
      <arglist>[column_count]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>largest_alignment</name>
      <anchorfile>structsoagen_1_1table__traits.html</anchorfile>
      <anchor>a595a21db7abeb21baf06e855b8fffd8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>rvalue_type_list_is_distinct</name>
      <anchorfile>structsoagen_1_1table__traits.html</anchorfile>
      <anchor>acc959fd217581e04726ca725cec7c65d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>emplace_back_is_nothrow</name>
      <anchorfile>structsoagen_1_1table__traits.html</anchorfile>
      <anchor>a695e2fad95546b8898ede16c02ad671f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>push_back_is_nothrow</name>
      <anchorfile>structsoagen_1_1table__traits.html</anchorfile>
      <anchor>a19e6ad60702f59f07cbbbb1402504c4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>rvalue_push_back_is_nothrow</name>
      <anchorfile>structsoagen_1_1table__traits.html</anchorfile>
      <anchor>ab5f7cbb57002764b245334750f49910a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>row_push_back_is_nothrow</name>
      <anchorfile>structsoagen_1_1table__traits.html</anchorfile>
      <anchor>ae492438a126be38710810a3d7caccc8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>emplace_is_nothrow</name>
      <anchorfile>structsoagen_1_1table__traits.html</anchorfile>
      <anchor>a50163a4d0076abfbea065c459dc89d41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>insert_is_nothrow</name>
      <anchorfile>structsoagen_1_1table__traits.html</anchorfile>
      <anchor>ad9f94da28e33983443db6b097129c2f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>rvalue_insert_is_nothrow</name>
      <anchorfile>structsoagen_1_1table__traits.html</anchorfile>
      <anchor>a220c9df86d096de95686cbc25236d3e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>row_insert_is_nothrow</name>
      <anchorfile>structsoagen_1_1table__traits.html</anchorfile>
      <anchor>ae08b56d98935b644e8ca7d0ceb3e93be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>for_each_column_invocable</name>
      <anchorfile>structsoagen_1_1table__traits.html</anchorfile>
      <anchor>abcb444195d5260f340212511ccb81508</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>for_each_column_nothrow_invocable</name>
      <anchorfile>structsoagen_1_1table__traits.html</anchorfile>
      <anchor>ac60fb67fb50cfc578daf37fa694b1c86</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>soagen</name>
    <filename>namespacesoagen.html</filename>
    <namespace>soagen::examples</namespace>
    <class kind="struct">soagen::allocator</class>
    <class kind="struct">soagen::column_traits</class>
    <class kind="struct">soagen::identity_base</class>
    <class kind="struct">soagen::emplacer</class>
    <class kind="struct">soagen::iterator_base</class>
    <class kind="class">soagen::iterator</class>
    <class kind="struct">soagen::row_base</class>
    <class kind="struct">soagen::row</class>
    <class kind="struct">soagen::table_base</class>
    <class kind="class">soagen::table</class>
    <class kind="struct">soagen::table_traits</class>
    <member kind="typedef">
      <type>std::remove_cv_t&lt; std::remove_reference_t&lt; T &gt; &gt;</type>
      <name>remove_cvref</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>ac8013f256732192bd84bfe3853d36ecf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::add_lvalue_reference_t&lt; std::add_const_t&lt; std::remove_reference_t&lt; T &gt; &gt;&gt;</type>
      <name>make_cref</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a999c94c0a9677dda7f4d6ef97854cc12</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::conditional_t&lt; std::is_reference_v&lt; T &gt;, T, std::add_lvalue_reference_t&lt; T &gt; &gt;</type>
      <name>coerce_ref</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a61cae0db038414799d74ed645c0d4b75</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>identity_type</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>abc4103bb9286b959a8567fb67d8d212c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::integral_constant&lt; size_t, static_cast&lt; size_t &gt;(Value)&gt;</type>
      <name>index_constant</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>ad43f30999296a4d8571022ae2549ff68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>forward_type</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>acc7386f915bae0818a7078fee2350cf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::optional&lt; T &gt;</type>
      <name>optional</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a752660c356d07c3815ebe85969788ae3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>type_at_index</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a3d26167a02130bdc91a58e0c3a2f75a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>table_type</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a83c1e715eb12c7393c508dcc1ba6264f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>table_traits_type</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a0b1aa7477b1f150cbfcd4cfbce00ff83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>allocator_type</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a85c2af2605578cc55f1e69ccac75ffc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>value_type</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a3039db4dcf0ce567d3779945a88a97bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>storage_type</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a05e7d77f37a4bcb2d256798df0fcbbc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>param_type</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>adf58db246695891f9f6789a84dce309a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>rvalue_type</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a0f0b3f50730a07796f5b04cf18926d4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>iterator_type</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>add5e820b9a46b8d9ee87c375f59bc7ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>row_type</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a392da967263ac8a2a67633e4c1574c19</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>ac09aa330dbbcf78f7794ac8232c46d66</anchor>
      <arglist>(table&lt; Args... &gt; &amp;lhs, table&lt; Args... &gt; &amp;rhs) noexcept(soagen::has_nothrow_swap_member&lt; table&lt; Args... &gt;&gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr decltype(auto)</type>
      <name>get_from_tuple</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>afba1151592ae109c0d8758a64b03893c</anchor>
      <arglist>(T &amp;&amp;tuple) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_column_traits</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>aabcf58d0029fe593e95833cb07c4f7a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_cv</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a33f1ab2862c86938e20c474a5b454551</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_cvref</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a6807d6e29ce4c1c6923e2214a3bd6b83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_integer</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a26eb6d5dd00e245d1100c028ee8af498</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_integer</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a85d7ea90620b08fe88b334fe5a52c9ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_unsigned</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>aa4ea4199aca8afd46bccd2c067e16aa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>any_same</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a0e0ba083c71c58486abb3a35973d210a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>any_same_value</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a23b24b02f81c64707fd6931609489102</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_soa</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>af1ebb4d107e208fb28942fdea2cb6fa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_implicit_lifetime_type</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a24f6ae16c76ca86d6bf594a40daea0bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>is_detected</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a419e437a6695ca5f441f9325e602f239</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_swap_member</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a85b5060347f1c2ccc296b67ead6bfb56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_resize_member</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a1cd6fd46b1d4f17bc0df5bff58ffbec8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_erase_member</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>acec9fc64e4bef77e711e70d8cac40100</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_unordered_erase_member</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a9ce88699add310eee6ef77255b5bcece</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_data_member</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a60597862a1a2fe5e93a0b8f7e38df031</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_equality_comparable</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a1feeeeac75c633a5479f91f6d96aef85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_less_than_comparable</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>ac633e60da34e1b33f52b02ae74570820</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_nothrow_swap_member</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a26feac0abbb3db577bc5e749ea2d84e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_nothrow_resize_member</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a152b3745ab0ec710c3de653f78b8949f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_nothrow_erase_member</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a57815a9f658fa8f6a11cbe0122184e25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_nothrow_unordered_erase_member</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>afc873f4a7018715a58de25729c724f9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_nothrow_data_member</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>ac39e6aa84e74f60370b9ca737fefddec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_nothrow_equality_comparable</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>ae343150616e0e79217848e4fb27c0be5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_nothrow_less_than_comparable</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a5bae32f1abaf115c96d228ac3c92e407</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>same_table_type</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a1409c1b176ccdc74c3452146e5da5d06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_emplacer</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a28a13532fbc8ec520bcc036345af34f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_invocable</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a19e4d4167db86ba0bc02efea5a786c91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_nothrow_invocable</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a525d4590bf07fd46a55a5c8295821265</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_invocable_with_optional_index</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>aa770bb381662b58ca547ff1b63b5aaeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_nothrow_invocable_with_optional_index</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a78142dc539b1099ec0acd3af52f7cdce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_iterator</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>ad541e11816c26f9d3a00693f2b8de590</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_row</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>af318a46d5e993f9a3742d0dc5f9604cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_table</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a52fd2ec6fe868575bdbacf17d045573a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_table_traits</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>ae01a388ac93f910d43246f50ac3648b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_tuple</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>ae247ccddc819bfc71997070cd3981970</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_constructible_by_unpacking_tuple</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>adf11ed476930c3845d8310a46a7e3a46</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>soagen::examples</name>
    <filename>namespacesoagen_1_1examples.html</filename>
    <class kind="class">soagen::examples::entities</class>
    <class kind="class">soagen::examples::boxes</class>
    <class kind="class">soagen::examples::spheres</class>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>namespacesoagen_1_1examples.html</anchorfile>
      <anchor>ab27a4c779651cc5c8bb538ba7f5b7802</anchor>
      <arglist>(entities &amp;lhs, entities &amp;rhs) noexcept(soagen::has_nothrow_swap_member&lt; entities &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>namespacesoagen_1_1examples.html</anchorfile>
      <anchor>a73ca6e1dfeb7041e934e8694d2cf2d6b</anchor>
      <arglist>(boxes &amp;lhs, boxes &amp;rhs) noexcept(soagen::has_nothrow_swap_member&lt; boxes &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>namespacesoagen_1_1examples.html</anchorfile>
      <anchor>a2f2937d0182090b040da55081644f65f</anchor>
      <arglist>(spheres &amp;lhs, spheres &amp;rhs) noexcept(soagen::has_nothrow_swap_member&lt; spheres &gt;)</arglist>
    </member>
  </compound>
  <compound kind="page">
    <name>schema</name>
    <title>Config File Schema</title>
    <filename>schema.html</filename>
    <docanchor file="schema.html" title="&lt;root&gt;">schema_root</docanchor>
    <docanchor file="schema.html" title="allocator">schema_root_allocator</docanchor>
    <docanchor file="schema.html" title="namespace">schema_root_namespace</docanchor>
    <docanchor file="schema.html" title="hpp">schema_hpp</docanchor>
    <docanchor file="schema.html" title="banner">schema_hpp_banner</docanchor>
    <docanchor file="schema.html" title="brief">schema_hpp_brief</docanchor>
    <docanchor file="schema.html" title="combined">schema_hpp_combined</docanchor>
    <docanchor file="schema.html" title="footer">schema_hpp_footer</docanchor>
    <docanchor file="schema.html" title="header">schema_hpp_header</docanchor>
    <docanchor file="schema.html" title="includes">schema_hpp_includes</docanchor>
    <docanchor file="schema.html" title="prologue">schema_hpp_prologue</docanchor>
    <docanchor file="schema.html" title="structs">schema_structs</docanchor>
    <docanchor file="schema.html" title="allocator">schema_structs_allocator</docanchor>
    <docanchor file="schema.html" title="annotations">schema_structs_annotations</docanchor>
    <docanchor file="schema.html" title="attributes">schema_structs_attributes</docanchor>
    <docanchor file="schema.html" title="brief">schema_structs_brief</docanchor>
    <docanchor file="schema.html" title="copyable">schema_structs_copyable</docanchor>
    <docanchor file="schema.html" title="default_constructible">schema_structs_default_constructible</docanchor>
    <docanchor file="schema.html" title="details">schema_structs_details</docanchor>
    <docanchor file="schema.html" title="epilogue">schema_structs_epilogue</docanchor>
    <docanchor file="schema.html" title="footer">schema_structs_footer</docanchor>
    <docanchor file="schema.html" title="header">schema_structs_header</docanchor>
    <docanchor file="schema.html" title="iterators">schema_structs_iterators</docanchor>
    <docanchor file="schema.html" title="movable">schema_structs_movable</docanchor>
    <docanchor file="schema.html" title="prologue">schema_structs_prologue</docanchor>
    <docanchor file="schema.html" title="rvalue_iterators">schema_structs_rvalue_iterators</docanchor>
    <docanchor file="schema.html" title="static_variables">schema_structs_static_variables</docanchor>
    <docanchor file="schema.html" title="swappable">schema_structs_swappable</docanchor>
    <docanchor file="schema.html" title="variables">schema_structs_variables</docanchor>
    <docanchor file="schema.html" title="static_variables">schema_static_variables</docanchor>
    <docanchor file="schema.html" title="access">schema_static_variables_access</docanchor>
    <docanchor file="schema.html" title="brief">schema_static_variables_brief</docanchor>
    <docanchor file="schema.html" title="const">schema_static_variables_const</docanchor>
    <docanchor file="schema.html" title="name">schema_static_variables_name</docanchor>
    <docanchor file="schema.html" title="type">schema_static_variables_type</docanchor>
    <docanchor file="schema.html" title="value">schema_static_variables_value</docanchor>
    <docanchor file="schema.html" title="variables">schema_variables</docanchor>
    <docanchor file="schema.html" title="alignment">schema_variables_alignment</docanchor>
    <docanchor file="schema.html" title="default">schema_variables_default</docanchor>
    <docanchor file="schema.html" title="name">schema_variables_name</docanchor>
    <docanchor file="schema.html" title="param_type">schema_variables_param_type</docanchor>
    <docanchor file="schema.html" title="type">schema_variables_type</docanchor>
  </compound>
  <compound kind="page">
    <name>poxy_changelog</name>
    <title>Changelog</title>
    <filename>poxy_changelog.html</filename>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>soagen: A Structure-of-Arrays generator for C++</title>
    <filename>index.html</filename>
    <docanchor file="index.html" title="TL;DR">intro_tldr</docanchor>
    <docanchor file="index.html" title="Motivation">intro_motivation</docanchor>
    <docanchor file="index.html" title="Typical data layouts (Array-of-Structures)">intro_motivation_typical</docanchor>
    <docanchor file="index.html" title="Structure-of-Arrays">intro_motivation_soa</docanchor>
    <docanchor file="index.html" title="A naïve implementation">intro_motivation_soa_naive</docanchor>
    <docanchor file="index.html" title="Problem #1: Multiple allocations">intro_motivation_soa_multiple_allocation</docanchor>
    <docanchor file="index.html" title="Problem #2: Manual Synchronization">intro_motivation_soa_manual_sync</docanchor>
    <docanchor file="index.html" title="Problem #3: Identities are weakly-typed">intro_motivation_soa_iterators_weakly_typed</docanchor>
    <docanchor file="index.html" title="Problem #4: AoS-style access is cumbersome">intro_motivation_soa_struct_mode_hard</docanchor>
    <docanchor file="index.html" title="Problem #5: Not idiomatic C++">intro_motivation_soa_idiomatic</docanchor>
    <docanchor file="index.html" title="Problem #6: Elegance or Names - pick one">intro_motivation_soa_names</docanchor>
    <docanchor file="index.html" title="Introducing soagen">intro_introducing_soagen</docanchor>
    <docanchor file="index.html" title="Getting started">intro_getting_started</docanchor>
    <docanchor file="index.html" title="Prerequisites">intro_getting_started_prerequisites</docanchor>
    <docanchor file="index.html" title="Installing soagen">intro_getting_started_generator</docanchor>
    <docanchor file="index.html" title="Creating an SoA container class">intro_creating_a_class</docanchor>
    <docanchor file="index.html" title="Installing soagen.hpp">intro_installing_soagen_hpp</docanchor>
    <docanchor file="index.html" title="Configuring #includes">intro_configuring_includes</docanchor>
    <docanchor file="index.html" title="A brief aside: terminology">intro_nomenclature</docanchor>
    <docanchor file="index.html" title="Adding rows">intro_adding_rows</docanchor>
    <docanchor file="index.html" title="Removing rows">intro_removing_rows</docanchor>
    <docanchor file="index.html" title="Capacity">intro_capacity</docanchor>
    <docanchor file="index.html" title="Working with columns">intro_columns</docanchor>
    <docanchor file="index.html" title="Working with rows and iterators">intro_rows</docanchor>
    <docanchor file="index.html" title="Equality">intro_equality</docanchor>
    <docanchor file="index.html" title="Comparison">intro_comparison</docanchor>
    <docanchor file="index.html" title="Over-aligning columns">intro_custom_over_aligning_columns</docanchor>
    <docanchor file="index.html" title="Using custom allocators">intro_custom_byo_allocator</docanchor>
    <docanchor file="index.html" title="Customizing allocators for soagen">intro_customizing_allocators</docanchor>
    <docanchor file="index.html" title="Specifying a min_alignment">intro_customizing_allocators_min_alignment</docanchor>
    <docanchor file="index.html" title="Alignment-aware allocate()">intro_customizing_allocators_aligned_allocate</docanchor>
    <docanchor file="index.html" title="Accessing the underlying buffer">intro_access_underlying_buffer</docanchor>
    <docanchor file="index.html" title="Integrating with reflection systems">intro_integration_with_reflection</docanchor>
    <docanchor file="index.html" title="Creating your own SoA types without the generator">intro_using_without_generator</docanchor>
    <docanchor file="index.html" title="Next steps">intro_next_steps</docanchor>
  </compound>
</tagfile>
