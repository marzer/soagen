<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile doxygen_version="1.9.1">
  <compound kind="file">
    <name>shapes.hpp</name>
    <filename>shapes_8hpp.html</filename>
    <includes id="soagen_8hpp" name="soagen.hpp" local="no" imported="no">soagen.hpp</includes>
    <class kind="class">soagen_examples::boxes</class>
    <class kind="struct">soagen_examples::boxes::column_indices</class>
    <class kind="class">soagen_examples::spheres</class>
    <class kind="struct">soagen_examples::spheres::column_indices</class>
    <namespace>soagen_examples</namespace>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>namespacesoagen__examples.html</anchorfile>
      <anchor>a71024956d0e51c927994add8cc1e2607</anchor>
      <arglist>(boxes &amp;lhs, boxes &amp;rhs) noexcept(soagen::has_nothrow_swap_member&lt; boxes &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>namespacesoagen__examples.html</anchorfile>
      <anchor>aab282f4afd1e10b837e0f3a79d390e7d</anchor>
      <arglist>(spheres &amp;lhs, spheres &amp;rhs) noexcept(soagen::has_nothrow_swap_member&lt; spheres &gt;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>soagen.hpp</name>
    <filename>soagen_8hpp.html</filename>
  </compound>
  <compound kind="struct">
    <name>soagen::allocator</name>
    <filename>structsoagen_1_1allocator.html</filename>
    <member kind="typedef">
      <type>std::byte</type>
      <name>value_type</name>
      <anchorfile>structsoagen_1_1allocator.html</anchorfile>
      <anchor>aba2ca5c1dab7bb208da881989ca8eb69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::true_type</type>
      <name>is_always_equal</name>
      <anchorfile>structsoagen_1_1allocator.html</anchorfile>
      <anchor>a70693a30d83b4bf8257b7b5fdbc6c1c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::false_type</type>
      <name>propagate_on_container_copy_assignment</name>
      <anchorfile>structsoagen_1_1allocator.html</anchorfile>
      <anchor>a94f66255e4a892b9415c33beb4fe0df4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::false_type</type>
      <name>propagate_on_container_move_assignment</name>
      <anchorfile>structsoagen_1_1allocator.html</anchorfile>
      <anchor>af9f354372099aca15526fcb63143f827</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::false_type</type>
      <name>propagate_on_container_swap</name>
      <anchorfile>structsoagen_1_1allocator.html</anchorfile>
      <anchor>acd4166ae64119659c42b16e9b39d7185</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>value_type *</type>
      <name>allocate</name>
      <anchorfile>structsoagen_1_1allocator.html</anchorfile>
      <anchor>add1b597c98a840fbdc210811428787c8</anchor>
      <arglist>(size_t size, std::align_val_t alignment=std::align_val_t{ min_alignment })</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocate</name>
      <anchorfile>structsoagen_1_1allocator.html</anchorfile>
      <anchor>a922dad9dc86d8ad039273104c8ddaa65</anchor>
      <arglist>(value_type *ptr, [[maybe_unused]] size_t size) noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>min_alignment</name>
      <anchorfile>structsoagen_1_1allocator.html</anchorfile>
      <anchor>ac1f730d0e4d9368899dedb8f1eaf21b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>structsoagen_1_1allocator.html</anchorfile>
      <anchor>a1c923b7e894d9cf2a14dd278021e65f5</anchor>
      <arglist>(const allocator &amp;, const allocator &amp;) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>structsoagen_1_1allocator.html</anchorfile>
      <anchor>a1f0ba8d66cbc541d18e9934dc950c9fd</anchor>
      <arglist>(const allocator &amp;, const allocator &amp;) noexcept</arglist>
    </member>
    <docanchor file="structsoagen_1_1allocator.html" title="Customizing allocators for soagen">customizing_allocators</docanchor>
    <docanchor file="structsoagen_1_1allocator.html" title="Specifying a min_alignment">customizing_allocators_min_alignment</docanchor>
    <docanchor file="structsoagen_1_1allocator.html" title="Providing an alignment-aware allocate()">customizing_allocators_aligned_allocate</docanchor>
  </compound>
  <compound kind="class">
    <name>soagen_examples::boxes</name>
    <filename>classsoagen__examples_1_1boxes.html</filename>
    <class kind="struct">soagen_examples::boxes::column_indices</class>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a29f1c5654efc9df29ffdfa1a5a9e8834</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a059bea9fd6a5a08a0d1d43dbc6102c6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::allocator_type&lt; boxes &gt;</type>
      <name>allocator_type</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>ac179d16e650ebf4bf5474087723c2c21</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::table_type&lt; boxes &gt;</type>
      <name>table_type</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a16da318c6196dd364602e083b4766e81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::table_traits_type&lt; boxes &gt;</type>
      <name>table_traits</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>af3bb41814463e7fc6a5b267aea0c288d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename table_traits::template column&lt; Column &gt;</type>
      <name>column_traits</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a2e2a68c8e69f444cf0cfe819948fd1f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename column_traits&lt; Column &gt;::value_type</type>
      <name>column_type</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a180ee0cdd2773ae586ada54997d20fbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>boxes</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a2b70f146c25543c640ef70f4d1a18209</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>boxes</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>ac1410a07dabbe47de243b2a1f80b86dc</anchor>
      <arglist>(boxes &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>operator=</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>aa839e385896d6ef216c17347e4c4ac27</anchor>
      <arglist>(boxes &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>boxes</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a85c096ea88897c9e2c373b6f28ca9cb7</anchor>
      <arglist>(const boxes &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>operator=</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>aac0cf595f7d78435a3a1ce863faae04b</anchor>
      <arglist>(const boxes &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~boxes</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a33faecf3b261b05a495b2377b6d5ef76</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>boxes</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>adad8642c4f4fe08948e6deaa068fbcfc</anchor>
      <arglist>(const allocator_type &amp;alloc) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>boxes</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a6a0bfb8150ae1f7d885309e2aace0277</anchor>
      <arglist>(allocator_type &amp;&amp;alloc) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr allocator_type</type>
      <name>get_allocator</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a0d17bae2ea387ca09e63a8fd366be72f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>table_type &amp;</type>
      <name>table</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a74ed4e36b54d759e3585220c5487c515</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>table_type &amp;&amp;</type>
      <name>table</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>aa2945cb2593919fb1d6a67ffed037589</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const table_type &amp;</type>
      <name>table</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>abad0e819fb9d3781f4b45ca716fac41f</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a9965b6d7fe6746f9e905032eca4da331</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>aca03cb69fa93d73721f91405faa2c720</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>max_size</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>aa5f3e3bfc97ef96ea81d666153400c4e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>allocation_size</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a8b57ad8952f0af166075001756cbfefb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>reserve</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a9c4531bf6dbb3a9be43270a6011663e6</anchor>
      <arglist>(size_type new_cap) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().reserve(size_type{})))</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>capacity</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a25ea5f5acf1d309ca48b1cf79aee7c3c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>shrink_to_fit</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a582f7e8e23f6e8573c87c25486c8ea7f</anchor>
      <arglist>() noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().shrink_to_fit()))</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>clear</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a35a52edac21feade91a6173b83b36f95</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>adbd977ca5ee0e9c7bda51cd55f0e0c26</anchor>
      <arglist>(size_type pos) noexcept(soagen::has_nothrow_erase_member&lt; table_type, size_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>soagen::optional&lt; size_type &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a651d9d26980dd1ff5ae37d1bc1b75cab</anchor>
      <arglist>(size_type pos) noexcept(soagen::has_nothrow_unordered_erase_member&lt; table_type, size_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>pop_back</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>ad472fbe386474d2922ee5418439be0ff</anchor>
      <arglist>(size_type num=1) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().pop_back(size_type{})))</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>resize</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a80cc8473c6d7bcb76c964d4297f2975a</anchor>
      <arglist>(size_type new_size) noexcept(soagen::has_nothrow_resize_member&lt; table_type, size_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a064a7d95bbc3a950913ab31cba556aff</anchor>
      <arglist>(boxes &amp;other) noexcept(soagen::has_nothrow_swap_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>push_back</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>af87026fabec74472820b103aacbda813</anchor>
      <arglist>(column_traits&lt; 0 &gt;::param_type center_x, column_traits&lt; 1 &gt;::param_type center_y, column_traits&lt; 2 &gt;::param_type center_z, column_traits&lt; 3 &gt;::param_type extents_x=0.5f, column_traits&lt; 4 &gt;::param_type extents_y=0.5f, column_traits&lt; 5 &gt;::param_type extents_z=0.5f, column_traits&lt; 6 &gt;::param_type mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace_back(std::declval&lt; column_traits&lt; 0 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 1 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 2 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 3 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 4 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 5 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 6 &gt;::param_forward_type &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>push_back</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>ad18e38c2c203ffe6227d429eb65c4db9</anchor>
      <arglist>(column_traits&lt; 0 &gt;::rvalue_type center_x, column_traits&lt; 1 &gt;::rvalue_type center_y, column_traits&lt; 2 &gt;::rvalue_type center_z, column_traits&lt; 3 &gt;::rvalue_type extents_x=0.5f, column_traits&lt; 4 &gt;::rvalue_type extents_y=0.5f, column_traits&lt; 5 &gt;::rvalue_type extents_z=0.5f, column_traits&lt; 6 &gt;::rvalue_type mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace_back(std::declval&lt; column_traits&lt; 0 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 1 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 2 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 3 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 4 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 5 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 6 &gt;::rvalue_forward_type &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>push_back</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a2fec5674ba28a4c07957ed594c7ab663</anchor>
      <arglist>(const soagen::row&lt; Table, Columns... &gt; &amp;row_) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace_back(std::declval&lt; const soagen::row&lt; Table, Columns... &gt; &amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>emplace_back</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>aac05ff2a745c88df82fba1b199422985</anchor>
      <arglist>(CenterX &amp;&amp;center_x, CenterY &amp;&amp;center_y, CenterZ &amp;&amp;center_z, ExtentsX &amp;&amp;extents_x=0.5f, ExtentsY &amp;&amp;extents_y=0.5f, ExtentsZ &amp;&amp;extents_z=0.5f, Mass &amp;&amp;mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace_back(std::declval&lt; CenterX &amp;&amp; &gt;(), std::declval&lt; CenterY &amp;&amp; &gt;(), std::declval&lt; CenterZ &amp;&amp; &gt;(), std::declval&lt; ExtentsX &amp;&amp; &gt;(), std::declval&lt; ExtentsY &amp;&amp; &gt;(), std::declval&lt; ExtentsZ &amp;&amp; &gt;(), std::declval&lt; Mass &amp;&amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>emplace_back</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>aa4effa3754f7857f871219727a195365</anchor>
      <arglist>(const soagen::row&lt; Table, Columns... &gt; &amp;row_) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace_back(std::declval&lt; const soagen::row&lt; Table, Columns... &gt; &amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>insert</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>addaaaae1a9c38ce7bdeb3b78a85834e3</anchor>
      <arglist>(size_type index_, column_traits&lt; 0 &gt;::param_type center_x, column_traits&lt; 1 &gt;::param_type center_y, column_traits&lt; 2 &gt;::param_type center_z, column_traits&lt; 3 &gt;::param_type extents_x=0.5f, column_traits&lt; 4 &gt;::param_type extents_y=0.5f, column_traits&lt; 5 &gt;::param_type extents_z=0.5f, column_traits&lt; 6 &gt;::param_type mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace(size_type{}, std::declval&lt; column_traits&lt; 0 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 1 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 2 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 3 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 4 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 5 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 6 &gt;::param_forward_type &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>insert</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a5259d2a539dc8af0181b894bd54f5aad</anchor>
      <arglist>(size_type index_, column_traits&lt; 0 &gt;::rvalue_type center_x, column_traits&lt; 1 &gt;::rvalue_type center_y, column_traits&lt; 2 &gt;::rvalue_type center_z, column_traits&lt; 3 &gt;::rvalue_type extents_x=0.5f, column_traits&lt; 4 &gt;::rvalue_type extents_y=0.5f, column_traits&lt; 5 &gt;::rvalue_type extents_z=0.5f, column_traits&lt; 6 &gt;::rvalue_type mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace(size_type{}, std::declval&lt; column_traits&lt; 0 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 1 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 2 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 3 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 4 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 5 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 6 &gt;::rvalue_forward_type &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>insert</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a2431c1a83e86bcb6802677e2c6af3274</anchor>
      <arglist>(size_type index_, const soagen::row&lt; Table, Columns... &gt; &amp;row_) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;() .emplace(size_type{}, std::declval&lt; const soagen::row&lt; Table, Columns... &gt; &amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>emplace</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>aaba3b7755e6e525c2223268e087608dc</anchor>
      <arglist>(size_type index_, CenterX &amp;&amp;center_x, CenterY &amp;&amp;center_y, CenterZ &amp;&amp;center_z, ExtentsX &amp;&amp;extents_x=0.5f, ExtentsY &amp;&amp;extents_y=0.5f, ExtentsZ &amp;&amp;extents_z=0.5f, Mass &amp;&amp;mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace(size_type{}, std::declval&lt; CenterX &amp;&amp; &gt;(), std::declval&lt; CenterY &amp;&amp; &gt;(), std::declval&lt; CenterZ &amp;&amp; &gt;(), std::declval&lt; ExtentsX &amp;&amp; &gt;(), std::declval&lt; ExtentsY &amp;&amp; &gt;(), std::declval&lt; ExtentsZ &amp;&amp; &gt;(), std::declval&lt; Mass &amp;&amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>emplace</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a98a1e836c840c939f9ff8753fb9e1041</anchor>
      <arglist>(size_type index_, const soagen::row&lt; Table, Columns... &gt; &amp;row_) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;() .emplace(size_type{}, std::declval&lt; const soagen::row&lt; Table, Columns... &gt; &amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::byte *</type>
      <name>data</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a559a202dbb008845a7ef4e1932494d49</anchor>
      <arglist>() noexcept(soagen::has_nothrow_data_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const std::byte *const</type>
      <name>data</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a97804cb5d65275c321d0400da28c523d</anchor>
      <arglist>() noexcept(soagen::has_nothrow_data_member&lt; const table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>column_type&lt; Column &gt; *</type>
      <name>column</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a7a294c461e1f1df7d43658bc319e8385</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::add_const_t&lt; column_type&lt; Column &gt; &gt; *</type>
      <name>column</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>ad247f77025bb424ab1aac0d2146d42ce</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float *</type>
      <name>center_x</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>ab9a427f380c56377a4861c85e083d7ec</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const float *</type>
      <name>center_x</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a69259648dd2d74100e9c39381c622203</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float *</type>
      <name>center_y</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a6ecca1eefdd58798fd5e05bad3485d70</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const float *</type>
      <name>center_y</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a71002a4a234fba093ea2428a10923c4f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float *</type>
      <name>center_z</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a8ea2adf25e174cd07eb84fc5a87a2f4c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const float *</type>
      <name>center_z</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>ae2a0582fd6ccc1bdc48a6ed67dd8bb70</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float *</type>
      <name>extents_x</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>afd50c7b37e341095426fe33b09af0161</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const float *</type>
      <name>extents_x</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a3ab32e1b873a01d80a3ee8680687b7df</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float *</type>
      <name>extents_y</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a6ac3eb2e1b20fa3ad3b1e8de92ba59fb</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const float *</type>
      <name>extents_y</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a40a6b908b02deacdc6e90f3308d5b016</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float *</type>
      <name>extents_z</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>ac8423d2d7c6c18d440b62bfc52c7535e</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const float *</type>
      <name>extents_z</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>ac3ee2df101eeca8932e0745272595730</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float *</type>
      <name>mass</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a35de49a743158ae96efc94b55766dd82</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const float *</type>
      <name>mass</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a02f72600c3bfd352a793a35c132a8b3d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>for_each_column</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a75bb7b588f445c7a06b896ed2dadd80f</anchor>
      <arglist>(Func &amp;&amp;func) noexcept(table_traits::for_each_column_ptr_nothrow_invocable&lt; Func &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>for_each_column</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a007802f82b7d620e45c50b88e52acddd</anchor>
      <arglist>(Func &amp;&amp;func) const noexcept(table_traits::for_each_column_ptr_nothrow_invocable&lt; Func &amp;&amp;, true &gt;)</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; boxes, Columns... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>ac080b9e57a65d74f59ef39fddef48709</anchor>
      <arglist>(size_type index) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; boxes &amp;&amp;, Columns... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a65bf6f2d311c6f9a96f2a4fcd6848bb8</anchor>
      <arglist>(size_type index) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; const boxes, Columns... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>ab0a3fd1da31fc5a91f128cf5637b65d5</anchor>
      <arglist>(size_type index) const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; const boxes &amp;&amp;, Columns... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a298a984cb0ff7a528f27026731419c5b</anchor>
      <arglist>(size_type index) const &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; boxes &gt;</type>
      <name>operator[]</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>afb4303b3bcb70cfd17d91b6472c004a8</anchor>
      <arglist>(size_type index) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; boxes &amp;&amp; &gt;</type>
      <name>operator[]</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a1c6a6fe52f9ca604b03bed851b8afb38</anchor>
      <arglist>(size_type index) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; const boxes &gt;</type>
      <name>operator[]</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a8651e5b8c9f2de74ee79208355119749</anchor>
      <arglist>(size_type index) const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; const boxes &amp;&amp; &gt;</type>
      <name>operator[]</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a2ea85cae2da37c9281349c7dcda3ef6d</anchor>
      <arglist>(size_type index) const &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; boxes &gt;</type>
      <name>at</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>ac9c643159d581a3def2f78f047e4a409</anchor>
      <arglist>(size_type index) &amp;</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; boxes &amp;&amp; &gt;</type>
      <name>at</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a40f6d7b178b63ae51247005fa9e3db1d</anchor>
      <arglist>(size_type index) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; const boxes &gt;</type>
      <name>at</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a4443275c4f142130117cedc2b0bf6311</anchor>
      <arglist>(size_type index) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; const boxes &amp;&amp; &gt;</type>
      <name>at</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a36d45766af3415a45cb6668be16dc03d</anchor>
      <arglist>(size_type index) const &amp;&amp;</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>column_count</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a931bf0cdf3c4e7ee2e33255798b215e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_type</type>
      <name>aligned_stride</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>ae3012eefa9ac8c30da933f5f09971b5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto &amp;</type>
      <name>column_name</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a6c5bd167f28576dfca490d2eedf41516</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>af1de6b8326125457c073d8d439964d5d</anchor>
      <arglist>(const boxes &amp;lhs, const boxes &amp;rhs) noexcept(soagen::is_nothrow_equality_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a1afe9819ec24b878abee954830e1978c</anchor>
      <arglist>(const boxes &amp;lhs, const boxes &amp;rhs) noexcept(soagen::is_nothrow_equality_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a7f151b8aef59afec875f119f846ac342</anchor>
      <arglist>(const boxes &amp;lhs, const boxes &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a97f21f38b98f2fdaf973393825a37a86</anchor>
      <arglist>(const boxes &amp;lhs, const boxes &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>ac9bfe5aeaefee1ceb1bd77ee6b43b7e0</anchor>
      <arglist>(const boxes &amp;lhs, const boxes &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a225cdcffa1c29725a6600e20e1cf0d7a</anchor>
      <arglist>(const boxes &amp;lhs, const boxes &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>table_type &amp;</type>
      <name>table</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a74ed4e36b54d759e3585220c5487c515</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>table_type &amp;&amp;</type>
      <name>table</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>aa2945cb2593919fb1d6a67ffed037589</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const table_type &amp;</type>
      <name>table</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>abad0e819fb9d3781f4b45ca716fac41f</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a9965b6d7fe6746f9e905032eca4da331</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>aca03cb69fa93d73721f91405faa2c720</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>max_size</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>aa5f3e3bfc97ef96ea81d666153400c4e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>allocation_size</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a8b57ad8952f0af166075001756cbfefb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>reserve</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a9c4531bf6dbb3a9be43270a6011663e6</anchor>
      <arglist>(size_type new_cap) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().reserve(size_type{})))</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>capacity</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a25ea5f5acf1d309ca48b1cf79aee7c3c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>shrink_to_fit</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a582f7e8e23f6e8573c87c25486c8ea7f</anchor>
      <arglist>() noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().shrink_to_fit()))</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>clear</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a35a52edac21feade91a6173b83b36f95</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>adbd977ca5ee0e9c7bda51cd55f0e0c26</anchor>
      <arglist>(size_type pos) noexcept(soagen::has_nothrow_erase_member&lt; table_type, size_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>soagen::optional&lt; size_type &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a651d9d26980dd1ff5ae37d1bc1b75cab</anchor>
      <arglist>(size_type pos) noexcept(soagen::has_nothrow_unordered_erase_member&lt; table_type, size_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>pop_back</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>ad472fbe386474d2922ee5418439be0ff</anchor>
      <arglist>(size_type num=1) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().pop_back(size_type{})))</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>resize</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a80cc8473c6d7bcb76c964d4297f2975a</anchor>
      <arglist>(size_type new_size) noexcept(soagen::has_nothrow_resize_member&lt; table_type, size_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a064a7d95bbc3a950913ab31cba556aff</anchor>
      <arglist>(boxes &amp;other) noexcept(soagen::has_nothrow_swap_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>push_back</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>af87026fabec74472820b103aacbda813</anchor>
      <arglist>(column_traits&lt; 0 &gt;::param_type center_x, column_traits&lt; 1 &gt;::param_type center_y, column_traits&lt; 2 &gt;::param_type center_z, column_traits&lt; 3 &gt;::param_type extents_x=0.5f, column_traits&lt; 4 &gt;::param_type extents_y=0.5f, column_traits&lt; 5 &gt;::param_type extents_z=0.5f, column_traits&lt; 6 &gt;::param_type mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace_back(std::declval&lt; column_traits&lt; 0 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 1 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 2 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 3 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 4 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 5 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 6 &gt;::param_forward_type &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>push_back</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>ad18e38c2c203ffe6227d429eb65c4db9</anchor>
      <arglist>(column_traits&lt; 0 &gt;::rvalue_type center_x, column_traits&lt; 1 &gt;::rvalue_type center_y, column_traits&lt; 2 &gt;::rvalue_type center_z, column_traits&lt; 3 &gt;::rvalue_type extents_x=0.5f, column_traits&lt; 4 &gt;::rvalue_type extents_y=0.5f, column_traits&lt; 5 &gt;::rvalue_type extents_z=0.5f, column_traits&lt; 6 &gt;::rvalue_type mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace_back(std::declval&lt; column_traits&lt; 0 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 1 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 2 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 3 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 4 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 5 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 6 &gt;::rvalue_forward_type &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>push_back</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a2fec5674ba28a4c07957ed594c7ab663</anchor>
      <arglist>(const soagen::row&lt; Table, Columns... &gt; &amp;row_) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace_back(std::declval&lt; const soagen::row&lt; Table, Columns... &gt; &amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>emplace_back</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>aac05ff2a745c88df82fba1b199422985</anchor>
      <arglist>(CenterX &amp;&amp;center_x, CenterY &amp;&amp;center_y, CenterZ &amp;&amp;center_z, ExtentsX &amp;&amp;extents_x=0.5f, ExtentsY &amp;&amp;extents_y=0.5f, ExtentsZ &amp;&amp;extents_z=0.5f, Mass &amp;&amp;mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace_back(std::declval&lt; CenterX &amp;&amp; &gt;(), std::declval&lt; CenterY &amp;&amp; &gt;(), std::declval&lt; CenterZ &amp;&amp; &gt;(), std::declval&lt; ExtentsX &amp;&amp; &gt;(), std::declval&lt; ExtentsY &amp;&amp; &gt;(), std::declval&lt; ExtentsZ &amp;&amp; &gt;(), std::declval&lt; Mass &amp;&amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>emplace_back</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>aa4effa3754f7857f871219727a195365</anchor>
      <arglist>(const soagen::row&lt; Table, Columns... &gt; &amp;row_) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace_back(std::declval&lt; const soagen::row&lt; Table, Columns... &gt; &amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>insert</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>addaaaae1a9c38ce7bdeb3b78a85834e3</anchor>
      <arglist>(size_type index_, column_traits&lt; 0 &gt;::param_type center_x, column_traits&lt; 1 &gt;::param_type center_y, column_traits&lt; 2 &gt;::param_type center_z, column_traits&lt; 3 &gt;::param_type extents_x=0.5f, column_traits&lt; 4 &gt;::param_type extents_y=0.5f, column_traits&lt; 5 &gt;::param_type extents_z=0.5f, column_traits&lt; 6 &gt;::param_type mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace(size_type{}, std::declval&lt; column_traits&lt; 0 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 1 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 2 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 3 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 4 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 5 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 6 &gt;::param_forward_type &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>insert</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a5259d2a539dc8af0181b894bd54f5aad</anchor>
      <arglist>(size_type index_, column_traits&lt; 0 &gt;::rvalue_type center_x, column_traits&lt; 1 &gt;::rvalue_type center_y, column_traits&lt; 2 &gt;::rvalue_type center_z, column_traits&lt; 3 &gt;::rvalue_type extents_x=0.5f, column_traits&lt; 4 &gt;::rvalue_type extents_y=0.5f, column_traits&lt; 5 &gt;::rvalue_type extents_z=0.5f, column_traits&lt; 6 &gt;::rvalue_type mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace(size_type{}, std::declval&lt; column_traits&lt; 0 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 1 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 2 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 3 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 4 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 5 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 6 &gt;::rvalue_forward_type &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>insert</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a2431c1a83e86bcb6802677e2c6af3274</anchor>
      <arglist>(size_type index_, const soagen::row&lt; Table, Columns... &gt; &amp;row_) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;() .emplace(size_type{}, std::declval&lt; const soagen::row&lt; Table, Columns... &gt; &amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>emplace</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>aaba3b7755e6e525c2223268e087608dc</anchor>
      <arglist>(size_type index_, CenterX &amp;&amp;center_x, CenterY &amp;&amp;center_y, CenterZ &amp;&amp;center_z, ExtentsX &amp;&amp;extents_x=0.5f, ExtentsY &amp;&amp;extents_y=0.5f, ExtentsZ &amp;&amp;extents_z=0.5f, Mass &amp;&amp;mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace(size_type{}, std::declval&lt; CenterX &amp;&amp; &gt;(), std::declval&lt; CenterY &amp;&amp; &gt;(), std::declval&lt; CenterZ &amp;&amp; &gt;(), std::declval&lt; ExtentsX &amp;&amp; &gt;(), std::declval&lt; ExtentsY &amp;&amp; &gt;(), std::declval&lt; ExtentsZ &amp;&amp; &gt;(), std::declval&lt; Mass &amp;&amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>emplace</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a98a1e836c840c939f9ff8753fb9e1041</anchor>
      <arglist>(size_type index_, const soagen::row&lt; Table, Columns... &gt; &amp;row_) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;() .emplace(size_type{}, std::declval&lt; const soagen::row&lt; Table, Columns... &gt; &amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::byte *</type>
      <name>data</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a559a202dbb008845a7ef4e1932494d49</anchor>
      <arglist>() noexcept(soagen::has_nothrow_data_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const std::byte *const</type>
      <name>data</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a97804cb5d65275c321d0400da28c523d</anchor>
      <arglist>() noexcept(soagen::has_nothrow_data_member&lt; const table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>column_type&lt; Column &gt; *</type>
      <name>column</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a7a294c461e1f1df7d43658bc319e8385</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::add_const_t&lt; column_type&lt; Column &gt; &gt; *</type>
      <name>column</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>ad247f77025bb424ab1aac0d2146d42ce</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float *</type>
      <name>center_x</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>ab9a427f380c56377a4861c85e083d7ec</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const float *</type>
      <name>center_x</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a69259648dd2d74100e9c39381c622203</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float *</type>
      <name>center_y</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a6ecca1eefdd58798fd5e05bad3485d70</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const float *</type>
      <name>center_y</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a71002a4a234fba093ea2428a10923c4f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float *</type>
      <name>center_z</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a8ea2adf25e174cd07eb84fc5a87a2f4c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const float *</type>
      <name>center_z</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>ae2a0582fd6ccc1bdc48a6ed67dd8bb70</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float *</type>
      <name>extents_x</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>afd50c7b37e341095426fe33b09af0161</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const float *</type>
      <name>extents_x</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a3ab32e1b873a01d80a3ee8680687b7df</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float *</type>
      <name>extents_y</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a6ac3eb2e1b20fa3ad3b1e8de92ba59fb</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const float *</type>
      <name>extents_y</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a40a6b908b02deacdc6e90f3308d5b016</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float *</type>
      <name>extents_z</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>ac8423d2d7c6c18d440b62bfc52c7535e</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const float *</type>
      <name>extents_z</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>ac3ee2df101eeca8932e0745272595730</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float *</type>
      <name>mass</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a35de49a743158ae96efc94b55766dd82</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const float *</type>
      <name>mass</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a02f72600c3bfd352a793a35c132a8b3d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>for_each_column</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a75bb7b588f445c7a06b896ed2dadd80f</anchor>
      <arglist>(Func &amp;&amp;func) noexcept(table_traits::for_each_column_ptr_nothrow_invocable&lt; Func &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>for_each_column</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a007802f82b7d620e45c50b88e52acddd</anchor>
      <arglist>(Func &amp;&amp;func) const noexcept(table_traits::for_each_column_ptr_nothrow_invocable&lt; Func &amp;&amp;, true &gt;)</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; boxes, Columns... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>ac080b9e57a65d74f59ef39fddef48709</anchor>
      <arglist>(size_type index) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; boxes &amp;&amp;, Columns... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a65bf6f2d311c6f9a96f2a4fcd6848bb8</anchor>
      <arglist>(size_type index) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; const boxes, Columns... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>ab0a3fd1da31fc5a91f128cf5637b65d5</anchor>
      <arglist>(size_type index) const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; const boxes &amp;&amp;, Columns... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a298a984cb0ff7a528f27026731419c5b</anchor>
      <arglist>(size_type index) const &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; boxes &gt;</type>
      <name>operator[]</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>afb4303b3bcb70cfd17d91b6472c004a8</anchor>
      <arglist>(size_type index) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; boxes &amp;&amp; &gt;</type>
      <name>operator[]</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a1c6a6fe52f9ca604b03bed851b8afb38</anchor>
      <arglist>(size_type index) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; const boxes &gt;</type>
      <name>operator[]</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a8651e5b8c9f2de74ee79208355119749</anchor>
      <arglist>(size_type index) const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; const boxes &amp;&amp; &gt;</type>
      <name>operator[]</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a2ea85cae2da37c9281349c7dcda3ef6d</anchor>
      <arglist>(size_type index) const &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; boxes &gt;</type>
      <name>at</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>ac9c643159d581a3def2f78f047e4a409</anchor>
      <arglist>(size_type index) &amp;</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; boxes &amp;&amp; &gt;</type>
      <name>at</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a40f6d7b178b63ae51247005fa9e3db1d</anchor>
      <arglist>(size_type index) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; const boxes &gt;</type>
      <name>at</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a4443275c4f142130117cedc2b0bf6311</anchor>
      <arglist>(size_type index) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; const boxes &amp;&amp; &gt;</type>
      <name>at</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a36d45766af3415a45cb6668be16dc03d</anchor>
      <arglist>(size_type index) const &amp;&amp;</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>af1de6b8326125457c073d8d439964d5d</anchor>
      <arglist>(const boxes &amp;lhs, const boxes &amp;rhs) noexcept(soagen::is_nothrow_equality_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a1afe9819ec24b878abee954830e1978c</anchor>
      <arglist>(const boxes &amp;lhs, const boxes &amp;rhs) noexcept(soagen::is_nothrow_equality_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a7f151b8aef59afec875f119f846ac342</anchor>
      <arglist>(const boxes &amp;lhs, const boxes &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a97f21f38b98f2fdaf973393825a37a86</anchor>
      <arglist>(const boxes &amp;lhs, const boxes &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>ac9bfe5aeaefee1ceb1bd77ee6b43b7e0</anchor>
      <arglist>(const boxes &amp;lhs, const boxes &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classsoagen__examples_1_1boxes.html</anchorfile>
      <anchor>a225cdcffa1c29725a6600e20e1cf0d7a</anchor>
      <arglist>(const boxes &amp;lhs, const boxes &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>soagen_examples::boxes::column_indices</name>
    <filename>structsoagen__examples_1_1boxes_1_1column__indices.html</filename>
  </compound>
  <compound kind="struct">
    <name>soagen_examples::spheres::column_indices</name>
    <filename>structsoagen__examples_1_1spheres_1_1column__indices.html</filename>
  </compound>
  <compound kind="struct">
    <name>soagen::column_traits</name>
    <filename>structsoagen_1_1column__traits.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>Align</templarg>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>storage_type</name>
      <anchorfile>structsoagen_1_1column__traits.html</anchorfile>
      <anchor>af416a53e25bcef17f52be0abfbcf9fcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ValueType</type>
      <name>value_type</name>
      <anchorfile>structsoagen_1_1column__traits.html</anchorfile>
      <anchor>a238c18b496954da0e2bb82b05e69932a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParamType</type>
      <name>param_type</name>
      <anchorfile>structsoagen_1_1column__traits.html</anchorfile>
      <anchor>ab3b6d538b407f0bb20a90efe52020a6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::rvalue_type&lt; param_type &gt;</type>
      <name>rvalue_type</name>
      <anchorfile>structsoagen_1_1column__traits.html</anchorfile>
      <anchor>acb98810256d18dc27a90593af64af875</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>alignment</name>
      <anchorfile>structsoagen_1_1column__traits.html</anchorfile>
      <anchor>a2fb54b25bbecffbaa41b3478d3be1275</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>aligned_stride</name>
      <anchorfile>structsoagen_1_1column__traits.html</anchorfile>
      <anchor>ae470a65843e286e65729c9855f41118c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>soagen::emplacer</name>
    <filename>structsoagen_1_1emplacer.html</filename>
    <templarg>Args</templarg>
  </compound>
  <compound kind="struct">
    <name>soagen::row</name>
    <filename>structsoagen_1_1row.html</filename>
    <templarg></templarg>
    <templarg>Columns</templarg>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>structsoagen_1_1row.html</anchorfile>
      <anchor>a7869c499e91447116e9ef958ef62a001</anchor>
      <arglist>(const row &amp;lhs, const row&lt; T, Columns... &gt; &amp;rhs) noexcept(table_traits_type&lt; remove_cvref&lt; Table &gt;&gt;::all_nothrow_equality_comparable)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>structsoagen_1_1row.html</anchorfile>
      <anchor>a6276c1071974968c161afab2b4788c0a</anchor>
      <arglist>(const row &amp;lhs, const row&lt; T, Columns... &gt; &amp;rhs) noexcept(table_traits_type&lt; remove_cvref&lt; Table &gt;&gt;::all_nothrow_equality_comparable)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>structsoagen_1_1row.html</anchorfile>
      <anchor>aeb90cd3b79c25e36c31fd7c841d345b3</anchor>
      <arglist>(const row &amp;lhs, const row&lt; T, Columns... &gt; &amp;rhs) noexcept(table_traits_type&lt; remove_cvref&lt; Table &gt;&gt;::all_nothrow_less_than_comparable)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>structsoagen_1_1row.html</anchorfile>
      <anchor>a96f5e7b7e697a1149e49a9fe974cae14</anchor>
      <arglist>(const row &amp;lhs, const row&lt; T, Columns... &gt; &amp;rhs) noexcept(table_traits_type&lt; remove_cvref&lt; Table &gt;&gt;::all_nothrow_less_than_comparable)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>structsoagen_1_1row.html</anchorfile>
      <anchor>a7eadb12421d84758725e918b457b098a</anchor>
      <arglist>(const row &amp;lhs, const row&lt; T, Columns... &gt; &amp;rhs) noexcept(table_traits_type&lt; remove_cvref&lt; Table &gt;&gt;::all_nothrow_less_than_comparable)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>structsoagen_1_1row.html</anchorfile>
      <anchor>ac3e2ca5f629b5f149eba5ccd1b92f549</anchor>
      <arglist>(const row &amp;lhs, const row&lt; T, Columns... &gt; &amp;rhs) noexcept(table_traits_type&lt; remove_cvref&lt; Table &gt;&gt;::all_nothrow_less_than_comparable)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>structsoagen_1_1row.html</anchorfile>
      <anchor>a7869c499e91447116e9ef958ef62a001</anchor>
      <arglist>(const row &amp;lhs, const row&lt; T, Columns... &gt; &amp;rhs) noexcept(table_traits_type&lt; remove_cvref&lt; Table &gt;&gt;::all_nothrow_equality_comparable)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>structsoagen_1_1row.html</anchorfile>
      <anchor>a6276c1071974968c161afab2b4788c0a</anchor>
      <arglist>(const row &amp;lhs, const row&lt; T, Columns... &gt; &amp;rhs) noexcept(table_traits_type&lt; remove_cvref&lt; Table &gt;&gt;::all_nothrow_equality_comparable)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>structsoagen_1_1row.html</anchorfile>
      <anchor>aeb90cd3b79c25e36c31fd7c841d345b3</anchor>
      <arglist>(const row &amp;lhs, const row&lt; T, Columns... &gt; &amp;rhs) noexcept(table_traits_type&lt; remove_cvref&lt; Table &gt;&gt;::all_nothrow_less_than_comparable)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>structsoagen_1_1row.html</anchorfile>
      <anchor>a96f5e7b7e697a1149e49a9fe974cae14</anchor>
      <arglist>(const row &amp;lhs, const row&lt; T, Columns... &gt; &amp;rhs) noexcept(table_traits_type&lt; remove_cvref&lt; Table &gt;&gt;::all_nothrow_less_than_comparable)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>structsoagen_1_1row.html</anchorfile>
      <anchor>a7eadb12421d84758725e918b457b098a</anchor>
      <arglist>(const row &amp;lhs, const row&lt; T, Columns... &gt; &amp;rhs) noexcept(table_traits_type&lt; remove_cvref&lt; Table &gt;&gt;::all_nothrow_less_than_comparable)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>structsoagen_1_1row.html</anchorfile>
      <anchor>ac3e2ca5f629b5f149eba5ccd1b92f549</anchor>
      <arglist>(const row &amp;lhs, const row&lt; T, Columns... &gt; &amp;rhs) noexcept(table_traits_type&lt; remove_cvref&lt; Table &gt;&gt;::all_nothrow_less_than_comparable)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>soagen_examples::spheres</name>
    <filename>classsoagen__examples_1_1spheres.html</filename>
    <class kind="struct">soagen_examples::spheres::column_indices</class>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a3c704208dd3d6d3dc4eaca7751df3c32</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a65135875bb620a96f9ab552009ec1f7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::allocator_type&lt; spheres &gt;</type>
      <name>allocator_type</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a3f92d6cf730a458b76cebad73584f02e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::table_type&lt; spheres &gt;</type>
      <name>table_type</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>ade121b53ab7dcad1b9cb3c3f829e7072</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::table_traits_type&lt; spheres &gt;</type>
      <name>table_traits</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a868244dd0dcc3045f8f4e5787a123527</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename table_traits::template column&lt; Column &gt;</type>
      <name>column_traits</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a6cc7f0adcf6bd183eef2c888b62df9df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename column_traits&lt; Column &gt;::value_type</type>
      <name>column_type</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a00574db8c04ba0325a9bb8df8094d02e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>spheres</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a62ee13be42d7b41f40195998946bac6b</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>spheres</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a33b1e8bc31506dfc145aa919e7935854</anchor>
      <arglist>(spheres &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>operator=</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a8cb8298803a390c86bb79c9a3b049695</anchor>
      <arglist>(spheres &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>spheres</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>adb4048443d5367f9ccbea776926f8a8d</anchor>
      <arglist>(const spheres &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>operator=</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a9e960a8d137ef2cb206c49778321dc50</anchor>
      <arglist>(const spheres &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~spheres</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a8cd3780f24febd5cb6aed54be2729b49</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>spheres</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a94a4e5c885de422d1379b12c65f5daea</anchor>
      <arglist>(const allocator_type &amp;alloc) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>spheres</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a413c7cbfcbe1bb0aa2a2c9db7f9e591f</anchor>
      <arglist>(allocator_type &amp;&amp;alloc) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr allocator_type</type>
      <name>get_allocator</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>ada2935e08e74df54b9a0135142b951d9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>table_type &amp;</type>
      <name>table</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a611ee9e9718ad1543fc27a3f2d0dda47</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>table_type &amp;&amp;</type>
      <name>table</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a9bfa763ff104951dc273e1d289207df2</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const table_type &amp;</type>
      <name>table</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>ae22f2e09934a260af301ac32f34e5936</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a296298c5d8ba04893da9e0178931a18e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>ab67a356405267c33671c65950c30ec7b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>max_size</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a5aad5c8bb88eb1b1c205dbe6a9daadc3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>allocation_size</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a6cf32e0fb88e1551e90e36081e62520a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>reserve</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a24651d6fc36150216e136a0cdeef9922</anchor>
      <arglist>(size_type new_cap) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().reserve(size_type{})))</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>capacity</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>ab4a788161559f144ecb5ea5058fa5b65</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>shrink_to_fit</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>aa4909ebbc8c1ac1a5225bcf33a920d23</anchor>
      <arglist>() noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().shrink_to_fit()))</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>clear</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a4653ea6960c9ff7032d55afa5216ed99</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a402ca772af05771754232fc55ac8d8a0</anchor>
      <arglist>(size_type pos) noexcept(soagen::has_nothrow_erase_member&lt; table_type, size_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>soagen::optional&lt; size_type &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a7575f89b2cbc7d777047dee3a55c1dae</anchor>
      <arglist>(size_type pos) noexcept(soagen::has_nothrow_unordered_erase_member&lt; table_type, size_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>pop_back</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a02d3832c7d99ecc1f1ad0ca247cb5de1</anchor>
      <arglist>(size_type num=1) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().pop_back(size_type{})))</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>resize</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a0cb42143bfa2f4bf4fc53d067fe29036</anchor>
      <arglist>(size_type new_size) noexcept(soagen::has_nothrow_resize_member&lt; table_type, size_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a60b947863498a30f549c25b5a24c9282</anchor>
      <arglist>(spheres &amp;other) noexcept(soagen::has_nothrow_swap_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>push_back</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>aabee042c412407bab06d52b17faed66b</anchor>
      <arglist>(column_traits&lt; 0 &gt;::param_type center_x, column_traits&lt; 1 &gt;::param_type center_y, column_traits&lt; 2 &gt;::param_type center_z, column_traits&lt; 3 &gt;::param_type radius=0.5f, column_traits&lt; 4 &gt;::param_type mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace_back(std::declval&lt; column_traits&lt; 0 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 1 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 2 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 3 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 4 &gt;::param_forward_type &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>push_back</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a6e8170825da90806d2fa89bea50468cc</anchor>
      <arglist>(column_traits&lt; 0 &gt;::rvalue_type center_x, column_traits&lt; 1 &gt;::rvalue_type center_y, column_traits&lt; 2 &gt;::rvalue_type center_z, column_traits&lt; 3 &gt;::rvalue_type radius=0.5f, column_traits&lt; 4 &gt;::rvalue_type mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace_back(std::declval&lt; column_traits&lt; 0 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 1 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 2 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 3 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 4 &gt;::rvalue_forward_type &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>push_back</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>ac6b3c8ac3de2421a9bcb6a799fd3de80</anchor>
      <arglist>(const soagen::row&lt; Table, Columns... &gt; &amp;row_) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace_back(std::declval&lt; const soagen::row&lt; Table, Columns... &gt; &amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>emplace_back</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>aa5e48088b9be468a583375ad124f15e4</anchor>
      <arglist>(CenterX &amp;&amp;center_x, CenterY &amp;&amp;center_y, CenterZ &amp;&amp;center_z, Radius &amp;&amp;radius=0.5f, Mass &amp;&amp;mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace_back(std::declval&lt; CenterX &amp;&amp; &gt;(), std::declval&lt; CenterY &amp;&amp; &gt;(), std::declval&lt; CenterZ &amp;&amp; &gt;(), std::declval&lt; Radius &amp;&amp; &gt;(), std::declval&lt; Mass &amp;&amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>emplace_back</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a93de928a304e83fd3c8f4054c80e31d1</anchor>
      <arglist>(const soagen::row&lt; Table, Columns... &gt; &amp;row_) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace_back(std::declval&lt; const soagen::row&lt; Table, Columns... &gt; &amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>insert</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a4e4475d7d69e7e972dd52cb13d156a8e</anchor>
      <arglist>(size_type index_, column_traits&lt; 0 &gt;::param_type center_x, column_traits&lt; 1 &gt;::param_type center_y, column_traits&lt; 2 &gt;::param_type center_z, column_traits&lt; 3 &gt;::param_type radius=0.5f, column_traits&lt; 4 &gt;::param_type mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace(size_type{}, std::declval&lt; column_traits&lt; 0 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 1 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 2 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 3 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 4 &gt;::param_forward_type &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>insert</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a98a633e71d8a640aa8f40eb99a45d5aa</anchor>
      <arglist>(size_type index_, column_traits&lt; 0 &gt;::rvalue_type center_x, column_traits&lt; 1 &gt;::rvalue_type center_y, column_traits&lt; 2 &gt;::rvalue_type center_z, column_traits&lt; 3 &gt;::rvalue_type radius=0.5f, column_traits&lt; 4 &gt;::rvalue_type mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace(size_type{}, std::declval&lt; column_traits&lt; 0 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 1 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 2 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 3 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 4 &gt;::rvalue_forward_type &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>insert</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>ad06a3bdaeec119ca6a194aad71e15d15</anchor>
      <arglist>(size_type index_, const soagen::row&lt; Table, Columns... &gt; &amp;row_) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;() .emplace(size_type{}, std::declval&lt; const soagen::row&lt; Table, Columns... &gt; &amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>emplace</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a595dfabb6a5434d1831742b3de78393d</anchor>
      <arglist>(size_type index_, CenterX &amp;&amp;center_x, CenterY &amp;&amp;center_y, CenterZ &amp;&amp;center_z, Radius &amp;&amp;radius=0.5f, Mass &amp;&amp;mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace(size_type{}, std::declval&lt; CenterX &amp;&amp; &gt;(), std::declval&lt; CenterY &amp;&amp; &gt;(), std::declval&lt; CenterZ &amp;&amp; &gt;(), std::declval&lt; Radius &amp;&amp; &gt;(), std::declval&lt; Mass &amp;&amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>emplace</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>aff94263f8046676529a39e9b946985c5</anchor>
      <arglist>(size_type index_, const soagen::row&lt; Table, Columns... &gt; &amp;row_) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;() .emplace(size_type{}, std::declval&lt; const soagen::row&lt; Table, Columns... &gt; &amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::byte *</type>
      <name>data</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a91adf5700cb5b06ad7318088cc8e6f29</anchor>
      <arglist>() noexcept(soagen::has_nothrow_data_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const std::byte *const</type>
      <name>data</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a727176cef508545dba13b3bb7d6dc725</anchor>
      <arglist>() noexcept(soagen::has_nothrow_data_member&lt; const table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>column_type&lt; Column &gt; *</type>
      <name>column</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a7678bb260db38a59de3d947864c4ee23</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::add_const_t&lt; column_type&lt; Column &gt; &gt; *</type>
      <name>column</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a3ce76fabf24d0f72923167e1ac5cdbfe</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float *</type>
      <name>center_x</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a4c3613e1a67d8bc2b76ef7824282287a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const float *</type>
      <name>center_x</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a533201859d6fd4f8d5c767d834abbea9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float *</type>
      <name>center_y</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a43da96d387b49e3024783a3ea9644b10</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const float *</type>
      <name>center_y</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>af05c02b9a39612a4f36d52cdbc12aec1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float *</type>
      <name>center_z</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a8721fad06b1a49bacfcb7d592e539992</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const float *</type>
      <name>center_z</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a084aea61470005aa16b8157344ca65ae</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float *</type>
      <name>radius</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>aa17cf14f03a6bd87da0b408c3526bdb3</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const float *</type>
      <name>radius</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a845e2f0447175388848cde59e34808ff</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float *</type>
      <name>mass</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a15ef904bc30351645b6b712035c187d5</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const float *</type>
      <name>mass</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>adcb7efff87955a1d7a87984e63bb91b8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>for_each_column</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>af7d9a0a62a65507afb6123e145bdbdfb</anchor>
      <arglist>(Func &amp;&amp;func) noexcept(table_traits::for_each_column_ptr_nothrow_invocable&lt; Func &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>for_each_column</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a663d2a004ddb5b728482cef293bfaf67</anchor>
      <arglist>(Func &amp;&amp;func) const noexcept(table_traits::for_each_column_ptr_nothrow_invocable&lt; Func &amp;&amp;, true &gt;)</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; spheres, Columns... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>ab3c9a27305459bea1bdaf254e3f74a99</anchor>
      <arglist>(size_type index) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; spheres &amp;&amp;, Columns... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>ab5169f7c2b3678e082a3b0392795e27c</anchor>
      <arglist>(size_type index) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; const spheres, Columns... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a695974bb9ec6d2b900be6d4a688bae12</anchor>
      <arglist>(size_type index) const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; const spheres &amp;&amp;, Columns... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>ab62a1cf0e0381702916f7d834691d377</anchor>
      <arglist>(size_type index) const &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; spheres &gt;</type>
      <name>operator[]</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>ab5d4c512c0766751495c992fb9b56ba4</anchor>
      <arglist>(size_type index) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; spheres &amp;&amp; &gt;</type>
      <name>operator[]</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a78899a9b8bf880b417e50c41af2bd51b</anchor>
      <arglist>(size_type index) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; const spheres &gt;</type>
      <name>operator[]</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a6e48494ef0e582cb373b50b9205f82f3</anchor>
      <arglist>(size_type index) const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; const spheres &amp;&amp; &gt;</type>
      <name>operator[]</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a831d0c634cdbf8d5928012c05cf79445</anchor>
      <arglist>(size_type index) const &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; spheres &gt;</type>
      <name>at</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a5b81bff20e1336e3fe5eee59123c1fa1</anchor>
      <arglist>(size_type index) &amp;</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; spheres &amp;&amp; &gt;</type>
      <name>at</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>ab4b4043ae84b265ab408ef155a433426</anchor>
      <arglist>(size_type index) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; const spheres &gt;</type>
      <name>at</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>aacd3235239c6de6b6259995eed164465</anchor>
      <arglist>(size_type index) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; const spheres &amp;&amp; &gt;</type>
      <name>at</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>af34e6f26a8f89918a390f290cff5eaee</anchor>
      <arglist>(size_type index) const &amp;&amp;</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>column_count</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a086928d1446a1a2913fde2ece8e9795f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_type</type>
      <name>aligned_stride</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a8ccb27f85672ef2486e0f61352cc9c08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto &amp;</type>
      <name>column_name</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a910d6ecdf3e03d598dbe0437d236b134</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a65ba32f00d34d6a5a5b8a7919f84e2d1</anchor>
      <arglist>(const spheres &amp;lhs, const spheres &amp;rhs) noexcept(soagen::is_nothrow_equality_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a120747d54b1f609346f629ee72e4c508</anchor>
      <arglist>(const spheres &amp;lhs, const spheres &amp;rhs) noexcept(soagen::is_nothrow_equality_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a0339ef900980527c37d896e7b5000aab</anchor>
      <arglist>(const spheres &amp;lhs, const spheres &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>ab265a656698bc6bc41281ccdbd88dace</anchor>
      <arglist>(const spheres &amp;lhs, const spheres &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>afa6d9a31f01eb202cf008bbd26fa6f70</anchor>
      <arglist>(const spheres &amp;lhs, const spheres &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a91300ac4967a242152b40f57b75c401e</anchor>
      <arglist>(const spheres &amp;lhs, const spheres &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>table_type &amp;</type>
      <name>table</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a611ee9e9718ad1543fc27a3f2d0dda47</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>table_type &amp;&amp;</type>
      <name>table</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a9bfa763ff104951dc273e1d289207df2</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const table_type &amp;</type>
      <name>table</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>ae22f2e09934a260af301ac32f34e5936</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a296298c5d8ba04893da9e0178931a18e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>ab67a356405267c33671c65950c30ec7b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>max_size</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a5aad5c8bb88eb1b1c205dbe6a9daadc3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>allocation_size</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a6cf32e0fb88e1551e90e36081e62520a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>reserve</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a24651d6fc36150216e136a0cdeef9922</anchor>
      <arglist>(size_type new_cap) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().reserve(size_type{})))</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>capacity</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>ab4a788161559f144ecb5ea5058fa5b65</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>shrink_to_fit</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>aa4909ebbc8c1ac1a5225bcf33a920d23</anchor>
      <arglist>() noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().shrink_to_fit()))</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>clear</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a4653ea6960c9ff7032d55afa5216ed99</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a402ca772af05771754232fc55ac8d8a0</anchor>
      <arglist>(size_type pos) noexcept(soagen::has_nothrow_erase_member&lt; table_type, size_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>soagen::optional&lt; size_type &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a7575f89b2cbc7d777047dee3a55c1dae</anchor>
      <arglist>(size_type pos) noexcept(soagen::has_nothrow_unordered_erase_member&lt; table_type, size_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>pop_back</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a02d3832c7d99ecc1f1ad0ca247cb5de1</anchor>
      <arglist>(size_type num=1) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().pop_back(size_type{})))</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>resize</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a0cb42143bfa2f4bf4fc53d067fe29036</anchor>
      <arglist>(size_type new_size) noexcept(soagen::has_nothrow_resize_member&lt; table_type, size_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a60b947863498a30f549c25b5a24c9282</anchor>
      <arglist>(spheres &amp;other) noexcept(soagen::has_nothrow_swap_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>push_back</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>aabee042c412407bab06d52b17faed66b</anchor>
      <arglist>(column_traits&lt; 0 &gt;::param_type center_x, column_traits&lt; 1 &gt;::param_type center_y, column_traits&lt; 2 &gt;::param_type center_z, column_traits&lt; 3 &gt;::param_type radius=0.5f, column_traits&lt; 4 &gt;::param_type mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace_back(std::declval&lt; column_traits&lt; 0 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 1 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 2 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 3 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 4 &gt;::param_forward_type &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>push_back</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a6e8170825da90806d2fa89bea50468cc</anchor>
      <arglist>(column_traits&lt; 0 &gt;::rvalue_type center_x, column_traits&lt; 1 &gt;::rvalue_type center_y, column_traits&lt; 2 &gt;::rvalue_type center_z, column_traits&lt; 3 &gt;::rvalue_type radius=0.5f, column_traits&lt; 4 &gt;::rvalue_type mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace_back(std::declval&lt; column_traits&lt; 0 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 1 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 2 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 3 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 4 &gt;::rvalue_forward_type &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>push_back</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>ac6b3c8ac3de2421a9bcb6a799fd3de80</anchor>
      <arglist>(const soagen::row&lt; Table, Columns... &gt; &amp;row_) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace_back(std::declval&lt; const soagen::row&lt; Table, Columns... &gt; &amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>emplace_back</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>aa5e48088b9be468a583375ad124f15e4</anchor>
      <arglist>(CenterX &amp;&amp;center_x, CenterY &amp;&amp;center_y, CenterZ &amp;&amp;center_z, Radius &amp;&amp;radius=0.5f, Mass &amp;&amp;mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace_back(std::declval&lt; CenterX &amp;&amp; &gt;(), std::declval&lt; CenterY &amp;&amp; &gt;(), std::declval&lt; CenterZ &amp;&amp; &gt;(), std::declval&lt; Radius &amp;&amp; &gt;(), std::declval&lt; Mass &amp;&amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>emplace_back</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a93de928a304e83fd3c8f4054c80e31d1</anchor>
      <arglist>(const soagen::row&lt; Table, Columns... &gt; &amp;row_) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace_back(std::declval&lt; const soagen::row&lt; Table, Columns... &gt; &amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>insert</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a4e4475d7d69e7e972dd52cb13d156a8e</anchor>
      <arglist>(size_type index_, column_traits&lt; 0 &gt;::param_type center_x, column_traits&lt; 1 &gt;::param_type center_y, column_traits&lt; 2 &gt;::param_type center_z, column_traits&lt; 3 &gt;::param_type radius=0.5f, column_traits&lt; 4 &gt;::param_type mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace(size_type{}, std::declval&lt; column_traits&lt; 0 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 1 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 2 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 3 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 4 &gt;::param_forward_type &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>insert</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a98a633e71d8a640aa8f40eb99a45d5aa</anchor>
      <arglist>(size_type index_, column_traits&lt; 0 &gt;::rvalue_type center_x, column_traits&lt; 1 &gt;::rvalue_type center_y, column_traits&lt; 2 &gt;::rvalue_type center_z, column_traits&lt; 3 &gt;::rvalue_type radius=0.5f, column_traits&lt; 4 &gt;::rvalue_type mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace(size_type{}, std::declval&lt; column_traits&lt; 0 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 1 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 2 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 3 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 4 &gt;::rvalue_forward_type &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>insert</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>ad06a3bdaeec119ca6a194aad71e15d15</anchor>
      <arglist>(size_type index_, const soagen::row&lt; Table, Columns... &gt; &amp;row_) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;() .emplace(size_type{}, std::declval&lt; const soagen::row&lt; Table, Columns... &gt; &amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>emplace</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a595dfabb6a5434d1831742b3de78393d</anchor>
      <arglist>(size_type index_, CenterX &amp;&amp;center_x, CenterY &amp;&amp;center_y, CenterZ &amp;&amp;center_z, Radius &amp;&amp;radius=0.5f, Mass &amp;&amp;mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace(size_type{}, std::declval&lt; CenterX &amp;&amp; &gt;(), std::declval&lt; CenterY &amp;&amp; &gt;(), std::declval&lt; CenterZ &amp;&amp; &gt;(), std::declval&lt; Radius &amp;&amp; &gt;(), std::declval&lt; Mass &amp;&amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>emplace</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>aff94263f8046676529a39e9b946985c5</anchor>
      <arglist>(size_type index_, const soagen::row&lt; Table, Columns... &gt; &amp;row_) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;() .emplace(size_type{}, std::declval&lt; const soagen::row&lt; Table, Columns... &gt; &amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::byte *</type>
      <name>data</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a91adf5700cb5b06ad7318088cc8e6f29</anchor>
      <arglist>() noexcept(soagen::has_nothrow_data_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const std::byte *const</type>
      <name>data</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a727176cef508545dba13b3bb7d6dc725</anchor>
      <arglist>() noexcept(soagen::has_nothrow_data_member&lt; const table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>column_type&lt; Column &gt; *</type>
      <name>column</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a7678bb260db38a59de3d947864c4ee23</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::add_const_t&lt; column_type&lt; Column &gt; &gt; *</type>
      <name>column</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a3ce76fabf24d0f72923167e1ac5cdbfe</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float *</type>
      <name>center_x</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a4c3613e1a67d8bc2b76ef7824282287a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const float *</type>
      <name>center_x</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a533201859d6fd4f8d5c767d834abbea9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float *</type>
      <name>center_y</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a43da96d387b49e3024783a3ea9644b10</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const float *</type>
      <name>center_y</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>af05c02b9a39612a4f36d52cdbc12aec1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float *</type>
      <name>center_z</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a8721fad06b1a49bacfcb7d592e539992</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const float *</type>
      <name>center_z</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a084aea61470005aa16b8157344ca65ae</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float *</type>
      <name>radius</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>aa17cf14f03a6bd87da0b408c3526bdb3</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const float *</type>
      <name>radius</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a845e2f0447175388848cde59e34808ff</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float *</type>
      <name>mass</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a15ef904bc30351645b6b712035c187d5</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const float *</type>
      <name>mass</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>adcb7efff87955a1d7a87984e63bb91b8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>for_each_column</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>af7d9a0a62a65507afb6123e145bdbdfb</anchor>
      <arglist>(Func &amp;&amp;func) noexcept(table_traits::for_each_column_ptr_nothrow_invocable&lt; Func &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>for_each_column</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a663d2a004ddb5b728482cef293bfaf67</anchor>
      <arglist>(Func &amp;&amp;func) const noexcept(table_traits::for_each_column_ptr_nothrow_invocable&lt; Func &amp;&amp;, true &gt;)</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; spheres, Columns... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>ab3c9a27305459bea1bdaf254e3f74a99</anchor>
      <arglist>(size_type index) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; spheres &amp;&amp;, Columns... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>ab5169f7c2b3678e082a3b0392795e27c</anchor>
      <arglist>(size_type index) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; const spheres, Columns... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a695974bb9ec6d2b900be6d4a688bae12</anchor>
      <arglist>(size_type index) const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; const spheres &amp;&amp;, Columns... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>ab62a1cf0e0381702916f7d834691d377</anchor>
      <arglist>(size_type index) const &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; spheres &gt;</type>
      <name>operator[]</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>ab5d4c512c0766751495c992fb9b56ba4</anchor>
      <arglist>(size_type index) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; spheres &amp;&amp; &gt;</type>
      <name>operator[]</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a78899a9b8bf880b417e50c41af2bd51b</anchor>
      <arglist>(size_type index) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; const spheres &gt;</type>
      <name>operator[]</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a6e48494ef0e582cb373b50b9205f82f3</anchor>
      <arglist>(size_type index) const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; const spheres &amp;&amp; &gt;</type>
      <name>operator[]</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a831d0c634cdbf8d5928012c05cf79445</anchor>
      <arglist>(size_type index) const &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; spheres &gt;</type>
      <name>at</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a5b81bff20e1336e3fe5eee59123c1fa1</anchor>
      <arglist>(size_type index) &amp;</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; spheres &amp;&amp; &gt;</type>
      <name>at</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>ab4b4043ae84b265ab408ef155a433426</anchor>
      <arglist>(size_type index) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; const spheres &gt;</type>
      <name>at</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>aacd3235239c6de6b6259995eed164465</anchor>
      <arglist>(size_type index) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; const spheres &amp;&amp; &gt;</type>
      <name>at</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>af34e6f26a8f89918a390f290cff5eaee</anchor>
      <arglist>(size_type index) const &amp;&amp;</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a65ba32f00d34d6a5a5b8a7919f84e2d1</anchor>
      <arglist>(const spheres &amp;lhs, const spheres &amp;rhs) noexcept(soagen::is_nothrow_equality_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a120747d54b1f609346f629ee72e4c508</anchor>
      <arglist>(const spheres &amp;lhs, const spheres &amp;rhs) noexcept(soagen::is_nothrow_equality_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a0339ef900980527c37d896e7b5000aab</anchor>
      <arglist>(const spheres &amp;lhs, const spheres &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>ab265a656698bc6bc41281ccdbd88dace</anchor>
      <arglist>(const spheres &amp;lhs, const spheres &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>afa6d9a31f01eb202cf008bbd26fa6f70</anchor>
      <arglist>(const spheres &amp;lhs, const spheres &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classsoagen__examples_1_1spheres.html</anchorfile>
      <anchor>a91300ac4967a242152b40f57b75c401e</anchor>
      <arglist>(const spheres &amp;lhs, const spheres &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>soagen::table</name>
    <filename>classsoagen_1_1table.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Traits</type>
      <name>table_traits</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a9570cd144cb12019ab9941945d1b10d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Allocator</type>
      <name>allocator_type</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a746187826b42ba59b0c121a0e38320dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename table_traits::template column&lt; Column &gt;</type>
      <name>column_traits</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>aa1b2bafba3d8dc942fbafb2452f33fe8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename column_traits&lt; Column &gt;::value_type</type>
      <name>column_type</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>aab55a3e2e1b323ee4a16192a8c6d6a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>table</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ad9885ecaf5fe062639ec9409f900c261</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>table</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a7296a81aac125e7938fd35dd5e15be94</anchor>
      <arglist>(table &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>table &amp;</type>
      <name>operator=</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a2250cd5e92c989efcca61da1a68fb159</anchor>
      <arglist>(table &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>table</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ad192bf21e3d92be79ed260ab1a2a726f</anchor>
      <arglist>(const table &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>table &amp;</type>
      <name>operator=</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a78761dedffd9338afe29870eb023bdbf</anchor>
      <arglist>(const table &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~table</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ab7b68cde7cac6d8a4439184a26a02752</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>table</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a2eba6aa0d28a7bf8904ff18c8413b058</anchor>
      <arglist>(const allocator_type &amp;alloc) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>table</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a83d5cc430bf47ec982764fbf37739c31</anchor>
      <arglist>(allocator_type &amp;&amp;alloc) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr allocator_type</type>
      <name>get_allocator</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ae04052a208cb475abf9c21dbdc87e5f5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ab2301cc792aaeeec4f1fa7bc44c690df</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a44e5a90f68d48cc9d1215464c374504c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>max_size</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a62d7d9c723d5ba2b7291dc1b146124cf</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>abfc3cc96dea33c8bc5e8195cc8875511</anchor>
      <arglist>(size_type new_cap) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>capacity</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>acc9e59da33074da54c363abbd9d1773b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shrink_to_fit</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a2a61077997a3a9202aa4fe869728e3f7</anchor>
      <arglist>() noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a286e59a8423d2ed19beedf78545ecd04</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a594219234a3eb4c5eba502fdda95f801</anchor>
      <arglist>(size_type pos) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>soagen::optional&lt; size_type &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a2025d38ad3f8ca8c710fc86e818126d9</anchor>
      <arglist>(size_type pos) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emplace_back</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a375841a3f64d8bb5a1acae63d1acca86</anchor>
      <arglist>(Args &amp;&amp;... args) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ab15aecb6e24d7adfd1f71b1a297e1845</anchor>
      <arglist>(size_type index, Args &amp;&amp;... args) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop_back</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a808bfa88a013c8c95bcd0adb13e1b8be</anchor>
      <arglist>(size_type num=1) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a1f02ce400aef54b142b2a684882de5f8</anchor>
      <arglist>(size_type new_size) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a9886d31a2d8887f33ccf57afe8f1047d</anchor>
      <arglist>(table &amp;other) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::byte *</type>
      <name>data</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a8e8716b6e0c13a1b37ec5493bb7c7801</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const std::byte *</type>
      <name>data</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ac2a6b40384455de36e7aa3a4652f338a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>column_type&lt; Column &gt; *</type>
      <name>column</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a66ae398abdb4a9ef483da123f5e18dc2</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::add_const_t&lt; column_type&lt; Column &gt; &gt; *</type>
      <name>column</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a15d2673a73707b2ad27f3f1c1cd5ddbe</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>aligned_stride</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a4499d1b68c768be5bb1976aff3d172ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>afb7c9b31b82a2f581341293d7b886bec</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept(...)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ae7e6dcd41e4076c6c0f17226c9f90606</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept(...)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a3284223bf5cebda393d8cfe864acfcf2</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept(...)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a538d7b417aa6bd97438f46cbd6fb4fcf</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept(...)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>aa4f939153878d51597644c36c682427f</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept(...)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ae16c2ee9b6ca0e308afca8f8c210e738</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ab2301cc792aaeeec4f1fa7bc44c690df</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a44e5a90f68d48cc9d1215464c374504c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>max_size</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a62d7d9c723d5ba2b7291dc1b146124cf</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>abfc3cc96dea33c8bc5e8195cc8875511</anchor>
      <arglist>(size_type new_cap) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>capacity</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>acc9e59da33074da54c363abbd9d1773b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shrink_to_fit</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a2a61077997a3a9202aa4fe869728e3f7</anchor>
      <arglist>() noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a286e59a8423d2ed19beedf78545ecd04</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a594219234a3eb4c5eba502fdda95f801</anchor>
      <arglist>(size_type pos) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>soagen::optional&lt; size_type &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a2025d38ad3f8ca8c710fc86e818126d9</anchor>
      <arglist>(size_type pos) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emplace_back</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a375841a3f64d8bb5a1acae63d1acca86</anchor>
      <arglist>(Args &amp;&amp;... args) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ab15aecb6e24d7adfd1f71b1a297e1845</anchor>
      <arglist>(size_type index, Args &amp;&amp;... args) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop_back</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a808bfa88a013c8c95bcd0adb13e1b8be</anchor>
      <arglist>(size_type num=1) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a1f02ce400aef54b142b2a684882de5f8</anchor>
      <arglist>(size_type new_size) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a9886d31a2d8887f33ccf57afe8f1047d</anchor>
      <arglist>(table &amp;other) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::byte *</type>
      <name>data</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a8e8716b6e0c13a1b37ec5493bb7c7801</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const std::byte *</type>
      <name>data</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ac2a6b40384455de36e7aa3a4652f338a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>column_type&lt; Column &gt; *</type>
      <name>column</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a66ae398abdb4a9ef483da123f5e18dc2</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::add_const_t&lt; column_type&lt; Column &gt; &gt; *</type>
      <name>column</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a15d2673a73707b2ad27f3f1c1cd5ddbe</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>afb7c9b31b82a2f581341293d7b886bec</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept(...)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ae7e6dcd41e4076c6c0f17226c9f90606</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept(...)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a3284223bf5cebda393d8cfe864acfcf2</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept(...)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a538d7b417aa6bd97438f46cbd6fb4fcf</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept(...)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>aa4f939153878d51597644c36c682427f</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept(...)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ae16c2ee9b6ca0e308afca8f8c210e738</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept(...)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>soagen::table_traits</name>
    <filename>structsoagen_1_1table__traits.html</filename>
    <templarg>Columns</templarg>
    <member kind="typedef">
      <type>type_at_index&lt; Index, Columns... &gt;</type>
      <name>column</name>
      <anchorfile>structsoagen_1_1table__traits.html</anchorfile>
      <anchor>af2430752acbf69d08a931056e594e737</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>type_at_index&lt; IndexConstant::value, Columns... &gt;</type>
      <name>column_from_ic</name>
      <anchorfile>structsoagen_1_1table__traits.html</anchorfile>
      <anchor>a518123d396810415393320217eec75ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>column_count</name>
      <anchorfile>structsoagen_1_1table__traits.html</anchorfile>
      <anchor>a9c5de4cd50de5c424f1bd3eecc2bb228</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>aligned_stride</name>
      <anchorfile>structsoagen_1_1table__traits.html</anchorfile>
      <anchor>a7b18454ef28aa4279e1f1fc61bd15381</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>column_alignments</name>
      <anchorfile>structsoagen_1_1table__traits.html</anchorfile>
      <anchor>a0405d7fb8c928727d169f006fd46abac</anchor>
      <arglist>[column_count]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>largest_alignment</name>
      <anchorfile>structsoagen_1_1table__traits.html</anchorfile>
      <anchor>a595a21db7abeb21baf06e855b8fffd8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>rvalue_type_list_is_distinct</name>
      <anchorfile>structsoagen_1_1table__traits.html</anchorfile>
      <anchor>acc959fd217581e04726ca725cec7c65d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>soagen</name>
    <filename>namespacesoagen.html</filename>
    <class kind="struct">soagen::allocator</class>
    <class kind="struct">soagen::column_traits</class>
    <class kind="struct">soagen::emplacer</class>
    <class kind="struct">soagen::row</class>
    <class kind="class">soagen::table</class>
    <class kind="struct">soagen::table_traits</class>
    <member kind="typedef">
      <type>std::remove_cv_t&lt; std::remove_reference_t&lt; T &gt; &gt;</type>
      <name>remove_cvref</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>ac8013f256732192bd84bfe3853d36ecf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::add_lvalue_reference_t&lt; std::add_const_t&lt; std::remove_reference_t&lt; T &gt; &gt;&gt;</type>
      <name>make_cref</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a999c94c0a9677dda7f4d6ef97854cc12</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::integral_constant&lt; size_t, static_cast&lt; size_t &gt;(Value)&gt;</type>
      <name>index_constant</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>ad43f30999296a4d8571022ae2549ff68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>forward_type</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>acc7386f915bae0818a7078fee2350cf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::optional&lt; T &gt;</type>
      <name>optional</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a752660c356d07c3815ebe85969788ae3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>table_traits_type</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a0b1aa7477b1f150cbfcd4cfbce00ff83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>table_type</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a83c1e715eb12c7393c508dcc1ba6264f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>allocator_type</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a85c2af2605578cc55f1e69ccac75ffc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>value_type</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a3039db4dcf0ce567d3779945a88a97bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>storage_type</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a05e7d77f37a4bcb2d256798df0fcbbc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>param_type</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>adf58db246695891f9f6789a84dce309a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>rvalue_type</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a0f0b3f50730a07796f5b04cf18926d4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename detail::row_type_&lt; std::conditional_t&lt; std::is_reference_v&lt; Table &gt;, Table, std::add_lvalue_reference_t&lt; Table &gt; &gt;, std::index_sequence&lt; Columns... &gt; &gt;::type</type>
      <name>row_type</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a3e7a0fd09c4cd1cc4dec8152c635811b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>type_at_index</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a3d26167a02130bdc91a58e0c3a2f75a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a091a78153334eed1202b3d9766183545</anchor>
      <arglist>(table&lt; Traits, Allocator &gt; &amp;lhs, table&lt; Traits, Allocator &gt; &amp;rhs) noexcept(soagen::has_nothrow_swap_member&lt; table&lt; Traits, Allocator &gt;&gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_constant_evaluated</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a7accb1e12492f06811847809f2576565</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const T &amp;</type>
      <name>min</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a5e72e14c43c4ce06481b5a27de2573fa</anchor>
      <arglist>(const T &amp;val1, const T &amp;val2, const U &amp;... vals) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const T &amp;</type>
      <name>max</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a9cdcdd406199bd3c4a0bad19a7aac5ec</anchor>
      <arglist>(const T &amp;val1, const T &amp;val2, const U &amp;... vals) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::common_type_t&lt; T, U, V... &gt;</type>
      <name>lcm</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>ab8d8cd519306548d0ee493aecb0e052b</anchor>
      <arglist>(T val1, U val2, V... vals) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>has_single_bit</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a5ee56c757af1f31fd50aa2b8a45d4601</anchor>
      <arglist>(T val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr To</type>
      <name>bit_cast</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>adca992a728182a20457735080b86053d</anchor>
      <arglist>(const From &amp;from) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T *</type>
      <name>assume_aligned</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>acfee766462da3971630e2057a78e23c4</anchor>
      <arglist>(T *ptr) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_column_traits</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>aabcf58d0029fe593e95833cb07c4f7a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_cv</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a33f1ab2862c86938e20c474a5b454551</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_cvref</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a6807d6e29ce4c1c6923e2214a3bd6b83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_integer</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a26eb6d5dd00e245d1100c028ee8af498</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_integer</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a85d7ea90620b08fe88b334fe5a52c9ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_unsigned</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>aa4ea4199aca8afd46bccd2c067e16aa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>any_same</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a0e0ba083c71c58486abb3a35973d210a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_soa</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>af1ebb4d107e208fb28942fdea2cb6fa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_implicit_lifetime_type</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a24f6ae16c76ca86d6bf594a40daea0bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_swap_member</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a85b5060347f1c2ccc296b67ead6bfb56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_resize_member</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>adf014a1a2acfd10d0352fa8701510e83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_erase_member</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a52a288798b5c6bf79222ff727424547d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_unordered_erase_member</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a0256b4d1a6bbec2890b316acec5f6f6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_data_member</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a60597862a1a2fe5e93a0b8f7e38df031</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_equality_comparable</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a1feeeeac75c633a5479f91f6d96aef85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_less_than_comparable</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>ac633e60da34e1b33f52b02ae74570820</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_nothrow_swap_member</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a26feac0abbb3db577bc5e749ea2d84e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_nothrow_resize_member</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>aafc939c40239e54f5c50cb6ad6f07f87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_nothrow_erase_member</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>ac9bdb5dbd5de15f271326832a429f9bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_nothrow_unordered_erase_member</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a75673dcda8ea56c9240b1c946536e701</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_nothrow_data_member</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>ac39e6aa84e74f60370b9ca737fefddec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_nothrow_equality_comparable</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>ae343150616e0e79217848e4fb27c0be5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_nothrow_less_than_comparable</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a5bae32f1abaf115c96d228ac3c92e407</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_emplacer</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a28a13532fbc8ec520bcc036345af34f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_invocable_with_optarg</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a5cf5c15d18695d3f4926890fd59f54eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_nothrow_invocable_with_optarg</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>ab5993030dc50dc82782a8eea7ccbf40c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_row</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>af318a46d5e993f9a3742d0dc5f9604cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_table</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a52fd2ec6fe868575bdbacf17d045573a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_table_traits</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>ae01a388ac93f910d43246f50ac3648b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>is_detected</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a419e437a6695ca5f441f9325e602f239</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>soagen_examples</name>
    <filename>namespacesoagen__examples.html</filename>
    <class kind="class">soagen_examples::boxes</class>
    <class kind="class">soagen_examples::spheres</class>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>namespacesoagen__examples.html</anchorfile>
      <anchor>a71024956d0e51c927994add8cc1e2607</anchor>
      <arglist>(boxes &amp;lhs, boxes &amp;rhs) noexcept(soagen::has_nothrow_swap_member&lt; boxes &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>namespacesoagen__examples.html</anchorfile>
      <anchor>aab282f4afd1e10b837e0f3a79d390e7d</anchor>
      <arglist>(spheres &amp;lhs, spheres &amp;rhs) noexcept(soagen::has_nothrow_swap_member&lt; spheres &gt;)</arglist>
    </member>
  </compound>
  <compound kind="page">
    <name>poxy_changelog</name>
    <title>Changelog</title>
    <filename>poxy_changelog.html</filename>
  </compound>
</tagfile>
