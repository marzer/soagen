<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile doxygen_version="1.9.1">
  <compound kind="file">
    <name>shapes.hpp</name>
    <filename>shapes_8hpp.html</filename>
    <includes id="soagen_8hpp" name="soagen.hpp" local="no" imported="no">soagen.hpp</includes>
    <class kind="class">soagen::examples::boxes</class>
    <class kind="class">soagen::examples::spheres</class>
    <namespace>soagen</namespace>
    <namespace>soagen::examples</namespace>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>namespacesoagen_1_1examples.html</anchorfile>
      <anchor>a73ca6e1dfeb7041e934e8694d2cf2d6b</anchor>
      <arglist>(boxes &amp;lhs, boxes &amp;rhs) noexcept(soagen::has_nothrow_swap_member&lt; boxes &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>namespacesoagen_1_1examples.html</anchorfile>
      <anchor>a2f2937d0182090b040da55081644f65f</anchor>
      <arglist>(spheres &amp;lhs, spheres &amp;rhs) noexcept(soagen::has_nothrow_swap_member&lt; spheres &gt;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>soagen.hpp</name>
    <filename>soagen_8hpp.html</filename>
  </compound>
  <compound kind="struct">
    <name>soagen::allocator</name>
    <filename>structsoagen_1_1allocator.html</filename>
    <member kind="typedef">
      <type>std::byte</type>
      <name>value_type</name>
      <anchorfile>structsoagen_1_1allocator.html</anchorfile>
      <anchor>aba2ca5c1dab7bb208da881989ca8eb69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::true_type</type>
      <name>is_always_equal</name>
      <anchorfile>structsoagen_1_1allocator.html</anchorfile>
      <anchor>a70693a30d83b4bf8257b7b5fdbc6c1c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::false_type</type>
      <name>propagate_on_container_copy_assignment</name>
      <anchorfile>structsoagen_1_1allocator.html</anchorfile>
      <anchor>a94f66255e4a892b9415c33beb4fe0df4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::false_type</type>
      <name>propagate_on_container_move_assignment</name>
      <anchorfile>structsoagen_1_1allocator.html</anchorfile>
      <anchor>af9f354372099aca15526fcb63143f827</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::false_type</type>
      <name>propagate_on_container_swap</name>
      <anchorfile>structsoagen_1_1allocator.html</anchorfile>
      <anchor>acd4166ae64119659c42b16e9b39d7185</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>value_type *</type>
      <name>allocate</name>
      <anchorfile>structsoagen_1_1allocator.html</anchorfile>
      <anchor>add1b597c98a840fbdc210811428787c8</anchor>
      <arglist>(size_t size, std::align_val_t alignment=std::align_val_t{ min_alignment })</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocate</name>
      <anchorfile>structsoagen_1_1allocator.html</anchorfile>
      <anchor>a922dad9dc86d8ad039273104c8ddaa65</anchor>
      <arglist>(value_type *ptr, [[maybe_unused]] size_t size) noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>min_alignment</name>
      <anchorfile>structsoagen_1_1allocator.html</anchorfile>
      <anchor>ac1f730d0e4d9368899dedb8f1eaf21b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>structsoagen_1_1allocator.html</anchorfile>
      <anchor>a1c923b7e894d9cf2a14dd278021e65f5</anchor>
      <arglist>(const allocator &amp;, const allocator &amp;) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>structsoagen_1_1allocator.html</anchorfile>
      <anchor>a1f0ba8d66cbc541d18e9934dc950c9fd</anchor>
      <arglist>(const allocator &amp;, const allocator &amp;) noexcept</arglist>
    </member>
    <docanchor file="structsoagen_1_1allocator.html" title="Customizing allocators for soagen">customizing_allocators</docanchor>
    <docanchor file="structsoagen_1_1allocator.html" title="Specifying a min_alignment">customizing_allocators_min_alignment</docanchor>
    <docanchor file="structsoagen_1_1allocator.html" title="Providing an alignment-aware allocate()">customizing_allocators_aligned_allocate</docanchor>
  </compound>
  <compound kind="class">
    <name>soagen::examples::boxes</name>
    <filename>classsoagen_1_1examples_1_1boxes.html</filename>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a79aeedacf92fcfff7477633c99832b3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ae80d9e115e4caf6a3c8489002762dfd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::allocator_type&lt; boxes &gt;</type>
      <name>allocator_type</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a35a212c2b6a6d0a5d17fc45fbb09abd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::table_type&lt; boxes &gt;</type>
      <name>table_type</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>af1c2c265684acf95551939feaab9efc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::table_traits_type&lt; boxes &gt;</type>
      <name>table_traits</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>abf96250c6c5d66b906cacbf90c59b4a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename table_traits::template column&lt; Column &gt;</type>
      <name>column_traits</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>afcfe648814b0f802c1cf032d8d3d8d21</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename column_traits&lt; Column &gt;::value_type</type>
      <name>column_type</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ab12f1c6477c420b4c2b1dc8471e573f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::iterator_type&lt; boxes &amp; &gt;</type>
      <name>iterator</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>aef8174e1019b1089c58b3f2079deadda</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::iterator_type&lt; const boxes &amp; &gt;</type>
      <name>const_iterator</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a11e18b5f0a691433c06f3ba1c8d8512c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::iterator_type&lt; boxes &amp;&amp; &gt;</type>
      <name>rvalue_iterator</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a25760ee413bbb77dbaa70a34bd075008</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::row_type&lt; boxes &amp; &gt;</type>
      <name>row_type</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ae6ba3ef73b5b03f774fa1590afda5525</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::row_type&lt; const boxes &amp; &gt;</type>
      <name>const_row_type</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a4f58e325579b81917487021d9736970d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::row_type&lt; boxes &amp;&amp; &gt;</type>
      <name>rvalue_row_type</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a86838c0fc1d81e5ddcc63a37cfe1b746</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>column_indices</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a5861e34dacd09fd5237d8943dcc3d57f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>boxes</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a6264b86eff1f40143dbce82cbd6f6866</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>boxes</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a0de413c75f96495cf3a9e8154b7e882c</anchor>
      <arglist>(boxes &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>operator=</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>adffe7f9a7e41e09b615873ad2ff5269c</anchor>
      <arglist>(boxes &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>boxes</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a5993e472547bf5be4ef8e9d98c67526d</anchor>
      <arglist>(const boxes &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>operator=</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a551fb8fb5bc83e9bcd65a5f09fc51113</anchor>
      <arglist>(const boxes &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~boxes</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a8fd3f937f12ced496d7818402c823680</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>boxes</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a6791a97971ee2bb79a1ddb3eaef5f1ff</anchor>
      <arglist>(const allocator_type &amp;alloc) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>boxes</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a6659e7c96ab9df03d1839737c346c701</anchor>
      <arglist>(allocator_type &amp;&amp;alloc) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr allocator_type</type>
      <name>get_allocator</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ac05a944668996fb2c2a91c6a2f3cda3a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr table_type &amp;</type>
      <name>table</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a99563640025b1fb960ec361646528942</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr table_type &amp;&amp;</type>
      <name>table</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ac0ef0df0f8f31275d0c4133ddf3ab842</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const table_type &amp;</type>
      <name>table</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>aefe8fe689544b84cccdfbff0965b3c64</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a0e382d8361550b4947c6bc20ba87b23d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ad33f90666f5212fdcaa994199fea3bee</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>max_size</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a6ab29aa4d92e24c4bd6abff41d2bf79d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>allocation_size</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>aa5d4a754dcd04a4fd96d0f099d2d22a9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>reserve</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ae2305c967e3364d59220f5e61192729a</anchor>
      <arglist>(size_type new_cap) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().reserve(size_type{})))</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>capacity</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a81b31273b263010ea1029a700bfc0319</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>shrink_to_fit</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a86e4755492c40813995181b713c27d77</anchor>
      <arglist>() noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().shrink_to_fit()))</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>clear</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a10f4bd307be07ef1d39d6fd2e913599c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>erase</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ab39d31d636fe45ca86985583ce9f1ddb</anchor>
      <arglist>(size_type pos) noexcept(soagen::has_nothrow_erase_member&lt; table_type, size_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::optional&lt; size_type &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a96c5ba0baeea81ca33e2115153ee00a1</anchor>
      <arglist>(size_type pos) noexcept(soagen::has_nothrow_unordered_erase_member&lt; table_type, size_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>erase</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a43d8036dd8a29e94f8a67ec392e1a1da</anchor>
      <arglist>(iterator pos) noexcept(soagen::has_nothrow_erase_member&lt; table_type, size_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::optional&lt; iterator &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a25af7af4bc19e14a6bb933faa4f1d27c</anchor>
      <arglist>(iterator pos) noexcept(soagen::has_nothrow_unordered_erase_member&lt; table_type, size_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>erase</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a17899ec2d33f64993c5c8c05464c70bb</anchor>
      <arglist>(const_iterator pos) noexcept(soagen::has_nothrow_erase_member&lt; table_type, size_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::optional&lt; const_iterator &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a43d8831f172f71732e15d929f53725a5</anchor>
      <arglist>(const_iterator pos) noexcept(soagen::has_nothrow_unordered_erase_member&lt; table_type, size_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>pop_back</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>acaa8dac3c9162d6f073a9ea7cb951152</anchor>
      <arglist>(size_type num=1) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().pop_back(size_type{})))</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>resize</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a23b4be7232f48cd031ba8b85a1b2d3a7</anchor>
      <arglist>(size_type new_size) noexcept(soagen::has_nothrow_resize_member&lt; table_type, size_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ad2204ab6797d1a7b3c7daa4950c50e75</anchor>
      <arglist>(boxes &amp;other) noexcept(soagen::has_nothrow_swap_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>push_back</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ae3771d34b3f8ff3013e76178c33d3947</anchor>
      <arglist>(column_traits&lt; 0 &gt;::param_type center_x, column_traits&lt; 1 &gt;::param_type center_y, column_traits&lt; 2 &gt;::param_type center_z, column_traits&lt; 3 &gt;::param_type extents_x=0.5f, column_traits&lt; 4 &gt;::param_type extents_y=0.5f, column_traits&lt; 5 &gt;::param_type extents_z=0.5f, column_traits&lt; 6 &gt;::param_type mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace_back(std::declval&lt; column_traits&lt; 0 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 1 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 2 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 3 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 4 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 5 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 6 &gt;::param_forward_type &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>push_back</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a582a460d083b017ebbd87ac41c62a614</anchor>
      <arglist>(column_traits&lt; 0 &gt;::rvalue_type center_x, column_traits&lt; 1 &gt;::rvalue_type center_y, column_traits&lt; 2 &gt;::rvalue_type center_z, column_traits&lt; 3 &gt;::rvalue_type extents_x=0.5f, column_traits&lt; 4 &gt;::rvalue_type extents_y=0.5f, column_traits&lt; 5 &gt;::rvalue_type extents_z=0.5f, column_traits&lt; 6 &gt;::rvalue_type mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace_back(std::declval&lt; column_traits&lt; 0 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 1 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 2 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 3 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 4 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 5 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 6 &gt;::rvalue_forward_type &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>push_back</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a7a80bc4a5b6a87bc18063897db54a85f</anchor>
      <arglist>(const soagen::row&lt; Table, Columns... &gt; &amp;row_) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace_back(std::declval&lt; const soagen::row&lt; Table, Columns... &gt; &amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>emplace_back</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a8d96f4cd2cfaa6acd0b439fcf95a2f5b</anchor>
      <arglist>(CenterX &amp;&amp;center_x, CenterY &amp;&amp;center_y, CenterZ &amp;&amp;center_z, ExtentsX &amp;&amp;extents_x=0.5f, ExtentsY &amp;&amp;extents_y=0.5f, ExtentsZ &amp;&amp;extents_z=0.5f, Mass &amp;&amp;mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace_back(std::declval&lt; CenterX &amp;&amp; &gt;(), std::declval&lt; CenterY &amp;&amp; &gt;(), std::declval&lt; CenterZ &amp;&amp; &gt;(), std::declval&lt; ExtentsX &amp;&amp; &gt;(), std::declval&lt; ExtentsY &amp;&amp; &gt;(), std::declval&lt; ExtentsZ &amp;&amp; &gt;(), std::declval&lt; Mass &amp;&amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>emplace_back</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>abf3b58e863e02359eb2c65c45f9d5f77</anchor>
      <arglist>(const soagen::row&lt; Table, Columns... &gt; &amp;row_) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace_back(std::declval&lt; const soagen::row&lt; Table, Columns... &gt; &amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>afd484628f3f25671eb69067a5c3af435</anchor>
      <arglist>(size_type index_, column_traits&lt; 0 &gt;::param_type center_x, column_traits&lt; 1 &gt;::param_type center_y, column_traits&lt; 2 &gt;::param_type center_z, column_traits&lt; 3 &gt;::param_type extents_x=0.5f, column_traits&lt; 4 &gt;::param_type extents_y=0.5f, column_traits&lt; 5 &gt;::param_type extents_z=0.5f, column_traits&lt; 6 &gt;::param_type mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace(size_type{}, std::declval&lt; column_traits&lt; 0 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 1 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 2 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 3 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 4 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 5 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 6 &gt;::param_forward_type &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>adaf0638d94f0560b3896435077dd8bd1</anchor>
      <arglist>(const_iterator iter_, column_traits&lt; 0 &gt;::param_type center_x, column_traits&lt; 1 &gt;::param_type center_y, column_traits&lt; 2 &gt;::param_type center_z, column_traits&lt; 3 &gt;::param_type extents_x=0.5f, column_traits&lt; 4 &gt;::param_type extents_y=0.5f, column_traits&lt; 5 &gt;::param_type extents_z=0.5f, column_traits&lt; 6 &gt;::param_type mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace(size_type{}, std::declval&lt; column_traits&lt; 0 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 1 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 2 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 3 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 4 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 5 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 6 &gt;::param_forward_type &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a26ed176e113cc7f511b0c3ec7d405ba5</anchor>
      <arglist>(size_type index_, column_traits&lt; 0 &gt;::rvalue_type center_x, column_traits&lt; 1 &gt;::rvalue_type center_y, column_traits&lt; 2 &gt;::rvalue_type center_z, column_traits&lt; 3 &gt;::rvalue_type extents_x=0.5f, column_traits&lt; 4 &gt;::rvalue_type extents_y=0.5f, column_traits&lt; 5 &gt;::rvalue_type extents_z=0.5f, column_traits&lt; 6 &gt;::rvalue_type mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace(size_type{}, std::declval&lt; column_traits&lt; 0 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 1 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 2 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 3 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 4 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 5 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 6 &gt;::rvalue_forward_type &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a5cf4d25ab70321c4cabbf5ad1bb99697</anchor>
      <arglist>(const_iterator iter_, column_traits&lt; 0 &gt;::rvalue_type center_x, column_traits&lt; 1 &gt;::rvalue_type center_y, column_traits&lt; 2 &gt;::rvalue_type center_z, column_traits&lt; 3 &gt;::rvalue_type extents_x=0.5f, column_traits&lt; 4 &gt;::rvalue_type extents_y=0.5f, column_traits&lt; 5 &gt;::rvalue_type extents_z=0.5f, column_traits&lt; 6 &gt;::rvalue_type mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace(size_type{}, std::declval&lt; column_traits&lt; 0 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 1 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 2 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 3 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 4 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 5 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 6 &gt;::rvalue_forward_type &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a6535a7a5c9697bd4470c845ed5bbcb1a</anchor>
      <arglist>(size_type index_, const soagen::row&lt; Table, Columns... &gt; &amp;row_) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;() .emplace(size_type{}, std::declval&lt; const soagen::row&lt; Table, Columns... &gt; &amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a8456a75eea805c910ab69f503e0be485</anchor>
      <arglist>(const_iterator iter_, const soagen::row&lt; Table, Columns... &gt; &amp;row_) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;() .emplace(size_type{}, std::declval&lt; const soagen::row&lt; Table, Columns... &gt; &amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a180acef73da3b0d1a847beda431c24a2</anchor>
      <arglist>(size_type index_, CenterX &amp;&amp;center_x, CenterY &amp;&amp;center_y, CenterZ &amp;&amp;center_z, ExtentsX &amp;&amp;extents_x=0.5f, ExtentsY &amp;&amp;extents_y=0.5f, ExtentsZ &amp;&amp;extents_z=0.5f, Mass &amp;&amp;mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace(size_type{}, std::declval&lt; CenterX &amp;&amp; &gt;(), std::declval&lt; CenterY &amp;&amp; &gt;(), std::declval&lt; CenterZ &amp;&amp; &gt;(), std::declval&lt; ExtentsX &amp;&amp; &gt;(), std::declval&lt; ExtentsY &amp;&amp; &gt;(), std::declval&lt; ExtentsZ &amp;&amp; &gt;(), std::declval&lt; Mass &amp;&amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a7662bd3eb55f24347ce6dba6170b7041</anchor>
      <arglist>(const_iterator iter_, CenterX &amp;&amp;center_x, CenterY &amp;&amp;center_y, CenterZ &amp;&amp;center_z, ExtentsX &amp;&amp;extents_x=0.5f, ExtentsY &amp;&amp;extents_y=0.5f, ExtentsZ &amp;&amp;extents_z=0.5f, Mass &amp;&amp;mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace(size_type{}, std::declval&lt; CenterX &amp;&amp; &gt;(), std::declval&lt; CenterY &amp;&amp; &gt;(), std::declval&lt; CenterZ &amp;&amp; &gt;(), std::declval&lt; ExtentsX &amp;&amp; &gt;(), std::declval&lt; ExtentsY &amp;&amp; &gt;(), std::declval&lt; ExtentsZ &amp;&amp; &gt;(), std::declval&lt; Mass &amp;&amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>af0db9e31a017829a6b5cb11a9dc82a97</anchor>
      <arglist>(size_type index_, const soagen::row&lt; Table, Columns... &gt; &amp;row_) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;() .emplace(size_type{}, std::declval&lt; const soagen::row&lt; Table, Columns... &gt; &amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a9a6a4f4a2c9edb55db2eed9ded04ead1</anchor>
      <arglist>(const_iterator iter_, const soagen::row&lt; Table, Columns... &gt; &amp;row_) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;() .emplace(size_type{}, std::declval&lt; const soagen::row&lt; Table, Columns... &gt; &amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::byte *</type>
      <name>data</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a458ac020588a64bb9ae192cbecdcead8</anchor>
      <arglist>() noexcept(soagen::has_nothrow_data_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const std::byte *const</type>
      <name>data</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ab51fdd28b22c7ed85f189ef102d2cd04</anchor>
      <arglist>() noexcept(soagen::has_nothrow_data_member&lt; const table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr column_type&lt; Column &gt; *</type>
      <name>column</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a2a641f6146abdf6174a1107948c465e4</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::add_const_t&lt; column_type&lt; Column &gt; &gt; *</type>
      <name>column</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>af5e23463c10124397b1c79459f0cf1a0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>center_x</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ac6340bb69743f8d5277374582fdeb0c9</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>center_x</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>af7ed114f61fee1579e6c2221d0207d8c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>center_y</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a0f7cc17a16452e63190e6d18b1e4329e</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>center_y</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a033078ff705254f7ae6cda6ef2191b3f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>center_z</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a6a25452fef8a9a20ffdd4bda107f7530</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>center_z</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a8b8e2024fe3e104940554d964e02a939</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>extents_x</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a214fc9dd629aa987e2b49dfb043288d2</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>extents_x</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>aa9073c2d39a00f007eb51ca38dbe7d7f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>extents_y</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>abcf87b3a283b18c7ad6fc82ffabe1b20</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>extents_y</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ab13c2649de4dba4d8b61a03e6f21af35</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>extents_z</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a0cc979a249dddbeb584106904a72f245</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>extents_z</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ae8aff289df8adc9dbda8e44adbed0e96</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>mass</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>af4bf12b35edd3e0814a8228d0c57787a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>mass</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>aef95352740973bf8212e76fe907cb7c8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>for_each_column</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a15f14e211320ce6bc2426c16b557498d</anchor>
      <arglist>(Func &amp;&amp;func) noexcept(table_traits::for_each_column_ptr_nothrow_invocable&lt; Func &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>for_each_column</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ae14f13fced8a4130120f0bcaf9d067d9</anchor>
      <arglist>(Func &amp;&amp;func) const noexcept(table_traits::for_each_column_ptr_nothrow_invocable&lt; Func &amp;&amp;, true &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::row_type&lt; boxes &amp;, Columns... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a4f6eb1fbc156074c5a6fd73ad0d8813a</anchor>
      <arglist>(size_type index) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr row_type</type>
      <name>operator[]</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a58a774f50aec6f373540d0a0420378ef</anchor>
      <arglist>(size_type index) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr row_type</type>
      <name>at</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a26c74d06eacefabb88c0bb5f71c96a8e</anchor>
      <arglist>(size_type index) &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr row_type</type>
      <name>front</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a36ab4a53ed4bda8b2616da62b2de2bbb</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr row_type</type>
      <name>back</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>af73eb8f5e3e61847b734f6a06fa9a20b</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::row_type&lt; boxes &amp;&amp;, Columns... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ad7762debbda7f32bf5d6c486f07e1e30</anchor>
      <arglist>(size_type index) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr rvalue_row_type</type>
      <name>operator[]</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a0fb7fe7bddf46a3f814127090fdef814</anchor>
      <arglist>(size_type index) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr rvalue_row_type</type>
      <name>at</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a47d0d0c64f2bce29c8d415846564dd82</anchor>
      <arglist>(size_type index) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr rvalue_row_type</type>
      <name>front</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ac4230b1e373fd5e132392df9eb310331</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr rvalue_row_type</type>
      <name>back</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ac9c30453ef476be10d80f00db07a7a7f</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::row_type&lt; const boxes &amp;, Columns... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>adcbdb06cf30e10299bf6fbbdaa97ea2d</anchor>
      <arglist>(size_type index) const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_row_type</type>
      <name>operator[]</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a69de3173c9f1c5361548cbc613d71d75</anchor>
      <arglist>(size_type index) const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_row_type</type>
      <name>at</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a78db9cd2cdf3dc208fff5e7679730dc5</anchor>
      <arglist>(size_type index) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_row_type</type>
      <name>front</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a28796a982c57ea3a977d1557295efd22</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_row_type</type>
      <name>back</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ae50216d95648a45a8da24d3e98ce62f6</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; boxes &amp;, Columns... &gt;</type>
      <name>begin</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a38cad9f859e199fced6f61e56e690e1b</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; boxes &amp;, Columns... &gt;</type>
      <name>end</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a0195488fe6eeb003b0ae5d8695b55590</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; boxes &amp;&amp;, Columns... &gt;</type>
      <name>begin</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a77f126817e2a6269992e35d2ac3f5ee8</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; boxes &amp;&amp;, Columns... &gt;</type>
      <name>end</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>aad42eabef97077ca65034436b24b6736</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; const boxes &amp;, Columns... &gt;</type>
      <name>begin</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a4108ca879ec498585a720c13da42a075</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; const boxes &amp;, Columns... &gt;</type>
      <name>end</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a9cf2fa11b69ba008e39c5c366d157357</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; const boxes &amp;, Columns... &gt;</type>
      <name>cbegin</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ad7d208b305ad9db24fe72449474e5429</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; const boxes &amp;, Columns... &gt;</type>
      <name>cend</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a089d75354cd5575ceca9808affb5efdb</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>column_count</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>afaa773abdb9ef532c5a9f0e620b20346</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_type</type>
      <name>aligned_stride</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>af0361fb59169d8b55024aaa61443f26f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto &amp;</type>
      <name>column_name</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>aac799b93448ba55381670ab5be1992c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>af1de6b8326125457c073d8d439964d5d</anchor>
      <arglist>(const boxes &amp;lhs, const boxes &amp;rhs) noexcept(soagen::is_nothrow_equality_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a1afe9819ec24b878abee954830e1978c</anchor>
      <arglist>(const boxes &amp;lhs, const boxes &amp;rhs) noexcept(soagen::is_nothrow_equality_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a7f151b8aef59afec875f119f846ac342</anchor>
      <arglist>(const boxes &amp;lhs, const boxes &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a97f21f38b98f2fdaf973393825a37a86</anchor>
      <arglist>(const boxes &amp;lhs, const boxes &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ac9bfe5aeaefee1ceb1bd77ee6b43b7e0</anchor>
      <arglist>(const boxes &amp;lhs, const boxes &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a225cdcffa1c29725a6600e20e1cf0d7a</anchor>
      <arglist>(const boxes &amp;lhs, const boxes &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr table_type &amp;</type>
      <name>table</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a99563640025b1fb960ec361646528942</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr table_type &amp;&amp;</type>
      <name>table</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ac0ef0df0f8f31275d0c4133ddf3ab842</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const table_type &amp;</type>
      <name>table</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>aefe8fe689544b84cccdfbff0965b3c64</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a0e382d8361550b4947c6bc20ba87b23d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ad33f90666f5212fdcaa994199fea3bee</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>max_size</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a6ab29aa4d92e24c4bd6abff41d2bf79d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>allocation_size</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>aa5d4a754dcd04a4fd96d0f099d2d22a9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>reserve</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ae2305c967e3364d59220f5e61192729a</anchor>
      <arglist>(size_type new_cap) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().reserve(size_type{})))</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>capacity</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a81b31273b263010ea1029a700bfc0319</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>shrink_to_fit</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a86e4755492c40813995181b713c27d77</anchor>
      <arglist>() noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().shrink_to_fit()))</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>clear</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a10f4bd307be07ef1d39d6fd2e913599c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>erase</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ab39d31d636fe45ca86985583ce9f1ddb</anchor>
      <arglist>(size_type pos) noexcept(soagen::has_nothrow_erase_member&lt; table_type, size_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::optional&lt; size_type &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a96c5ba0baeea81ca33e2115153ee00a1</anchor>
      <arglist>(size_type pos) noexcept(soagen::has_nothrow_unordered_erase_member&lt; table_type, size_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>erase</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a43d8036dd8a29e94f8a67ec392e1a1da</anchor>
      <arglist>(iterator pos) noexcept(soagen::has_nothrow_erase_member&lt; table_type, size_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::optional&lt; iterator &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a25af7af4bc19e14a6bb933faa4f1d27c</anchor>
      <arglist>(iterator pos) noexcept(soagen::has_nothrow_unordered_erase_member&lt; table_type, size_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>erase</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a17899ec2d33f64993c5c8c05464c70bb</anchor>
      <arglist>(const_iterator pos) noexcept(soagen::has_nothrow_erase_member&lt; table_type, size_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::optional&lt; const_iterator &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a43d8831f172f71732e15d929f53725a5</anchor>
      <arglist>(const_iterator pos) noexcept(soagen::has_nothrow_unordered_erase_member&lt; table_type, size_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>pop_back</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>acaa8dac3c9162d6f073a9ea7cb951152</anchor>
      <arglist>(size_type num=1) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().pop_back(size_type{})))</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>resize</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a23b4be7232f48cd031ba8b85a1b2d3a7</anchor>
      <arglist>(size_type new_size) noexcept(soagen::has_nothrow_resize_member&lt; table_type, size_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ad2204ab6797d1a7b3c7daa4950c50e75</anchor>
      <arglist>(boxes &amp;other) noexcept(soagen::has_nothrow_swap_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>push_back</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ae3771d34b3f8ff3013e76178c33d3947</anchor>
      <arglist>(column_traits&lt; 0 &gt;::param_type center_x, column_traits&lt; 1 &gt;::param_type center_y, column_traits&lt; 2 &gt;::param_type center_z, column_traits&lt; 3 &gt;::param_type extents_x=0.5f, column_traits&lt; 4 &gt;::param_type extents_y=0.5f, column_traits&lt; 5 &gt;::param_type extents_z=0.5f, column_traits&lt; 6 &gt;::param_type mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace_back(std::declval&lt; column_traits&lt; 0 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 1 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 2 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 3 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 4 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 5 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 6 &gt;::param_forward_type &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>push_back</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a582a460d083b017ebbd87ac41c62a614</anchor>
      <arglist>(column_traits&lt; 0 &gt;::rvalue_type center_x, column_traits&lt; 1 &gt;::rvalue_type center_y, column_traits&lt; 2 &gt;::rvalue_type center_z, column_traits&lt; 3 &gt;::rvalue_type extents_x=0.5f, column_traits&lt; 4 &gt;::rvalue_type extents_y=0.5f, column_traits&lt; 5 &gt;::rvalue_type extents_z=0.5f, column_traits&lt; 6 &gt;::rvalue_type mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace_back(std::declval&lt; column_traits&lt; 0 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 1 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 2 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 3 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 4 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 5 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 6 &gt;::rvalue_forward_type &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>push_back</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a7a80bc4a5b6a87bc18063897db54a85f</anchor>
      <arglist>(const soagen::row&lt; Table, Columns... &gt; &amp;row_) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace_back(std::declval&lt; const soagen::row&lt; Table, Columns... &gt; &amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>emplace_back</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a8d96f4cd2cfaa6acd0b439fcf95a2f5b</anchor>
      <arglist>(CenterX &amp;&amp;center_x, CenterY &amp;&amp;center_y, CenterZ &amp;&amp;center_z, ExtentsX &amp;&amp;extents_x=0.5f, ExtentsY &amp;&amp;extents_y=0.5f, ExtentsZ &amp;&amp;extents_z=0.5f, Mass &amp;&amp;mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace_back(std::declval&lt; CenterX &amp;&amp; &gt;(), std::declval&lt; CenterY &amp;&amp; &gt;(), std::declval&lt; CenterZ &amp;&amp; &gt;(), std::declval&lt; ExtentsX &amp;&amp; &gt;(), std::declval&lt; ExtentsY &amp;&amp; &gt;(), std::declval&lt; ExtentsZ &amp;&amp; &gt;(), std::declval&lt; Mass &amp;&amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>emplace_back</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>abf3b58e863e02359eb2c65c45f9d5f77</anchor>
      <arglist>(const soagen::row&lt; Table, Columns... &gt; &amp;row_) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace_back(std::declval&lt; const soagen::row&lt; Table, Columns... &gt; &amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>afd484628f3f25671eb69067a5c3af435</anchor>
      <arglist>(size_type index_, column_traits&lt; 0 &gt;::param_type center_x, column_traits&lt; 1 &gt;::param_type center_y, column_traits&lt; 2 &gt;::param_type center_z, column_traits&lt; 3 &gt;::param_type extents_x=0.5f, column_traits&lt; 4 &gt;::param_type extents_y=0.5f, column_traits&lt; 5 &gt;::param_type extents_z=0.5f, column_traits&lt; 6 &gt;::param_type mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace(size_type{}, std::declval&lt; column_traits&lt; 0 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 1 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 2 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 3 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 4 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 5 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 6 &gt;::param_forward_type &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>adaf0638d94f0560b3896435077dd8bd1</anchor>
      <arglist>(const_iterator iter_, column_traits&lt; 0 &gt;::param_type center_x, column_traits&lt; 1 &gt;::param_type center_y, column_traits&lt; 2 &gt;::param_type center_z, column_traits&lt; 3 &gt;::param_type extents_x=0.5f, column_traits&lt; 4 &gt;::param_type extents_y=0.5f, column_traits&lt; 5 &gt;::param_type extents_z=0.5f, column_traits&lt; 6 &gt;::param_type mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace(size_type{}, std::declval&lt; column_traits&lt; 0 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 1 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 2 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 3 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 4 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 5 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 6 &gt;::param_forward_type &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a26ed176e113cc7f511b0c3ec7d405ba5</anchor>
      <arglist>(size_type index_, column_traits&lt; 0 &gt;::rvalue_type center_x, column_traits&lt; 1 &gt;::rvalue_type center_y, column_traits&lt; 2 &gt;::rvalue_type center_z, column_traits&lt; 3 &gt;::rvalue_type extents_x=0.5f, column_traits&lt; 4 &gt;::rvalue_type extents_y=0.5f, column_traits&lt; 5 &gt;::rvalue_type extents_z=0.5f, column_traits&lt; 6 &gt;::rvalue_type mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace(size_type{}, std::declval&lt; column_traits&lt; 0 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 1 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 2 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 3 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 4 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 5 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 6 &gt;::rvalue_forward_type &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a5cf4d25ab70321c4cabbf5ad1bb99697</anchor>
      <arglist>(const_iterator iter_, column_traits&lt; 0 &gt;::rvalue_type center_x, column_traits&lt; 1 &gt;::rvalue_type center_y, column_traits&lt; 2 &gt;::rvalue_type center_z, column_traits&lt; 3 &gt;::rvalue_type extents_x=0.5f, column_traits&lt; 4 &gt;::rvalue_type extents_y=0.5f, column_traits&lt; 5 &gt;::rvalue_type extents_z=0.5f, column_traits&lt; 6 &gt;::rvalue_type mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace(size_type{}, std::declval&lt; column_traits&lt; 0 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 1 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 2 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 3 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 4 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 5 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 6 &gt;::rvalue_forward_type &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a6535a7a5c9697bd4470c845ed5bbcb1a</anchor>
      <arglist>(size_type index_, const soagen::row&lt; Table, Columns... &gt; &amp;row_) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;() .emplace(size_type{}, std::declval&lt; const soagen::row&lt; Table, Columns... &gt; &amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a8456a75eea805c910ab69f503e0be485</anchor>
      <arglist>(const_iterator iter_, const soagen::row&lt; Table, Columns... &gt; &amp;row_) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;() .emplace(size_type{}, std::declval&lt; const soagen::row&lt; Table, Columns... &gt; &amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a180acef73da3b0d1a847beda431c24a2</anchor>
      <arglist>(size_type index_, CenterX &amp;&amp;center_x, CenterY &amp;&amp;center_y, CenterZ &amp;&amp;center_z, ExtentsX &amp;&amp;extents_x=0.5f, ExtentsY &amp;&amp;extents_y=0.5f, ExtentsZ &amp;&amp;extents_z=0.5f, Mass &amp;&amp;mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace(size_type{}, std::declval&lt; CenterX &amp;&amp; &gt;(), std::declval&lt; CenterY &amp;&amp; &gt;(), std::declval&lt; CenterZ &amp;&amp; &gt;(), std::declval&lt; ExtentsX &amp;&amp; &gt;(), std::declval&lt; ExtentsY &amp;&amp; &gt;(), std::declval&lt; ExtentsZ &amp;&amp; &gt;(), std::declval&lt; Mass &amp;&amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a7662bd3eb55f24347ce6dba6170b7041</anchor>
      <arglist>(const_iterator iter_, CenterX &amp;&amp;center_x, CenterY &amp;&amp;center_y, CenterZ &amp;&amp;center_z, ExtentsX &amp;&amp;extents_x=0.5f, ExtentsY &amp;&amp;extents_y=0.5f, ExtentsZ &amp;&amp;extents_z=0.5f, Mass &amp;&amp;mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace(size_type{}, std::declval&lt; CenterX &amp;&amp; &gt;(), std::declval&lt; CenterY &amp;&amp; &gt;(), std::declval&lt; CenterZ &amp;&amp; &gt;(), std::declval&lt; ExtentsX &amp;&amp; &gt;(), std::declval&lt; ExtentsY &amp;&amp; &gt;(), std::declval&lt; ExtentsZ &amp;&amp; &gt;(), std::declval&lt; Mass &amp;&amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>af0db9e31a017829a6b5cb11a9dc82a97</anchor>
      <arglist>(size_type index_, const soagen::row&lt; Table, Columns... &gt; &amp;row_) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;() .emplace(size_type{}, std::declval&lt; const soagen::row&lt; Table, Columns... &gt; &amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a9a6a4f4a2c9edb55db2eed9ded04ead1</anchor>
      <arglist>(const_iterator iter_, const soagen::row&lt; Table, Columns... &gt; &amp;row_) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;() .emplace(size_type{}, std::declval&lt; const soagen::row&lt; Table, Columns... &gt; &amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::byte *</type>
      <name>data</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a458ac020588a64bb9ae192cbecdcead8</anchor>
      <arglist>() noexcept(soagen::has_nothrow_data_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const std::byte *const</type>
      <name>data</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ab51fdd28b22c7ed85f189ef102d2cd04</anchor>
      <arglist>() noexcept(soagen::has_nothrow_data_member&lt; const table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr column_type&lt; Column &gt; *</type>
      <name>column</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a2a641f6146abdf6174a1107948c465e4</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::add_const_t&lt; column_type&lt; Column &gt; &gt; *</type>
      <name>column</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>af5e23463c10124397b1c79459f0cf1a0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>center_x</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ac6340bb69743f8d5277374582fdeb0c9</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>center_x</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>af7ed114f61fee1579e6c2221d0207d8c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>center_y</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a0f7cc17a16452e63190e6d18b1e4329e</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>center_y</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a033078ff705254f7ae6cda6ef2191b3f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>center_z</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a6a25452fef8a9a20ffdd4bda107f7530</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>center_z</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a8b8e2024fe3e104940554d964e02a939</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>extents_x</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a214fc9dd629aa987e2b49dfb043288d2</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>extents_x</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>aa9073c2d39a00f007eb51ca38dbe7d7f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>extents_y</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>abcf87b3a283b18c7ad6fc82ffabe1b20</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>extents_y</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ab13c2649de4dba4d8b61a03e6f21af35</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>extents_z</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a0cc979a249dddbeb584106904a72f245</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>extents_z</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ae8aff289df8adc9dbda8e44adbed0e96</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>mass</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>af4bf12b35edd3e0814a8228d0c57787a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>mass</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>aef95352740973bf8212e76fe907cb7c8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>for_each_column</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a15f14e211320ce6bc2426c16b557498d</anchor>
      <arglist>(Func &amp;&amp;func) noexcept(table_traits::for_each_column_ptr_nothrow_invocable&lt; Func &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>for_each_column</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ae14f13fced8a4130120f0bcaf9d067d9</anchor>
      <arglist>(Func &amp;&amp;func) const noexcept(table_traits::for_each_column_ptr_nothrow_invocable&lt; Func &amp;&amp;, true &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::row_type&lt; boxes &amp;, Columns... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a4f6eb1fbc156074c5a6fd73ad0d8813a</anchor>
      <arglist>(size_type index) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr row_type</type>
      <name>operator[]</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a58a774f50aec6f373540d0a0420378ef</anchor>
      <arglist>(size_type index) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr row_type</type>
      <name>at</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a26c74d06eacefabb88c0bb5f71c96a8e</anchor>
      <arglist>(size_type index) &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr row_type</type>
      <name>front</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a36ab4a53ed4bda8b2616da62b2de2bbb</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr row_type</type>
      <name>back</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>af73eb8f5e3e61847b734f6a06fa9a20b</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::row_type&lt; boxes &amp;&amp;, Columns... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ad7762debbda7f32bf5d6c486f07e1e30</anchor>
      <arglist>(size_type index) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr rvalue_row_type</type>
      <name>operator[]</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a0fb7fe7bddf46a3f814127090fdef814</anchor>
      <arglist>(size_type index) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr rvalue_row_type</type>
      <name>at</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a47d0d0c64f2bce29c8d415846564dd82</anchor>
      <arglist>(size_type index) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr rvalue_row_type</type>
      <name>front</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ac4230b1e373fd5e132392df9eb310331</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr rvalue_row_type</type>
      <name>back</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ac9c30453ef476be10d80f00db07a7a7f</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::row_type&lt; const boxes &amp;, Columns... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>adcbdb06cf30e10299bf6fbbdaa97ea2d</anchor>
      <arglist>(size_type index) const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_row_type</type>
      <name>operator[]</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a69de3173c9f1c5361548cbc613d71d75</anchor>
      <arglist>(size_type index) const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_row_type</type>
      <name>at</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a78db9cd2cdf3dc208fff5e7679730dc5</anchor>
      <arglist>(size_type index) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_row_type</type>
      <name>front</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a28796a982c57ea3a977d1557295efd22</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_row_type</type>
      <name>back</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ae50216d95648a45a8da24d3e98ce62f6</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; boxes &amp;, Columns... &gt;</type>
      <name>begin</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a38cad9f859e199fced6f61e56e690e1b</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; boxes &amp;, Columns... &gt;</type>
      <name>end</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a0195488fe6eeb003b0ae5d8695b55590</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; boxes &amp;&amp;, Columns... &gt;</type>
      <name>begin</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a77f126817e2a6269992e35d2ac3f5ee8</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; boxes &amp;&amp;, Columns... &gt;</type>
      <name>end</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>aad42eabef97077ca65034436b24b6736</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; const boxes &amp;, Columns... &gt;</type>
      <name>begin</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a4108ca879ec498585a720c13da42a075</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; const boxes &amp;, Columns... &gt;</type>
      <name>end</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a9cf2fa11b69ba008e39c5c366d157357</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; const boxes &amp;, Columns... &gt;</type>
      <name>cbegin</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ad7d208b305ad9db24fe72449474e5429</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; const boxes &amp;, Columns... &gt;</type>
      <name>cend</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a089d75354cd5575ceca9808affb5efdb</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>af1de6b8326125457c073d8d439964d5d</anchor>
      <arglist>(const boxes &amp;lhs, const boxes &amp;rhs) noexcept(soagen::is_nothrow_equality_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a1afe9819ec24b878abee954830e1978c</anchor>
      <arglist>(const boxes &amp;lhs, const boxes &amp;rhs) noexcept(soagen::is_nothrow_equality_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a7f151b8aef59afec875f119f846ac342</anchor>
      <arglist>(const boxes &amp;lhs, const boxes &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a97f21f38b98f2fdaf973393825a37a86</anchor>
      <arglist>(const boxes &amp;lhs, const boxes &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ac9bfe5aeaefee1ceb1bd77ee6b43b7e0</anchor>
      <arglist>(const boxes &amp;lhs, const boxes &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a225cdcffa1c29725a6600e20e1cf0d7a</anchor>
      <arglist>(const boxes &amp;lhs, const boxes &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>soagen::column_traits</name>
    <filename>structsoagen_1_1column__traits.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>Align</templarg>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>storage_type</name>
      <anchorfile>structsoagen_1_1column__traits.html</anchorfile>
      <anchor>af416a53e25bcef17f52be0abfbcf9fcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ValueType</type>
      <name>value_type</name>
      <anchorfile>structsoagen_1_1column__traits.html</anchorfile>
      <anchor>a238c18b496954da0e2bb82b05e69932a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParamType</type>
      <name>param_type</name>
      <anchorfile>structsoagen_1_1column__traits.html</anchorfile>
      <anchor>ab3b6d538b407f0bb20a90efe52020a6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::rvalue_type&lt; param_type &gt;</type>
      <name>rvalue_type</name>
      <anchorfile>structsoagen_1_1column__traits.html</anchorfile>
      <anchor>acb98810256d18dc27a90593af64af875</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>alignment</name>
      <anchorfile>structsoagen_1_1column__traits.html</anchorfile>
      <anchor>a2fb54b25bbecffbaa41b3478d3be1275</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>aligned_stride</name>
      <anchorfile>structsoagen_1_1column__traits.html</anchorfile>
      <anchor>ae470a65843e286e65729c9855f41118c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>soagen::emplacer</name>
    <filename>structsoagen_1_1emplacer.html</filename>
    <templarg>Args</templarg>
  </compound>
  <compound kind="class">
    <name>soagen::iterator</name>
    <filename>classsoagen_1_1iterator.html</filename>
    <templarg></templarg>
    <templarg>Columns</templarg>
    <member kind="typedef">
      <type>remove_cvref&lt; Table &gt;</type>
      <name>table_type</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a1425bea4f7dd71141ff1453ac9415b00</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Table</type>
      <name>table_ref</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>adb6cb52980743dc604be458e808d502f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename table_type::difference_type</type>
      <name>difference_type</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a24db054f296e0a48f03ef0320351b07a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>row&lt; Table, Columns... &gt;</type>
      <name>row_type</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a7d8f97161fa0d70952f32886aeac2749</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>row_type</type>
      <name>value_type</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a68fab7106d025950a23e4c3d6f3b72f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>row_type</type>
      <name>reference</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a6d5ffc4d83214b1577d13b99a9e37ba1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::random_access_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>ae1e5d7ca5eaa9d5d8507a0d03aa3c7c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>iterator</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>ac269e699b1e3ee6b60387a3234b67fda</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>iterator</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a801e090fce572ce5de6ed9b1caed2bca</anchor>
      <arglist>(table_ref tbl, difference_type pos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr difference_type</type>
      <name>operator-</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>ad5f0178980af5fc0804ed3affe994f80</anchor>
      <arglist>(const iterator&lt; T, Cols... &gt; &amp;rhs) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>operator*</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>af527bc64284738934054fd142f7ed425</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr detail::arrow_proxy&lt; row_type &gt;</type>
      <name>operator-&gt;</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>aba1ac1d8bde4b321e83d07c551d35eb7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>operator[]</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>aecca7968bbd070958aced80f23fe19d3</anchor>
      <arglist>(difference_type offset) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a24ebc7856d468676127838cf57d63204</anchor>
      <arglist>(const iterator&lt; T, Cols... &gt; &amp;rhs) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a138367725fc5872ca170bd7a6d49b48e</anchor>
      <arglist>(const iterator&lt; T, Cols... &gt; &amp;rhs) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a0cbfed61243974fa940c612ed8779612</anchor>
      <arglist>(const iterator&lt; T, Cols... &gt; &amp;rhs) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a232611cbd2d7fd07d494193db0750894</anchor>
      <arglist>(const iterator&lt; T, Cols... &gt; &amp;rhs) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator iterator&lt; T, Cols... &gt;</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>ad1eb6bd1096ac2557efbeda55e033c0f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator difference_type</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a8204d9e0cee138cb3f30267a31b08de5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a734fd3df3b6d80c9d71ff8d8f3bf776e</anchor>
      <arglist>(iterator &amp;it) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator</type>
      <name>operator++</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>afa985da3b39b42c99544ae16cae0e0dc</anchor>
      <arglist>(iterator &amp;it, int) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator &amp;</type>
      <name>operator+=</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>acbfffd554042f2882c2baa4afd134c27</anchor>
      <arglist>(iterator &amp;it, difference_type n) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator</type>
      <name>operator+</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>afcc32be7a707083d7a68b0166ad0d2fc</anchor>
      <arglist>(const iterator &amp;it, difference_type n) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator &amp;</type>
      <name>operator--</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a6151a5148a247f521cf4e148fc65f85e</anchor>
      <arglist>(iterator &amp;it) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator</type>
      <name>operator--</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a15ade785b30bd7ab2b73ad9cce8af505</anchor>
      <arglist>(iterator &amp;it, int) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator &amp;</type>
      <name>operator-=</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>ab94c4d5c5401feb11a5700c787026e47</anchor>
      <arglist>(iterator &amp;it, difference_type n) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator</type>
      <name>operator-</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a5e0bd834a7f89cfd220c53bc3c9baaae</anchor>
      <arglist>(const iterator &amp;it, difference_type n) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr difference_type</type>
      <name>operator-</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>ad5f0178980af5fc0804ed3affe994f80</anchor>
      <arglist>(const iterator&lt; T, Cols... &gt; &amp;rhs) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>operator*</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>af527bc64284738934054fd142f7ed425</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr detail::arrow_proxy&lt; row_type &gt;</type>
      <name>operator-&gt;</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>aba1ac1d8bde4b321e83d07c551d35eb7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>operator[]</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>aecca7968bbd070958aced80f23fe19d3</anchor>
      <arglist>(difference_type offset) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>ae8ec1930767d75925cf417a28628e255</anchor>
      <arglist>(const iterator&lt; T, Cols... &gt; &amp;rhs) const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>aae008963a245dc475a120628c995c12f</anchor>
      <arglist>(const iterator &amp;lhs, const iterator&lt; T, Cols... &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a24ebc7856d468676127838cf57d63204</anchor>
      <arglist>(const iterator&lt; T, Cols... &gt; &amp;rhs) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a138367725fc5872ca170bd7a6d49b48e</anchor>
      <arglist>(const iterator&lt; T, Cols... &gt; &amp;rhs) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a0cbfed61243974fa940c612ed8779612</anchor>
      <arglist>(const iterator&lt; T, Cols... &gt; &amp;rhs) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a232611cbd2d7fd07d494193db0750894</anchor>
      <arglist>(const iterator&lt; T, Cols... &gt; &amp;rhs) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator iterator&lt; T, Cols... &gt;</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>ad1eb6bd1096ac2557efbeda55e033c0f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator difference_type</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a8204d9e0cee138cb3f30267a31b08de5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a734fd3df3b6d80c9d71ff8d8f3bf776e</anchor>
      <arglist>(iterator &amp;it) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator</type>
      <name>operator++</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>afa985da3b39b42c99544ae16cae0e0dc</anchor>
      <arglist>(iterator &amp;it, int) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator &amp;</type>
      <name>operator+=</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>acbfffd554042f2882c2baa4afd134c27</anchor>
      <arglist>(iterator &amp;it, difference_type n) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator</type>
      <name>operator+</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>afcc32be7a707083d7a68b0166ad0d2fc</anchor>
      <arglist>(const iterator &amp;it, difference_type n) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator &amp;</type>
      <name>operator--</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a6151a5148a247f521cf4e148fc65f85e</anchor>
      <arglist>(iterator &amp;it) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator</type>
      <name>operator--</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a15ade785b30bd7ab2b73ad9cce8af505</anchor>
      <arglist>(iterator &amp;it, int) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator &amp;</type>
      <name>operator-=</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>ab94c4d5c5401feb11a5700c787026e47</anchor>
      <arglist>(iterator &amp;it, difference_type n) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator</type>
      <name>operator-</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a5e0bd834a7f89cfd220c53bc3c9baaae</anchor>
      <arglist>(const iterator &amp;it, difference_type n) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>soagen::row</name>
    <filename>structsoagen_1_1row.html</filename>
    <templarg></templarg>
    <templarg>Columns</templarg>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>structsoagen_1_1row.html</anchorfile>
      <anchor>a7869c499e91447116e9ef958ef62a001</anchor>
      <arglist>(const row &amp;lhs, const row&lt; T, Columns... &gt; &amp;rhs) noexcept(table_traits_type&lt; remove_cvref&lt; Table &gt;&gt;::all_nothrow_equality_comparable)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>structsoagen_1_1row.html</anchorfile>
      <anchor>a6276c1071974968c161afab2b4788c0a</anchor>
      <arglist>(const row &amp;lhs, const row&lt; T, Columns... &gt; &amp;rhs) noexcept(table_traits_type&lt; remove_cvref&lt; Table &gt;&gt;::all_nothrow_equality_comparable)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>structsoagen_1_1row.html</anchorfile>
      <anchor>aeb90cd3b79c25e36c31fd7c841d345b3</anchor>
      <arglist>(const row &amp;lhs, const row&lt; T, Columns... &gt; &amp;rhs) noexcept(table_traits_type&lt; remove_cvref&lt; Table &gt;&gt;::all_nothrow_less_than_comparable)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>structsoagen_1_1row.html</anchorfile>
      <anchor>a96f5e7b7e697a1149e49a9fe974cae14</anchor>
      <arglist>(const row &amp;lhs, const row&lt; T, Columns... &gt; &amp;rhs) noexcept(table_traits_type&lt; remove_cvref&lt; Table &gt;&gt;::all_nothrow_less_than_comparable)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>structsoagen_1_1row.html</anchorfile>
      <anchor>a7eadb12421d84758725e918b457b098a</anchor>
      <arglist>(const row &amp;lhs, const row&lt; T, Columns... &gt; &amp;rhs) noexcept(table_traits_type&lt; remove_cvref&lt; Table &gt;&gt;::all_nothrow_less_than_comparable)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>structsoagen_1_1row.html</anchorfile>
      <anchor>ac3e2ca5f629b5f149eba5ccd1b92f549</anchor>
      <arglist>(const row &amp;lhs, const row&lt; T, Columns... &gt; &amp;rhs) noexcept(table_traits_type&lt; remove_cvref&lt; Table &gt;&gt;::all_nothrow_less_than_comparable)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>structsoagen_1_1row.html</anchorfile>
      <anchor>a7869c499e91447116e9ef958ef62a001</anchor>
      <arglist>(const row &amp;lhs, const row&lt; T, Columns... &gt; &amp;rhs) noexcept(table_traits_type&lt; remove_cvref&lt; Table &gt;&gt;::all_nothrow_equality_comparable)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>structsoagen_1_1row.html</anchorfile>
      <anchor>a6276c1071974968c161afab2b4788c0a</anchor>
      <arglist>(const row &amp;lhs, const row&lt; T, Columns... &gt; &amp;rhs) noexcept(table_traits_type&lt; remove_cvref&lt; Table &gt;&gt;::all_nothrow_equality_comparable)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>structsoagen_1_1row.html</anchorfile>
      <anchor>aeb90cd3b79c25e36c31fd7c841d345b3</anchor>
      <arglist>(const row &amp;lhs, const row&lt; T, Columns... &gt; &amp;rhs) noexcept(table_traits_type&lt; remove_cvref&lt; Table &gt;&gt;::all_nothrow_less_than_comparable)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>structsoagen_1_1row.html</anchorfile>
      <anchor>a96f5e7b7e697a1149e49a9fe974cae14</anchor>
      <arglist>(const row &amp;lhs, const row&lt; T, Columns... &gt; &amp;rhs) noexcept(table_traits_type&lt; remove_cvref&lt; Table &gt;&gt;::all_nothrow_less_than_comparable)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>structsoagen_1_1row.html</anchorfile>
      <anchor>a7eadb12421d84758725e918b457b098a</anchor>
      <arglist>(const row &amp;lhs, const row&lt; T, Columns... &gt; &amp;rhs) noexcept(table_traits_type&lt; remove_cvref&lt; Table &gt;&gt;::all_nothrow_less_than_comparable)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>structsoagen_1_1row.html</anchorfile>
      <anchor>ac3e2ca5f629b5f149eba5ccd1b92f549</anchor>
      <arglist>(const row &amp;lhs, const row&lt; T, Columns... &gt; &amp;rhs) noexcept(table_traits_type&lt; remove_cvref&lt; Table &gt;&gt;::all_nothrow_less_than_comparable)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>soagen::examples::spheres</name>
    <filename>classsoagen_1_1examples_1_1spheres.html</filename>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a08c94a4942bcca1038a28a00fc4a50f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ab9e836fc78bd3a4be98e921027c4cfb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::allocator_type&lt; spheres &gt;</type>
      <name>allocator_type</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a910d7d27563a2e6bf62047cde7dfe4e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::table_type&lt; spheres &gt;</type>
      <name>table_type</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>aaf24a52e7021d0bd7e988c20cb35b02c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::table_traits_type&lt; spheres &gt;</type>
      <name>table_traits</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>aef225f6c4ed449740c52fd96c15c0282</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename table_traits::template column&lt; Column &gt;</type>
      <name>column_traits</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>afb554b3afebc930c36b25171525250dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename column_traits&lt; Column &gt;::value_type</type>
      <name>column_type</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a7b1fcfab40c4aa9deed3550df1f1890d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::iterator_type&lt; spheres &amp; &gt;</type>
      <name>iterator</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ace10e76a0b3a595ad91d594c13880821</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::iterator_type&lt; const spheres &amp; &gt;</type>
      <name>const_iterator</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a1cfa38fe1fb4e22de0092b3ca2570d96</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::iterator_type&lt; spheres &amp;&amp; &gt;</type>
      <name>rvalue_iterator</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ad16f6268ed50f6b4bff4df653f17efea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::row_type&lt; spheres &amp; &gt;</type>
      <name>row_type</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>abf005229546feba2a94ffc6159f46fb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::row_type&lt; const spheres &amp; &gt;</type>
      <name>const_row_type</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a2292841fdc26867ac5f06c8df71038dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::row_type&lt; spheres &amp;&amp; &gt;</type>
      <name>rvalue_row_type</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>addc39246b6b7ecf6118120406d48d2ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>column_indices</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a9d599274d386a3709fb5a1e60a49140e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>spheres</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a8c9d746e87aa5a834949ca64106f6691</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>spheres</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a8a5497999770b47e13c75ee7b6d7d931</anchor>
      <arglist>(spheres &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>operator=</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ae7f82d0a8fc78f13ce29dce49c48b4a9</anchor>
      <arglist>(spheres &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>spheres</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a9c614147cad3baf75b3cd8c9d9c7e7e0</anchor>
      <arglist>(const spheres &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>operator=</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a9c45fd146c1dde07978dfb809caa6e71</anchor>
      <arglist>(const spheres &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~spheres</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ae8b5593b8cdb4f45cad89051da5017ef</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>spheres</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>abca5038237b135340c913b0b59ca0327</anchor>
      <arglist>(const allocator_type &amp;alloc) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>spheres</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ac067f40e77955ad3c2028578c5c2f777</anchor>
      <arglist>(allocator_type &amp;&amp;alloc) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr allocator_type</type>
      <name>get_allocator</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ad06d1f6f2aa8cda39360bf601eaf1217</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr table_type &amp;</type>
      <name>table</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a7e6b36eecf49e305fa8eb99ad79c9460</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr table_type &amp;&amp;</type>
      <name>table</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a277f06c64736f3e2d4d28d03c48f1ef0</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const table_type &amp;</type>
      <name>table</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a6254470367cdea596472975259c39a97</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a21db600b74615cf6bac286c6e1b5e95a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a437412ecf84dbccf377c5fc29910f74e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>max_size</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a54f75cec867b90bcabbb404d0edefe88</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>allocation_size</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ada9563d84c3e6d5edb6484843e611b68</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>reserve</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a72d550692d76e610b4deb7babf33015f</anchor>
      <arglist>(size_type new_cap) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().reserve(size_type{})))</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>capacity</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a47f8df10605e9cab275bb8c2ca4a8876</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>shrink_to_fit</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a643ac62bb09e8f02561e8ccc0747a01a</anchor>
      <arglist>() noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().shrink_to_fit()))</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>clear</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a702709217d1004d41a2f26220a262cda</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>erase</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>aca6fc439f5dadd4a2d2ccf30e52cbd5e</anchor>
      <arglist>(size_type pos) noexcept(soagen::has_nothrow_erase_member&lt; table_type, size_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::optional&lt; size_type &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a6f543d63afa4b60d14a812f267c0218b</anchor>
      <arglist>(size_type pos) noexcept(soagen::has_nothrow_unordered_erase_member&lt; table_type, size_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>erase</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ae1120e84abd48b65da64e6633fa6f156</anchor>
      <arglist>(iterator pos) noexcept(soagen::has_nothrow_erase_member&lt; table_type, size_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::optional&lt; iterator &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a09806af646873dc051912e37d0a56e2f</anchor>
      <arglist>(iterator pos) noexcept(soagen::has_nothrow_unordered_erase_member&lt; table_type, size_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>erase</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a60a2ff735a4995a960453d4c0ddba56c</anchor>
      <arglist>(const_iterator pos) noexcept(soagen::has_nothrow_erase_member&lt; table_type, size_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::optional&lt; const_iterator &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>aa51ad1a1483d7520368ea201ffc3318b</anchor>
      <arglist>(const_iterator pos) noexcept(soagen::has_nothrow_unordered_erase_member&lt; table_type, size_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>pop_back</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>afd9a9bf8f9e4f131e8a6a0b246d5e654</anchor>
      <arglist>(size_type num=1) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().pop_back(size_type{})))</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>resize</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a8f6b1c805bc0e3190f10666f91f50c9c</anchor>
      <arglist>(size_type new_size) noexcept(soagen::has_nothrow_resize_member&lt; table_type, size_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a0489cf91ad00e97256a8ed4f42394fac</anchor>
      <arglist>(spheres &amp;other) noexcept(soagen::has_nothrow_swap_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>push_back</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a75a6e68b3823283949cbdc922c2e39b8</anchor>
      <arglist>(column_traits&lt; 0 &gt;::param_type center_x, column_traits&lt; 1 &gt;::param_type center_y, column_traits&lt; 2 &gt;::param_type center_z, column_traits&lt; 3 &gt;::param_type radius=0.5f, column_traits&lt; 4 &gt;::param_type mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace_back(std::declval&lt; column_traits&lt; 0 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 1 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 2 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 3 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 4 &gt;::param_forward_type &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>push_back</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ad480b4f2cd561e6868aac7d5785ad955</anchor>
      <arglist>(column_traits&lt; 0 &gt;::rvalue_type center_x, column_traits&lt; 1 &gt;::rvalue_type center_y, column_traits&lt; 2 &gt;::rvalue_type center_z, column_traits&lt; 3 &gt;::rvalue_type radius=0.5f, column_traits&lt; 4 &gt;::rvalue_type mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace_back(std::declval&lt; column_traits&lt; 0 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 1 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 2 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 3 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 4 &gt;::rvalue_forward_type &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>push_back</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a0f8af81e7c040bc55c0691e1ce3eb79b</anchor>
      <arglist>(const soagen::row&lt; Table, Columns... &gt; &amp;row_) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace_back(std::declval&lt; const soagen::row&lt; Table, Columns... &gt; &amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>emplace_back</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ac11b937021f38e32ff6d8c6e8b629a5a</anchor>
      <arglist>(CenterX &amp;&amp;center_x, CenterY &amp;&amp;center_y, CenterZ &amp;&amp;center_z, Radius &amp;&amp;radius=0.5f, Mass &amp;&amp;mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace_back(std::declval&lt; CenterX &amp;&amp; &gt;(), std::declval&lt; CenterY &amp;&amp; &gt;(), std::declval&lt; CenterZ &amp;&amp; &gt;(), std::declval&lt; Radius &amp;&amp; &gt;(), std::declval&lt; Mass &amp;&amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>emplace_back</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>af715e7a97592c81097292ae4ca7ab342</anchor>
      <arglist>(const soagen::row&lt; Table, Columns... &gt; &amp;row_) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace_back(std::declval&lt; const soagen::row&lt; Table, Columns... &gt; &amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ab6e899b65b1ddcab7c79593b563ddb2b</anchor>
      <arglist>(size_type index_, column_traits&lt; 0 &gt;::param_type center_x, column_traits&lt; 1 &gt;::param_type center_y, column_traits&lt; 2 &gt;::param_type center_z, column_traits&lt; 3 &gt;::param_type radius=0.5f, column_traits&lt; 4 &gt;::param_type mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace(size_type{}, std::declval&lt; column_traits&lt; 0 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 1 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 2 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 3 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 4 &gt;::param_forward_type &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a2c40d9405b1e9905369dde6a25a917bf</anchor>
      <arglist>(const_iterator iter_, column_traits&lt; 0 &gt;::param_type center_x, column_traits&lt; 1 &gt;::param_type center_y, column_traits&lt; 2 &gt;::param_type center_z, column_traits&lt; 3 &gt;::param_type radius=0.5f, column_traits&lt; 4 &gt;::param_type mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace(size_type{}, std::declval&lt; column_traits&lt; 0 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 1 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 2 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 3 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 4 &gt;::param_forward_type &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a7bc3ad334bf070562faad179952ca8e4</anchor>
      <arglist>(size_type index_, column_traits&lt; 0 &gt;::rvalue_type center_x, column_traits&lt; 1 &gt;::rvalue_type center_y, column_traits&lt; 2 &gt;::rvalue_type center_z, column_traits&lt; 3 &gt;::rvalue_type radius=0.5f, column_traits&lt; 4 &gt;::rvalue_type mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace(size_type{}, std::declval&lt; column_traits&lt; 0 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 1 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 2 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 3 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 4 &gt;::rvalue_forward_type &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a989b94ce972defba1dd5bb981bb5243b</anchor>
      <arglist>(const_iterator iter_, column_traits&lt; 0 &gt;::rvalue_type center_x, column_traits&lt; 1 &gt;::rvalue_type center_y, column_traits&lt; 2 &gt;::rvalue_type center_z, column_traits&lt; 3 &gt;::rvalue_type radius=0.5f, column_traits&lt; 4 &gt;::rvalue_type mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace(size_type{}, std::declval&lt; column_traits&lt; 0 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 1 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 2 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 3 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 4 &gt;::rvalue_forward_type &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a94b9d27f4e39cb875e021e31ca8ae4e3</anchor>
      <arglist>(size_type index_, const soagen::row&lt; Table, Columns... &gt; &amp;row_) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;() .emplace(size_type{}, std::declval&lt; const soagen::row&lt; Table, Columns... &gt; &amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>aa26f37e4bc213485431be54cb71fae41</anchor>
      <arglist>(const_iterator iter_, const soagen::row&lt; Table, Columns... &gt; &amp;row_) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;() .emplace(size_type{}, std::declval&lt; const soagen::row&lt; Table, Columns... &gt; &amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a2a7b996718075ee5ba341f9a4c8ced6b</anchor>
      <arglist>(size_type index_, CenterX &amp;&amp;center_x, CenterY &amp;&amp;center_y, CenterZ &amp;&amp;center_z, Radius &amp;&amp;radius=0.5f, Mass &amp;&amp;mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace(size_type{}, std::declval&lt; CenterX &amp;&amp; &gt;(), std::declval&lt; CenterY &amp;&amp; &gt;(), std::declval&lt; CenterZ &amp;&amp; &gt;(), std::declval&lt; Radius &amp;&amp; &gt;(), std::declval&lt; Mass &amp;&amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>afad613251e51044cbbad9a41e1c34245</anchor>
      <arglist>(const_iterator iter_, CenterX &amp;&amp;center_x, CenterY &amp;&amp;center_y, CenterZ &amp;&amp;center_z, Radius &amp;&amp;radius=0.5f, Mass &amp;&amp;mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace(size_type{}, std::declval&lt; CenterX &amp;&amp; &gt;(), std::declval&lt; CenterY &amp;&amp; &gt;(), std::declval&lt; CenterZ &amp;&amp; &gt;(), std::declval&lt; Radius &amp;&amp; &gt;(), std::declval&lt; Mass &amp;&amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a635b04fc1d18dd960bb4d2cece963ca1</anchor>
      <arglist>(size_type index_, const soagen::row&lt; Table, Columns... &gt; &amp;row_) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;() .emplace(size_type{}, std::declval&lt; const soagen::row&lt; Table, Columns... &gt; &amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a4c225cf3afa24241de80cab054035665</anchor>
      <arglist>(const_iterator iter_, const soagen::row&lt; Table, Columns... &gt; &amp;row_) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;() .emplace(size_type{}, std::declval&lt; const soagen::row&lt; Table, Columns... &gt; &amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::byte *</type>
      <name>data</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ae2c0c1bef674ad8d80eec45b81f7d67e</anchor>
      <arglist>() noexcept(soagen::has_nothrow_data_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const std::byte *const</type>
      <name>data</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a9bfa97f5c5d810a4af723f0e70c3cb05</anchor>
      <arglist>() noexcept(soagen::has_nothrow_data_member&lt; const table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr column_type&lt; Column &gt; *</type>
      <name>column</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a67a5c5fe70b4932d2b3f747c96223e66</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::add_const_t&lt; column_type&lt; Column &gt; &gt; *</type>
      <name>column</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a8d9e06c6cfc7ed698beba45529024dab</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>center_x</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>aea05122bb9759daec15a7a5c9eb25d46</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>center_x</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a44a0081edf5fbf043c4804deab132cbd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>center_y</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>aaf8083ab9a33b02d820f238c78cea296</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>center_y</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a27d2a022c370cf882e8f0583046ccf71</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>center_z</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a2fea223a8afe6b475e625fb81d409af7</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>center_z</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a63031f4cb3faad18f152955b4a92ad93</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>radius</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ac9f501b290fa85b358bd2a4fa67f5c99</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>radius</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a318449bf18c7b46ea77e7f56887ffc1b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>mass</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a509dc20b825074d8ea67907869b4c258</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>mass</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a35c9dd59de00c0f0a56027ff3623dd36</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>for_each_column</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a22d2cacb142ebfdfad69f24f0b7c6c79</anchor>
      <arglist>(Func &amp;&amp;func) noexcept(table_traits::for_each_column_ptr_nothrow_invocable&lt; Func &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>for_each_column</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a956a1e994cf509240927a524864b89bd</anchor>
      <arglist>(Func &amp;&amp;func) const noexcept(table_traits::for_each_column_ptr_nothrow_invocable&lt; Func &amp;&amp;, true &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::row_type&lt; spheres &amp;, Columns... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a7b5bfe9664b678abc8e69c751b837b3c</anchor>
      <arglist>(size_type index) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr row_type</type>
      <name>operator[]</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a8d00efb65abface363dd144eb0938699</anchor>
      <arglist>(size_type index) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr row_type</type>
      <name>at</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a2e55f540850a7adda571a5ef4d421db7</anchor>
      <arglist>(size_type index) &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr row_type</type>
      <name>front</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a83216598b704fdf7e0e521e986ee3eed</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr row_type</type>
      <name>back</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a79891d7b50b87e776bf987af9d60f243</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::row_type&lt; spheres &amp;&amp;, Columns... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>aece85ee2616d1dfe8d9c5588e99c7851</anchor>
      <arglist>(size_type index) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr rvalue_row_type</type>
      <name>operator[]</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a03ba5864a08d1ac8637bccb8644b7bea</anchor>
      <arglist>(size_type index) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr rvalue_row_type</type>
      <name>at</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>af7c0d4caea19ec2a1673367e0005215b</anchor>
      <arglist>(size_type index) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr rvalue_row_type</type>
      <name>front</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a92aabcd011c28db08899de1a2f753127</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr rvalue_row_type</type>
      <name>back</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a47ff053025d2a0def6e032f3c46d782a</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::row_type&lt; const spheres &amp;, Columns... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a5e2349cfeae406af0092d917575e4072</anchor>
      <arglist>(size_type index) const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_row_type</type>
      <name>operator[]</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ac592afc8c0628b7b5c13ef956498089d</anchor>
      <arglist>(size_type index) const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_row_type</type>
      <name>at</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a880052324f4c3d6a98019fb451a02167</anchor>
      <arglist>(size_type index) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_row_type</type>
      <name>front</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a0b94bf03ca8ecc5ba313294d61f72070</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_row_type</type>
      <name>back</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a8e790103e2d0d2b05277db1b85a489d2</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; spheres &amp;, Columns... &gt;</type>
      <name>begin</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>acf6bc86b442e43603e0d1e308189000f</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; spheres &amp;, Columns... &gt;</type>
      <name>end</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>af9f6a4296b3eb08557018074a25dacc9</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; spheres &amp;&amp;, Columns... &gt;</type>
      <name>begin</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a491a4c75efbf2795988048f488bd36b5</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; spheres &amp;&amp;, Columns... &gt;</type>
      <name>end</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ae3802e9b31fe29151197cbe5343f541c</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; const spheres &amp;, Columns... &gt;</type>
      <name>begin</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ad70ddb6d380edd0265296d96c41d0f43</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; const spheres &amp;, Columns... &gt;</type>
      <name>end</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>af8d08988cb46da913939bfae32c57174</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; const spheres &amp;, Columns... &gt;</type>
      <name>cbegin</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a063609d98473efa9705541ff6bfe1a8a</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; const spheres &amp;, Columns... &gt;</type>
      <name>cend</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>afc4e20bbb43bd88980e934ed7719e4c7</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>column_count</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a29136bfacd6371ca6a6828eb8c75aea6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_type</type>
      <name>aligned_stride</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a2d2ba7bad5fad60548156753b9e2ede7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto &amp;</type>
      <name>column_name</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>acc17bcf6059de245531ecf32fdfbc809</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a65ba32f00d34d6a5a5b8a7919f84e2d1</anchor>
      <arglist>(const spheres &amp;lhs, const spheres &amp;rhs) noexcept(soagen::is_nothrow_equality_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a120747d54b1f609346f629ee72e4c508</anchor>
      <arglist>(const spheres &amp;lhs, const spheres &amp;rhs) noexcept(soagen::is_nothrow_equality_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a0339ef900980527c37d896e7b5000aab</anchor>
      <arglist>(const spheres &amp;lhs, const spheres &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ab265a656698bc6bc41281ccdbd88dace</anchor>
      <arglist>(const spheres &amp;lhs, const spheres &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>afa6d9a31f01eb202cf008bbd26fa6f70</anchor>
      <arglist>(const spheres &amp;lhs, const spheres &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a91300ac4967a242152b40f57b75c401e</anchor>
      <arglist>(const spheres &amp;lhs, const spheres &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr table_type &amp;</type>
      <name>table</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a7e6b36eecf49e305fa8eb99ad79c9460</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr table_type &amp;&amp;</type>
      <name>table</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a277f06c64736f3e2d4d28d03c48f1ef0</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const table_type &amp;</type>
      <name>table</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a6254470367cdea596472975259c39a97</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a21db600b74615cf6bac286c6e1b5e95a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a437412ecf84dbccf377c5fc29910f74e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>max_size</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a54f75cec867b90bcabbb404d0edefe88</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>allocation_size</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ada9563d84c3e6d5edb6484843e611b68</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>reserve</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a72d550692d76e610b4deb7babf33015f</anchor>
      <arglist>(size_type new_cap) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().reserve(size_type{})))</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>capacity</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a47f8df10605e9cab275bb8c2ca4a8876</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>shrink_to_fit</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a643ac62bb09e8f02561e8ccc0747a01a</anchor>
      <arglist>() noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().shrink_to_fit()))</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>clear</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a702709217d1004d41a2f26220a262cda</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>erase</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>aca6fc439f5dadd4a2d2ccf30e52cbd5e</anchor>
      <arglist>(size_type pos) noexcept(soagen::has_nothrow_erase_member&lt; table_type, size_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::optional&lt; size_type &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a6f543d63afa4b60d14a812f267c0218b</anchor>
      <arglist>(size_type pos) noexcept(soagen::has_nothrow_unordered_erase_member&lt; table_type, size_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>erase</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ae1120e84abd48b65da64e6633fa6f156</anchor>
      <arglist>(iterator pos) noexcept(soagen::has_nothrow_erase_member&lt; table_type, size_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::optional&lt; iterator &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a09806af646873dc051912e37d0a56e2f</anchor>
      <arglist>(iterator pos) noexcept(soagen::has_nothrow_unordered_erase_member&lt; table_type, size_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>erase</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a60a2ff735a4995a960453d4c0ddba56c</anchor>
      <arglist>(const_iterator pos) noexcept(soagen::has_nothrow_erase_member&lt; table_type, size_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::optional&lt; const_iterator &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>aa51ad1a1483d7520368ea201ffc3318b</anchor>
      <arglist>(const_iterator pos) noexcept(soagen::has_nothrow_unordered_erase_member&lt; table_type, size_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>pop_back</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>afd9a9bf8f9e4f131e8a6a0b246d5e654</anchor>
      <arglist>(size_type num=1) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().pop_back(size_type{})))</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>resize</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a8f6b1c805bc0e3190f10666f91f50c9c</anchor>
      <arglist>(size_type new_size) noexcept(soagen::has_nothrow_resize_member&lt; table_type, size_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a0489cf91ad00e97256a8ed4f42394fac</anchor>
      <arglist>(spheres &amp;other) noexcept(soagen::has_nothrow_swap_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>push_back</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a75a6e68b3823283949cbdc922c2e39b8</anchor>
      <arglist>(column_traits&lt; 0 &gt;::param_type center_x, column_traits&lt; 1 &gt;::param_type center_y, column_traits&lt; 2 &gt;::param_type center_z, column_traits&lt; 3 &gt;::param_type radius=0.5f, column_traits&lt; 4 &gt;::param_type mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace_back(std::declval&lt; column_traits&lt; 0 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 1 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 2 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 3 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 4 &gt;::param_forward_type &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>push_back</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ad480b4f2cd561e6868aac7d5785ad955</anchor>
      <arglist>(column_traits&lt; 0 &gt;::rvalue_type center_x, column_traits&lt; 1 &gt;::rvalue_type center_y, column_traits&lt; 2 &gt;::rvalue_type center_z, column_traits&lt; 3 &gt;::rvalue_type radius=0.5f, column_traits&lt; 4 &gt;::rvalue_type mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace_back(std::declval&lt; column_traits&lt; 0 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 1 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 2 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 3 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 4 &gt;::rvalue_forward_type &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>push_back</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a0f8af81e7c040bc55c0691e1ce3eb79b</anchor>
      <arglist>(const soagen::row&lt; Table, Columns... &gt; &amp;row_) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace_back(std::declval&lt; const soagen::row&lt; Table, Columns... &gt; &amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>emplace_back</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ac11b937021f38e32ff6d8c6e8b629a5a</anchor>
      <arglist>(CenterX &amp;&amp;center_x, CenterY &amp;&amp;center_y, CenterZ &amp;&amp;center_z, Radius &amp;&amp;radius=0.5f, Mass &amp;&amp;mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace_back(std::declval&lt; CenterX &amp;&amp; &gt;(), std::declval&lt; CenterY &amp;&amp; &gt;(), std::declval&lt; CenterZ &amp;&amp; &gt;(), std::declval&lt; Radius &amp;&amp; &gt;(), std::declval&lt; Mass &amp;&amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>emplace_back</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>af715e7a97592c81097292ae4ca7ab342</anchor>
      <arglist>(const soagen::row&lt; Table, Columns... &gt; &amp;row_) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace_back(std::declval&lt; const soagen::row&lt; Table, Columns... &gt; &amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ab6e899b65b1ddcab7c79593b563ddb2b</anchor>
      <arglist>(size_type index_, column_traits&lt; 0 &gt;::param_type center_x, column_traits&lt; 1 &gt;::param_type center_y, column_traits&lt; 2 &gt;::param_type center_z, column_traits&lt; 3 &gt;::param_type radius=0.5f, column_traits&lt; 4 &gt;::param_type mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace(size_type{}, std::declval&lt; column_traits&lt; 0 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 1 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 2 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 3 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 4 &gt;::param_forward_type &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a2c40d9405b1e9905369dde6a25a917bf</anchor>
      <arglist>(const_iterator iter_, column_traits&lt; 0 &gt;::param_type center_x, column_traits&lt; 1 &gt;::param_type center_y, column_traits&lt; 2 &gt;::param_type center_z, column_traits&lt; 3 &gt;::param_type radius=0.5f, column_traits&lt; 4 &gt;::param_type mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace(size_type{}, std::declval&lt; column_traits&lt; 0 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 1 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 2 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 3 &gt;::param_forward_type &gt;(), std::declval&lt; column_traits&lt; 4 &gt;::param_forward_type &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a7bc3ad334bf070562faad179952ca8e4</anchor>
      <arglist>(size_type index_, column_traits&lt; 0 &gt;::rvalue_type center_x, column_traits&lt; 1 &gt;::rvalue_type center_y, column_traits&lt; 2 &gt;::rvalue_type center_z, column_traits&lt; 3 &gt;::rvalue_type radius=0.5f, column_traits&lt; 4 &gt;::rvalue_type mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace(size_type{}, std::declval&lt; column_traits&lt; 0 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 1 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 2 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 3 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 4 &gt;::rvalue_forward_type &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a989b94ce972defba1dd5bb981bb5243b</anchor>
      <arglist>(const_iterator iter_, column_traits&lt; 0 &gt;::rvalue_type center_x, column_traits&lt; 1 &gt;::rvalue_type center_y, column_traits&lt; 2 &gt;::rvalue_type center_z, column_traits&lt; 3 &gt;::rvalue_type radius=0.5f, column_traits&lt; 4 &gt;::rvalue_type mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace(size_type{}, std::declval&lt; column_traits&lt; 0 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 1 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 2 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 3 &gt;::rvalue_forward_type &gt;(), std::declval&lt; column_traits&lt; 4 &gt;::rvalue_forward_type &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a94b9d27f4e39cb875e021e31ca8ae4e3</anchor>
      <arglist>(size_type index_, const soagen::row&lt; Table, Columns... &gt; &amp;row_) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;() .emplace(size_type{}, std::declval&lt; const soagen::row&lt; Table, Columns... &gt; &amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>aa26f37e4bc213485431be54cb71fae41</anchor>
      <arglist>(const_iterator iter_, const soagen::row&lt; Table, Columns... &gt; &amp;row_) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;() .emplace(size_type{}, std::declval&lt; const soagen::row&lt; Table, Columns... &gt; &amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a2a7b996718075ee5ba341f9a4c8ced6b</anchor>
      <arglist>(size_type index_, CenterX &amp;&amp;center_x, CenterY &amp;&amp;center_y, CenterZ &amp;&amp;center_z, Radius &amp;&amp;radius=0.5f, Mass &amp;&amp;mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace(size_type{}, std::declval&lt; CenterX &amp;&amp; &gt;(), std::declval&lt; CenterY &amp;&amp; &gt;(), std::declval&lt; CenterZ &amp;&amp; &gt;(), std::declval&lt; Radius &amp;&amp; &gt;(), std::declval&lt; Mass &amp;&amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>afad613251e51044cbbad9a41e1c34245</anchor>
      <arglist>(const_iterator iter_, CenterX &amp;&amp;center_x, CenterY &amp;&amp;center_y, CenterZ &amp;&amp;center_z, Radius &amp;&amp;radius=0.5f, Mass &amp;&amp;mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace(size_type{}, std::declval&lt; CenterX &amp;&amp; &gt;(), std::declval&lt; CenterY &amp;&amp; &gt;(), std::declval&lt; CenterZ &amp;&amp; &gt;(), std::declval&lt; Radius &amp;&amp; &gt;(), std::declval&lt; Mass &amp;&amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a635b04fc1d18dd960bb4d2cece963ca1</anchor>
      <arglist>(size_type index_, const soagen::row&lt; Table, Columns... &gt; &amp;row_) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;() .emplace(size_type{}, std::declval&lt; const soagen::row&lt; Table, Columns... &gt; &amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a4c225cf3afa24241de80cab054035665</anchor>
      <arglist>(const_iterator iter_, const soagen::row&lt; Table, Columns... &gt; &amp;row_) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;() .emplace(size_type{}, std::declval&lt; const soagen::row&lt; Table, Columns... &gt; &amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::byte *</type>
      <name>data</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ae2c0c1bef674ad8d80eec45b81f7d67e</anchor>
      <arglist>() noexcept(soagen::has_nothrow_data_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const std::byte *const</type>
      <name>data</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a9bfa97f5c5d810a4af723f0e70c3cb05</anchor>
      <arglist>() noexcept(soagen::has_nothrow_data_member&lt; const table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr column_type&lt; Column &gt; *</type>
      <name>column</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a67a5c5fe70b4932d2b3f747c96223e66</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::add_const_t&lt; column_type&lt; Column &gt; &gt; *</type>
      <name>column</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a8d9e06c6cfc7ed698beba45529024dab</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>center_x</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>aea05122bb9759daec15a7a5c9eb25d46</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>center_x</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a44a0081edf5fbf043c4804deab132cbd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>center_y</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>aaf8083ab9a33b02d820f238c78cea296</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>center_y</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a27d2a022c370cf882e8f0583046ccf71</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>center_z</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a2fea223a8afe6b475e625fb81d409af7</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>center_z</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a63031f4cb3faad18f152955b4a92ad93</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>radius</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ac9f501b290fa85b358bd2a4fa67f5c99</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>radius</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a318449bf18c7b46ea77e7f56887ffc1b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>mass</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a509dc20b825074d8ea67907869b4c258</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>mass</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a35c9dd59de00c0f0a56027ff3623dd36</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>for_each_column</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a22d2cacb142ebfdfad69f24f0b7c6c79</anchor>
      <arglist>(Func &amp;&amp;func) noexcept(table_traits::for_each_column_ptr_nothrow_invocable&lt; Func &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>for_each_column</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a956a1e994cf509240927a524864b89bd</anchor>
      <arglist>(Func &amp;&amp;func) const noexcept(table_traits::for_each_column_ptr_nothrow_invocable&lt; Func &amp;&amp;, true &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::row_type&lt; spheres &amp;, Columns... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a7b5bfe9664b678abc8e69c751b837b3c</anchor>
      <arglist>(size_type index) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr row_type</type>
      <name>operator[]</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a8d00efb65abface363dd144eb0938699</anchor>
      <arglist>(size_type index) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr row_type</type>
      <name>at</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a2e55f540850a7adda571a5ef4d421db7</anchor>
      <arglist>(size_type index) &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr row_type</type>
      <name>front</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a83216598b704fdf7e0e521e986ee3eed</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr row_type</type>
      <name>back</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a79891d7b50b87e776bf987af9d60f243</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::row_type&lt; spheres &amp;&amp;, Columns... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>aece85ee2616d1dfe8d9c5588e99c7851</anchor>
      <arglist>(size_type index) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr rvalue_row_type</type>
      <name>operator[]</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a03ba5864a08d1ac8637bccb8644b7bea</anchor>
      <arglist>(size_type index) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr rvalue_row_type</type>
      <name>at</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>af7c0d4caea19ec2a1673367e0005215b</anchor>
      <arglist>(size_type index) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr rvalue_row_type</type>
      <name>front</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a92aabcd011c28db08899de1a2f753127</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr rvalue_row_type</type>
      <name>back</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a47ff053025d2a0def6e032f3c46d782a</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::row_type&lt; const spheres &amp;, Columns... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a5e2349cfeae406af0092d917575e4072</anchor>
      <arglist>(size_type index) const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_row_type</type>
      <name>operator[]</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ac592afc8c0628b7b5c13ef956498089d</anchor>
      <arglist>(size_type index) const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_row_type</type>
      <name>at</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a880052324f4c3d6a98019fb451a02167</anchor>
      <arglist>(size_type index) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_row_type</type>
      <name>front</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a0b94bf03ca8ecc5ba313294d61f72070</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_row_type</type>
      <name>back</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a8e790103e2d0d2b05277db1b85a489d2</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; spheres &amp;, Columns... &gt;</type>
      <name>begin</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>acf6bc86b442e43603e0d1e308189000f</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; spheres &amp;, Columns... &gt;</type>
      <name>end</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>af9f6a4296b3eb08557018074a25dacc9</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; spheres &amp;&amp;, Columns... &gt;</type>
      <name>begin</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a491a4c75efbf2795988048f488bd36b5</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; spheres &amp;&amp;, Columns... &gt;</type>
      <name>end</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ae3802e9b31fe29151197cbe5343f541c</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; const spheres &amp;, Columns... &gt;</type>
      <name>begin</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ad70ddb6d380edd0265296d96c41d0f43</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; const spheres &amp;, Columns... &gt;</type>
      <name>end</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>af8d08988cb46da913939bfae32c57174</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; const spheres &amp;, Columns... &gt;</type>
      <name>cbegin</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a063609d98473efa9705541ff6bfe1a8a</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; const spheres &amp;, Columns... &gt;</type>
      <name>cend</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>afc4e20bbb43bd88980e934ed7719e4c7</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a65ba32f00d34d6a5a5b8a7919f84e2d1</anchor>
      <arglist>(const spheres &amp;lhs, const spheres &amp;rhs) noexcept(soagen::is_nothrow_equality_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a120747d54b1f609346f629ee72e4c508</anchor>
      <arglist>(const spheres &amp;lhs, const spheres &amp;rhs) noexcept(soagen::is_nothrow_equality_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a0339ef900980527c37d896e7b5000aab</anchor>
      <arglist>(const spheres &amp;lhs, const spheres &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ab265a656698bc6bc41281ccdbd88dace</anchor>
      <arglist>(const spheres &amp;lhs, const spheres &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>afa6d9a31f01eb202cf008bbd26fa6f70</anchor>
      <arglist>(const spheres &amp;lhs, const spheres &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a91300ac4967a242152b40f57b75c401e</anchor>
      <arglist>(const spheres &amp;lhs, const spheres &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>soagen::table</name>
    <filename>classsoagen_1_1table.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Traits</type>
      <name>table_traits</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a9570cd144cb12019ab9941945d1b10d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Allocator</type>
      <name>allocator_type</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a746187826b42ba59b0c121a0e38320dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename table_traits::template column&lt; Column &gt;</type>
      <name>column_traits</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>aa1b2bafba3d8dc942fbafb2452f33fe8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename column_traits&lt; Column &gt;::value_type</type>
      <name>column_type</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>aab55a3e2e1b323ee4a16192a8c6d6a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>table</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ad9885ecaf5fe062639ec9409f900c261</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>table</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a7296a81aac125e7938fd35dd5e15be94</anchor>
      <arglist>(table &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>table &amp;</type>
      <name>operator=</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a2250cd5e92c989efcca61da1a68fb159</anchor>
      <arglist>(table &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>table</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ad192bf21e3d92be79ed260ab1a2a726f</anchor>
      <arglist>(const table &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>table &amp;</type>
      <name>operator=</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a78761dedffd9338afe29870eb023bdbf</anchor>
      <arglist>(const table &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~table</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ab7b68cde7cac6d8a4439184a26a02752</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>table</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a2eba6aa0d28a7bf8904ff18c8413b058</anchor>
      <arglist>(const allocator_type &amp;alloc) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>table</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a83d5cc430bf47ec982764fbf37739c31</anchor>
      <arglist>(allocator_type &amp;&amp;alloc) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr allocator_type</type>
      <name>get_allocator</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ae04052a208cb475abf9c21dbdc87e5f5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ab2301cc792aaeeec4f1fa7bc44c690df</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a44e5a90f68d48cc9d1215464c374504c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>max_size</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a62d7d9c723d5ba2b7291dc1b146124cf</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>abfc3cc96dea33c8bc5e8195cc8875511</anchor>
      <arglist>(size_type new_cap) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>capacity</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>acc9e59da33074da54c363abbd9d1773b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shrink_to_fit</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a2a61077997a3a9202aa4fe869728e3f7</anchor>
      <arglist>() noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a286e59a8423d2ed19beedf78545ecd04</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a594219234a3eb4c5eba502fdda95f801</anchor>
      <arglist>(size_type pos) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>soagen::optional&lt; size_type &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a2025d38ad3f8ca8c710fc86e818126d9</anchor>
      <arglist>(size_type pos) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emplace_back</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a375841a3f64d8bb5a1acae63d1acca86</anchor>
      <arglist>(Args &amp;&amp;... args) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ab15aecb6e24d7adfd1f71b1a297e1845</anchor>
      <arglist>(size_type index, Args &amp;&amp;... args) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop_back</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a808bfa88a013c8c95bcd0adb13e1b8be</anchor>
      <arglist>(size_type num=1) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a1f02ce400aef54b142b2a684882de5f8</anchor>
      <arglist>(size_type new_size) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a9886d31a2d8887f33ccf57afe8f1047d</anchor>
      <arglist>(table &amp;other) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::byte *</type>
      <name>data</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a8e8716b6e0c13a1b37ec5493bb7c7801</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const std::byte *</type>
      <name>data</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ac2a6b40384455de36e7aa3a4652f338a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>column_type&lt; Column &gt; *</type>
      <name>column</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a66ae398abdb4a9ef483da123f5e18dc2</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::add_const_t&lt; column_type&lt; Column &gt; &gt; *</type>
      <name>column</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a15d2673a73707b2ad27f3f1c1cd5ddbe</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>aligned_stride</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a4499d1b68c768be5bb1976aff3d172ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>afb7c9b31b82a2f581341293d7b886bec</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept(...)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ae7e6dcd41e4076c6c0f17226c9f90606</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept(...)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a3284223bf5cebda393d8cfe864acfcf2</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept(...)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a538d7b417aa6bd97438f46cbd6fb4fcf</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept(...)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>aa4f939153878d51597644c36c682427f</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept(...)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ae16c2ee9b6ca0e308afca8f8c210e738</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ab2301cc792aaeeec4f1fa7bc44c690df</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a44e5a90f68d48cc9d1215464c374504c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>max_size</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a62d7d9c723d5ba2b7291dc1b146124cf</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>abfc3cc96dea33c8bc5e8195cc8875511</anchor>
      <arglist>(size_type new_cap) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>capacity</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>acc9e59da33074da54c363abbd9d1773b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shrink_to_fit</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a2a61077997a3a9202aa4fe869728e3f7</anchor>
      <arglist>() noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a286e59a8423d2ed19beedf78545ecd04</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a594219234a3eb4c5eba502fdda95f801</anchor>
      <arglist>(size_type pos) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>soagen::optional&lt; size_type &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a2025d38ad3f8ca8c710fc86e818126d9</anchor>
      <arglist>(size_type pos) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emplace_back</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a375841a3f64d8bb5a1acae63d1acca86</anchor>
      <arglist>(Args &amp;&amp;... args) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ab15aecb6e24d7adfd1f71b1a297e1845</anchor>
      <arglist>(size_type index, Args &amp;&amp;... args) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop_back</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a808bfa88a013c8c95bcd0adb13e1b8be</anchor>
      <arglist>(size_type num=1) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a1f02ce400aef54b142b2a684882de5f8</anchor>
      <arglist>(size_type new_size) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a9886d31a2d8887f33ccf57afe8f1047d</anchor>
      <arglist>(table &amp;other) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::byte *</type>
      <name>data</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a8e8716b6e0c13a1b37ec5493bb7c7801</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const std::byte *</type>
      <name>data</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ac2a6b40384455de36e7aa3a4652f338a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>column_type&lt; Column &gt; *</type>
      <name>column</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a66ae398abdb4a9ef483da123f5e18dc2</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::add_const_t&lt; column_type&lt; Column &gt; &gt; *</type>
      <name>column</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a15d2673a73707b2ad27f3f1c1cd5ddbe</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>afb7c9b31b82a2f581341293d7b886bec</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept(...)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ae7e6dcd41e4076c6c0f17226c9f90606</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept(...)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a3284223bf5cebda393d8cfe864acfcf2</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept(...)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a538d7b417aa6bd97438f46cbd6fb4fcf</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept(...)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>aa4f939153878d51597644c36c682427f</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept(...)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ae16c2ee9b6ca0e308afca8f8c210e738</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept(...)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>soagen::table_traits</name>
    <filename>structsoagen_1_1table__traits.html</filename>
    <templarg>Columns</templarg>
    <member kind="typedef">
      <type>type_at_index&lt; Index, Columns... &gt;</type>
      <name>column</name>
      <anchorfile>structsoagen_1_1table__traits.html</anchorfile>
      <anchor>af2430752acbf69d08a931056e594e737</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>type_at_index&lt; IndexConstant::value, Columns... &gt;</type>
      <name>column_from_ic</name>
      <anchorfile>structsoagen_1_1table__traits.html</anchorfile>
      <anchor>a518123d396810415393320217eec75ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>column_count</name>
      <anchorfile>structsoagen_1_1table__traits.html</anchorfile>
      <anchor>a9c5de4cd50de5c424f1bd3eecc2bb228</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>aligned_stride</name>
      <anchorfile>structsoagen_1_1table__traits.html</anchorfile>
      <anchor>a7b18454ef28aa4279e1f1fc61bd15381</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>column_alignments</name>
      <anchorfile>structsoagen_1_1table__traits.html</anchorfile>
      <anchor>a0405d7fb8c928727d169f006fd46abac</anchor>
      <arglist>[column_count]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>largest_alignment</name>
      <anchorfile>structsoagen_1_1table__traits.html</anchorfile>
      <anchor>a595a21db7abeb21baf06e855b8fffd8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>rvalue_type_list_is_distinct</name>
      <anchorfile>structsoagen_1_1table__traits.html</anchorfile>
      <anchor>acc959fd217581e04726ca725cec7c65d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>soagen</name>
    <filename>namespacesoagen.html</filename>
    <namespace>soagen::examples</namespace>
    <class kind="struct">soagen::allocator</class>
    <class kind="struct">soagen::column_traits</class>
    <class kind="class">soagen::iterator</class>
    <class kind="struct">soagen::emplacer</class>
    <class kind="struct">soagen::row</class>
    <class kind="class">soagen::table</class>
    <class kind="struct">soagen::table_traits</class>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>iterator_type</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>add5e820b9a46b8d9ee87c375f59bc7ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_cv_t&lt; std::remove_reference_t&lt; T &gt; &gt;</type>
      <name>remove_cvref</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>ac8013f256732192bd84bfe3853d36ecf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::add_lvalue_reference_t&lt; std::add_const_t&lt; std::remove_reference_t&lt; T &gt; &gt;&gt;</type>
      <name>make_cref</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a999c94c0a9677dda7f4d6ef97854cc12</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::integral_constant&lt; size_t, static_cast&lt; size_t &gt;(Value)&gt;</type>
      <name>index_constant</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>ad43f30999296a4d8571022ae2549ff68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>forward_type</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>acc7386f915bae0818a7078fee2350cf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::optional&lt; T &gt;</type>
      <name>optional</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a752660c356d07c3815ebe85969788ae3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>table_type</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a83c1e715eb12c7393c508dcc1ba6264f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>table_traits_type</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a0b1aa7477b1f150cbfcd4cfbce00ff83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>allocator_type</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a85c2af2605578cc55f1e69ccac75ffc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>value_type</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a3039db4dcf0ce567d3779945a88a97bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>storage_type</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a05e7d77f37a4bcb2d256798df0fcbbc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>param_type</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>adf58db246695891f9f6789a84dce309a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>rvalue_type</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a0f0b3f50730a07796f5b04cf18926d4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>row_type</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a392da967263ac8a2a67633e4c1574c19</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>type_at_index</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a3d26167a02130bdc91a58e0c3a2f75a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a091a78153334eed1202b3d9766183545</anchor>
      <arglist>(table&lt; Traits, Allocator &gt; &amp;lhs, table&lt; Traits, Allocator &gt; &amp;rhs) noexcept(soagen::has_nothrow_swap_member&lt; table&lt; Traits, Allocator &gt;&gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_constant_evaluated</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a7accb1e12492f06811847809f2576565</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const T &amp;</type>
      <name>min</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a5e72e14c43c4ce06481b5a27de2573fa</anchor>
      <arglist>(const T &amp;val1, const T &amp;val2, const U &amp;... vals) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const T &amp;</type>
      <name>max</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a9cdcdd406199bd3c4a0bad19a7aac5ec</anchor>
      <arglist>(const T &amp;val1, const T &amp;val2, const U &amp;... vals) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::common_type_t&lt; T, U, V... &gt;</type>
      <name>lcm</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>ab8d8cd519306548d0ee493aecb0e052b</anchor>
      <arglist>(T val1, U val2, V... vals) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>has_single_bit</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a5ee56c757af1f31fd50aa2b8a45d4601</anchor>
      <arglist>(T val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr To</type>
      <name>bit_cast</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>adca992a728182a20457735080b86053d</anchor>
      <arglist>(const From &amp;from) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T *</type>
      <name>assume_aligned</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>acfee766462da3971630e2057a78e23c4</anchor>
      <arglist>(T *ptr) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_column_traits</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>aabcf58d0029fe593e95833cb07c4f7a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_iterator</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>ad541e11816c26f9d3a00693f2b8de590</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_cv</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a33f1ab2862c86938e20c474a5b454551</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_cvref</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a6807d6e29ce4c1c6923e2214a3bd6b83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_integer</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a26eb6d5dd00e245d1100c028ee8af498</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_integer</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a85d7ea90620b08fe88b334fe5a52c9ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_unsigned</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>aa4ea4199aca8afd46bccd2c067e16aa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>any_same</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a0e0ba083c71c58486abb3a35973d210a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_soa</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>af1ebb4d107e208fb28942fdea2cb6fa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_implicit_lifetime_type</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a24f6ae16c76ca86d6bf594a40daea0bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_swap_member</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a85b5060347f1c2ccc296b67ead6bfb56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_resize_member</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>adf014a1a2acfd10d0352fa8701510e83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_erase_member</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a52a288798b5c6bf79222ff727424547d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_unordered_erase_member</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a0256b4d1a6bbec2890b316acec5f6f6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_data_member</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a60597862a1a2fe5e93a0b8f7e38df031</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_equality_comparable</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a1feeeeac75c633a5479f91f6d96aef85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_less_than_comparable</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>ac633e60da34e1b33f52b02ae74570820</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_nothrow_swap_member</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a26feac0abbb3db577bc5e749ea2d84e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_nothrow_resize_member</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>aafc939c40239e54f5c50cb6ad6f07f87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_nothrow_erase_member</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>ac9bdb5dbd5de15f271326832a429f9bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_nothrow_unordered_erase_member</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a75673dcda8ea56c9240b1c946536e701</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_nothrow_data_member</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>ac39e6aa84e74f60370b9ca737fefddec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_nothrow_equality_comparable</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>ae343150616e0e79217848e4fb27c0be5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_nothrow_less_than_comparable</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a5bae32f1abaf115c96d228ac3c92e407</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_emplacer</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a28a13532fbc8ec520bcc036345af34f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_invocable_with_optarg</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a5cf5c15d18695d3f4926890fd59f54eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_nothrow_invocable_with_optarg</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>ab5993030dc50dc82782a8eea7ccbf40c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_row</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>af318a46d5e993f9a3742d0dc5f9604cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_table</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a52fd2ec6fe868575bdbacf17d045573a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_table_traits</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>ae01a388ac93f910d43246f50ac3648b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>is_detected</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a419e437a6695ca5f441f9325e602f239</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>soagen::examples</name>
    <filename>namespacesoagen_1_1examples.html</filename>
    <class kind="class">soagen::examples::boxes</class>
    <class kind="class">soagen::examples::spheres</class>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>namespacesoagen_1_1examples.html</anchorfile>
      <anchor>a73ca6e1dfeb7041e934e8694d2cf2d6b</anchor>
      <arglist>(boxes &amp;lhs, boxes &amp;rhs) noexcept(soagen::has_nothrow_swap_member&lt; boxes &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>namespacesoagen_1_1examples.html</anchorfile>
      <anchor>a2f2937d0182090b040da55081644f65f</anchor>
      <arglist>(spheres &amp;lhs, spheres &amp;rhs) noexcept(soagen::has_nothrow_swap_member&lt; spheres &gt;)</arglist>
    </member>
  </compound>
  <compound kind="page">
    <name>poxy_changelog</name>
    <title>Changelog</title>
    <filename>poxy_changelog.html</filename>
  </compound>
</tagfile>
