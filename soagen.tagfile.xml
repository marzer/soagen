<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile doxygen_version="1.9.1">
  <compound kind="file">
    <name>shapes.hpp</name>
    <filename>shapes_8hpp.html</filename>
    <includes id="soagen_8hpp" name="soagen.hpp" local="no" imported="no">soagen.hpp</includes>
    <class kind="class">example::boxes</class>
    <class kind="class">example::spheres</class>
    <namespace>example</namespace>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>namespaceexample.html</anchorfile>
      <anchor>a034099d48e5f7e437ef49534a8c217f8</anchor>
      <arglist>(boxes &amp;lhs, boxes &amp;rhs) noexcept(soagen::has_nothrow_swap_member&lt; boxes &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>namespaceexample.html</anchorfile>
      <anchor>ae43c61341038c50f1214d9817ccd4a22</anchor>
      <arglist>(spheres &amp;lhs, spheres &amp;rhs) noexcept(soagen::has_nothrow_swap_member&lt; spheres &gt;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>soagen.hpp</name>
    <filename>soagen_8hpp.html</filename>
  </compound>
  <compound kind="struct">
    <name>soagen::allocator</name>
    <filename>structsoagen_1_1allocator.html</filename>
    <member kind="typedef">
      <type>std::byte</type>
      <name>value_type</name>
      <anchorfile>structsoagen_1_1allocator.html</anchorfile>
      <anchor>aba2ca5c1dab7bb208da881989ca8eb69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::true_type</type>
      <name>is_always_equal</name>
      <anchorfile>structsoagen_1_1allocator.html</anchorfile>
      <anchor>a70693a30d83b4bf8257b7b5fdbc6c1c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::false_type</type>
      <name>propagate_on_container_copy_assignment</name>
      <anchorfile>structsoagen_1_1allocator.html</anchorfile>
      <anchor>a94f66255e4a892b9415c33beb4fe0df4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::false_type</type>
      <name>propagate_on_container_move_assignment</name>
      <anchorfile>structsoagen_1_1allocator.html</anchorfile>
      <anchor>af9f354372099aca15526fcb63143f827</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::false_type</type>
      <name>propagate_on_container_swap</name>
      <anchorfile>structsoagen_1_1allocator.html</anchorfile>
      <anchor>acd4166ae64119659c42b16e9b39d7185</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>value_type *</type>
      <name>allocate</name>
      <anchorfile>structsoagen_1_1allocator.html</anchorfile>
      <anchor>add1b597c98a840fbdc210811428787c8</anchor>
      <arglist>(size_t size, std::align_val_t alignment=std::align_val_t{ min_alignment })</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocate</name>
      <anchorfile>structsoagen_1_1allocator.html</anchorfile>
      <anchor>a922dad9dc86d8ad039273104c8ddaa65</anchor>
      <arglist>(value_type *ptr, [[maybe_unused]] size_t size) noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>min_alignment</name>
      <anchorfile>structsoagen_1_1allocator.html</anchorfile>
      <anchor>ac1f730d0e4d9368899dedb8f1eaf21b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>structsoagen_1_1allocator.html</anchorfile>
      <anchor>a1c923b7e894d9cf2a14dd278021e65f5</anchor>
      <arglist>(const allocator &amp;, const allocator &amp;) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>structsoagen_1_1allocator.html</anchorfile>
      <anchor>a1f0ba8d66cbc541d18e9934dc950c9fd</anchor>
      <arglist>(const allocator &amp;, const allocator &amp;) noexcept</arglist>
    </member>
    <docanchor file="structsoagen_1_1allocator.html" title="Customizing allocators for soagen">customizing_allocators</docanchor>
    <docanchor file="structsoagen_1_1allocator.html" title="Specifying a min_alignment">customizing_allocators_min_alignment</docanchor>
    <docanchor file="structsoagen_1_1allocator.html" title="Providing an alignment-aware allocate()">customizing_allocators_aligned_allocate</docanchor>
  </compound>
  <compound kind="class">
    <name>example::boxes</name>
    <filename>classexample_1_1boxes.html</filename>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a269d4ac7ab0b23d1f11b9712173231b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a16e1e281490eb8da5ba9d1cbb1dd56e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::allocator_type&lt; boxes &gt;</type>
      <name>allocator_type</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>acc644b2100317cc581a84af71ee150c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::table_type&lt; boxes &gt;</type>
      <name>table_type</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>ab5c81fe476ae173ccf51612f778b98ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::table_traits_type&lt; boxes &gt;</type>
      <name>table_traits</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a5b96d3ceee6749880f72ba184a2fb5cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename table_traits::template column&lt; Column &gt;</type>
      <name>column_traits</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>adbca4c1a9a9509f923f7513cd6d18648</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename column_traits&lt; Column &gt;::value_type</type>
      <name>column_type</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>ac27a4520a27eae981d16716259f18462</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>boxes</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a43f5ad4b3b6e55b875288301c3b86ad3</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>boxes</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>ad10835a62f539406f0381e285e40d4b3</anchor>
      <arglist>(boxes &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>operator=</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>ab98ee5561c38822710661742b8272cc5</anchor>
      <arglist>(boxes &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>boxes</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a73d1cc0996fcbf15c496c9a7ab337c44</anchor>
      <arglist>(const boxes &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>operator=</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>ac59d8f93e661e20e7c0bfe216b8f808c</anchor>
      <arglist>(const boxes &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~boxes</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a8872356202724daa9a9e0cccb3f35606</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>boxes</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a6f2143c07e5095b54f8235180e15e4be</anchor>
      <arglist>(const allocator_type &amp;alloc) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>boxes</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a0742bcc44d3982a227eb8a7dc30d0810</anchor>
      <arglist>(allocator_type &amp;&amp;alloc) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr allocator_type</type>
      <name>get_allocator</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a2b04d7a20af845e7eaaa3aae2347c17b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>table_type &amp;</type>
      <name>table</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a8bc3b634c0bb0aac4cd7984b88a7c592</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>table_type &amp;&amp;</type>
      <name>table</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a83d7085d792687f53e78a9fb9db44c23</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const table_type &amp;</type>
      <name>table</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>ae64a3b0eca6e41fc083f4263b020db21</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a232461e02ddb7051a5f20c08158bd132</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a6f3c3ed1f97a5df99c04cab60cc8ca06</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>max_size</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a4a658c214ce1d5b2c597ee463cf86e35</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>reserve</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>ab09f6852fe7416e657a6a7088a6c0389</anchor>
      <arglist>(size_type new_cap) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().reserve(size_type{})))</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>capacity</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>ab3cf2ea75bad19c9d4b8d8e86b890517</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>shrink_to_fit</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a429fe6561cc89adf87def576e2bc4edc</anchor>
      <arglist>() noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().shrink_to_fit()))</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>clear</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a2154c4c210a33bbc59b0c9967859b739</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a36a671c3517fcedde546140c5e7f06ec</anchor>
      <arglist>(size_type pos) noexcept(soagen::has_nothrow_erase_member&lt; table_type, size_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>soagen::optional&lt; size_type &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>aa38ea359d0aea91c243e3418bf52e468</anchor>
      <arglist>(size_type pos) noexcept(soagen::has_nothrow_unordered_erase_member&lt; table_type, size_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>push_back</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a658c1c2c941ead6682998e9770291692</anchor>
      <arglist>(column_traits&lt; 0 &gt;::param_type center_x, column_traits&lt; 1 &gt;::param_type center_y, column_traits&lt; 2 &gt;::param_type center_z, column_traits&lt; 3 &gt;::param_type extents_x=0.5f, column_traits&lt; 4 &gt;::param_type extents_y=0.5f, column_traits&lt; 5 &gt;::param_type extents_z=0.5f, column_traits&lt; 6 &gt;::param_type mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace_back(std::declval&lt; soagen::forward_type&lt; column_traits&lt; 0 &gt;::param_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 1 &gt;::param_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 2 &gt;::param_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 3 &gt;::param_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 4 &gt;::param_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 5 &gt;::param_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 6 &gt;::param_type &gt;&gt;())))</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>push_back</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a525a0812900a017f19ec24cf7cb62cef</anchor>
      <arglist>(column_traits&lt; 0 &gt;::rvalue_type center_x, column_traits&lt; 1 &gt;::rvalue_type center_y, column_traits&lt; 2 &gt;::rvalue_type center_z, column_traits&lt; 3 &gt;::rvalue_type extents_x=0.5f, column_traits&lt; 4 &gt;::rvalue_type extents_y=0.5f, column_traits&lt; 5 &gt;::rvalue_type extents_z=0.5f, column_traits&lt; 6 &gt;::rvalue_type mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace_back(std::declval&lt; soagen::forward_type&lt; column_traits&lt; 0 &gt;::rvalue_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 1 &gt;::rvalue_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 2 &gt;::rvalue_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 3 &gt;::rvalue_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 4 &gt;::rvalue_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 5 &gt;::rvalue_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 6 &gt;::rvalue_type &gt;&gt;()))) SOAGEN_REQUIRES(table_traits</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>insert</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a3395ca740cf8946dc98a4cc21a5ddb05</anchor>
      <arglist>(size_type index_, column_traits&lt; 0 &gt;::param_type center_x, column_traits&lt; 1 &gt;::param_type center_y, column_traits&lt; 2 &gt;::param_type center_z, column_traits&lt; 3 &gt;::param_type extents_x=0.5f, column_traits&lt; 4 &gt;::param_type extents_y=0.5f, column_traits&lt; 5 &gt;::param_type extents_z=0.5f, column_traits&lt; 6 &gt;::param_type mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace(size_type{}, std::declval&lt; soagen::forward_type&lt; column_traits&lt; 0 &gt;::param_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 1 &gt;::param_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 2 &gt;::param_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 3 &gt;::param_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 4 &gt;::param_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 5 &gt;::param_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 6 &gt;::param_type &gt;&gt;())))</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>insert</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a1d52a4ae0b695c6027e6249099483022</anchor>
      <arglist>(size_type index_, column_traits&lt; 0 &gt;::rvalue_type center_x, column_traits&lt; 1 &gt;::rvalue_type center_y, column_traits&lt; 2 &gt;::rvalue_type center_z, column_traits&lt; 3 &gt;::rvalue_type extents_x=0.5f, column_traits&lt; 4 &gt;::rvalue_type extents_y=0.5f, column_traits&lt; 5 &gt;::rvalue_type extents_z=0.5f, column_traits&lt; 6 &gt;::rvalue_type mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace(size_type{}, std::declval&lt; soagen::forward_type&lt; column_traits&lt; 0 &gt;::rvalue_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 1 &gt;::rvalue_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 2 &gt;::rvalue_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 3 &gt;::rvalue_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 4 &gt;::rvalue_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 5 &gt;::rvalue_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 6 &gt;::rvalue_type &gt;&gt;()))) SOAGEN_REQUIRES(table_traits</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>emplace_back</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>add96a804a781b0b092c4953957bf8701</anchor>
      <arglist>(CenterX &amp;&amp;center_x, CenterY &amp;&amp;center_y, CenterZ &amp;&amp;center_z, ExtentsX &amp;&amp;extents_x=0.5f, ExtentsY &amp;&amp;extents_y=0.5f, ExtentsZ &amp;&amp;extents_z=0.5f, Mass &amp;&amp;mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace_back(std::declval&lt; CenterX &amp;&amp; &gt;(), std::declval&lt; CenterY &amp;&amp; &gt;(), std::declval&lt; CenterZ &amp;&amp; &gt;(), std::declval&lt; ExtentsX &amp;&amp; &gt;(), std::declval&lt; ExtentsY &amp;&amp; &gt;(), std::declval&lt; ExtentsZ &amp;&amp; &gt;(), std::declval&lt; Mass &amp;&amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>emplace</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a876ada831bd76409629b27cbdc689243</anchor>
      <arglist>(size_type index_, CenterX &amp;&amp;center_x, CenterY &amp;&amp;center_y, CenterZ &amp;&amp;center_z, ExtentsX &amp;&amp;extents_x=0.5f, ExtentsY &amp;&amp;extents_y=0.5f, ExtentsZ &amp;&amp;extents_z=0.5f, Mass &amp;&amp;mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace(size_type{}, std::declval&lt; CenterX &amp;&amp; &gt;(), std::declval&lt; CenterY &amp;&amp; &gt;(), std::declval&lt; CenterZ &amp;&amp; &gt;(), std::declval&lt; ExtentsX &amp;&amp; &gt;(), std::declval&lt; ExtentsY &amp;&amp; &gt;(), std::declval&lt; ExtentsZ &amp;&amp; &gt;(), std::declval&lt; Mass &amp;&amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>pop_back</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>abcf709cc71a71f05c7532f542c524e8b</anchor>
      <arglist>(size_type num=1) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().pop_back(size_type{})))</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>resize</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a5e06c95e16c88bc295071f01614a6545</anchor>
      <arglist>(size_type new_size) noexcept(soagen::has_nothrow_resize_member&lt; table_type, size_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a3bc7e1de7325f0432fb42650c3f7788a</anchor>
      <arglist>(boxes &amp;other) noexcept(soagen::has_nothrow_swap_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::byte *</type>
      <name>data</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a158d9d27ceec4105e4c564b9e21d9573</anchor>
      <arglist>() noexcept(soagen::has_nothrow_data_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const std::byte *const</type>
      <name>data</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a3ba0ff3ee2d9f02a57534d19821ee5c1</anchor>
      <arglist>() noexcept(soagen::has_nothrow_data_member&lt; const table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>column_type&lt; Column &gt; *</type>
      <name>column</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>abfdeba3cc26a1c2e75946b6bfd5dd452</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::add_const_t&lt; column_type&lt; Column &gt; &gt; *</type>
      <name>column</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>adcf969687d09ba6f5c31355d28ebeba5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float *</type>
      <name>center_x</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a690e34be089db5629f6dc97b1880dbd1</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const float *</type>
      <name>center_x</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a784ad8cb70cc488395d15a1fde6686cf</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float *</type>
      <name>center_y</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a3b00cfab52a0fd85a2307fa70810524d</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const float *</type>
      <name>center_y</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a0b4e9507f91a9c47ffc07452cabf2270</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float *</type>
      <name>center_z</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>af93a3ce3a9a6434f2b004a3004530217</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const float *</type>
      <name>center_z</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a745d9b9de13437601147b4b586d6419e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float *</type>
      <name>extents_x</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a7a1cd3b0f2e52f020aec307d76c9993f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const float *</type>
      <name>extents_x</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a709b9e67e03748ca44114e6c79c4e25a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float *</type>
      <name>extents_y</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a332fff52af30185e2c650adb724d1d66</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const float *</type>
      <name>extents_y</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>aca36bec788137c86d0b812e20a516b20</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float *</type>
      <name>extents_z</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>af967a3761ad559eb5ccc2bbcb6769a6b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const float *</type>
      <name>extents_z</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a68d37cf93bc207dceecc3d6073969382</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float *</type>
      <name>mass</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>ab73ee3c16eedaa20c3328386de3165a2</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const float *</type>
      <name>mass</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>abe00ed96d8e4bd0b2e367ec63e6d64ce</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>for_each_column</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>aa8bd1e52f73e724b961d288b178a3424</anchor>
      <arglist>(Func &amp;&amp;func) noexcept(table_traits::for_each_column_ptr_nothrow_invocable&lt; Func &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>for_each_column</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a0cfe4d50bab8f7e29165bec6eebfdee6</anchor>
      <arglist>(Func &amp;&amp;func) const noexcept(table_traits::for_each_column_ptr_nothrow_invocable&lt; Func &amp;&amp;, true &gt;)</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; boxes, Columns... &gt;</type>
      <name>row</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>ae019e038496173f3b811394665ac20d0</anchor>
      <arglist>(size_type index) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; boxes &amp;&amp;, Columns... &gt;</type>
      <name>row</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>ac28e0d6d543869d3f88061f2bf43c33a</anchor>
      <arglist>(size_type index) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; const boxes, Columns... &gt;</type>
      <name>row</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>ae8524751e2958510574eb39279865088</anchor>
      <arglist>(size_type index) const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; const boxes &amp;&amp;, Columns... &gt;</type>
      <name>row</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a3c33c8ec626284322c4a20fbcd467a96</anchor>
      <arglist>(size_type index) const &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; boxes &gt;</type>
      <name>operator[]</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a2a610127968d46715edfd28dbac6d1b3</anchor>
      <arglist>(size_type index) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; boxes &amp;&amp; &gt;</type>
      <name>operator[]</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a430ff868fc9a3ecde8ef871874f0f8af</anchor>
      <arglist>(size_type index) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; const boxes &gt;</type>
      <name>operator[]</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a61765623b17832a3c536299aa0cf0a15</anchor>
      <arglist>(size_type index) const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; const boxes &amp;&amp; &gt;</type>
      <name>operator[]</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a959ff95edcd9be449c466e57a191e184</anchor>
      <arglist>(size_type index) const &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; boxes &gt;</type>
      <name>at</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a0683137c2c0b0110a8acbcf6a53c9c53</anchor>
      <arglist>(size_type index) &amp;</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; boxes &amp;&amp; &gt;</type>
      <name>at</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>afc4f69de21a797932d383ff84b864729</anchor>
      <arglist>(size_type index) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; const boxes &gt;</type>
      <name>at</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a6f049e978ae245de5cc760573adb4df4</anchor>
      <arglist>(size_type index) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; const boxes &amp;&amp; &gt;</type>
      <name>at</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>acdd17ac659d8609b00756b929d772872</anchor>
      <arglist>(size_type index) const &amp;&amp;</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>column_count</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>ae50fe4f12bea8a4ad8fcc8250900e1cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_type</type>
      <name>aligned_stride</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>ae6fa59237bb4fc38c4a54aeadad5b766</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto &amp;</type>
      <name>column_name</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a6705bb938c7384f619aca18ff0e39ab1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>af1de6b8326125457c073d8d439964d5d</anchor>
      <arglist>(const boxes &amp;lhs, const boxes &amp;rhs) noexcept(soagen::is_nothrow_equality_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a1afe9819ec24b878abee954830e1978c</anchor>
      <arglist>(const boxes &amp;lhs, const boxes &amp;rhs) noexcept(soagen::is_nothrow_equality_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a7f151b8aef59afec875f119f846ac342</anchor>
      <arglist>(const boxes &amp;lhs, const boxes &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a97f21f38b98f2fdaf973393825a37a86</anchor>
      <arglist>(const boxes &amp;lhs, const boxes &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>ac9bfe5aeaefee1ceb1bd77ee6b43b7e0</anchor>
      <arglist>(const boxes &amp;lhs, const boxes &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a225cdcffa1c29725a6600e20e1cf0d7a</anchor>
      <arglist>(const boxes &amp;lhs, const boxes &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>table_type &amp;</type>
      <name>table</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a8bc3b634c0bb0aac4cd7984b88a7c592</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>table_type &amp;&amp;</type>
      <name>table</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a83d7085d792687f53e78a9fb9db44c23</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const table_type &amp;</type>
      <name>table</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>ae64a3b0eca6e41fc083f4263b020db21</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a232461e02ddb7051a5f20c08158bd132</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a6f3c3ed1f97a5df99c04cab60cc8ca06</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>max_size</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a4a658c214ce1d5b2c597ee463cf86e35</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>reserve</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>ab09f6852fe7416e657a6a7088a6c0389</anchor>
      <arglist>(size_type new_cap) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().reserve(size_type{})))</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>capacity</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>ab3cf2ea75bad19c9d4b8d8e86b890517</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>shrink_to_fit</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a429fe6561cc89adf87def576e2bc4edc</anchor>
      <arglist>() noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().shrink_to_fit()))</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>clear</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a2154c4c210a33bbc59b0c9967859b739</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a36a671c3517fcedde546140c5e7f06ec</anchor>
      <arglist>(size_type pos) noexcept(soagen::has_nothrow_erase_member&lt; table_type, size_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>soagen::optional&lt; size_type &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>aa38ea359d0aea91c243e3418bf52e468</anchor>
      <arglist>(size_type pos) noexcept(soagen::has_nothrow_unordered_erase_member&lt; table_type, size_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>push_back</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a658c1c2c941ead6682998e9770291692</anchor>
      <arglist>(column_traits&lt; 0 &gt;::param_type center_x, column_traits&lt; 1 &gt;::param_type center_y, column_traits&lt; 2 &gt;::param_type center_z, column_traits&lt; 3 &gt;::param_type extents_x=0.5f, column_traits&lt; 4 &gt;::param_type extents_y=0.5f, column_traits&lt; 5 &gt;::param_type extents_z=0.5f, column_traits&lt; 6 &gt;::param_type mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace_back(std::declval&lt; soagen::forward_type&lt; column_traits&lt; 0 &gt;::param_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 1 &gt;::param_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 2 &gt;::param_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 3 &gt;::param_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 4 &gt;::param_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 5 &gt;::param_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 6 &gt;::param_type &gt;&gt;())))</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>push_back</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a525a0812900a017f19ec24cf7cb62cef</anchor>
      <arglist>(column_traits&lt; 0 &gt;::rvalue_type center_x, column_traits&lt; 1 &gt;::rvalue_type center_y, column_traits&lt; 2 &gt;::rvalue_type center_z, column_traits&lt; 3 &gt;::rvalue_type extents_x=0.5f, column_traits&lt; 4 &gt;::rvalue_type extents_y=0.5f, column_traits&lt; 5 &gt;::rvalue_type extents_z=0.5f, column_traits&lt; 6 &gt;::rvalue_type mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace_back(std::declval&lt; soagen::forward_type&lt; column_traits&lt; 0 &gt;::rvalue_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 1 &gt;::rvalue_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 2 &gt;::rvalue_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 3 &gt;::rvalue_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 4 &gt;::rvalue_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 5 &gt;::rvalue_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 6 &gt;::rvalue_type &gt;&gt;()))) SOAGEN_REQUIRES(table_traits</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>insert</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a3395ca740cf8946dc98a4cc21a5ddb05</anchor>
      <arglist>(size_type index_, column_traits&lt; 0 &gt;::param_type center_x, column_traits&lt; 1 &gt;::param_type center_y, column_traits&lt; 2 &gt;::param_type center_z, column_traits&lt; 3 &gt;::param_type extents_x=0.5f, column_traits&lt; 4 &gt;::param_type extents_y=0.5f, column_traits&lt; 5 &gt;::param_type extents_z=0.5f, column_traits&lt; 6 &gt;::param_type mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace(size_type{}, std::declval&lt; soagen::forward_type&lt; column_traits&lt; 0 &gt;::param_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 1 &gt;::param_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 2 &gt;::param_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 3 &gt;::param_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 4 &gt;::param_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 5 &gt;::param_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 6 &gt;::param_type &gt;&gt;())))</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>insert</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a1d52a4ae0b695c6027e6249099483022</anchor>
      <arglist>(size_type index_, column_traits&lt; 0 &gt;::rvalue_type center_x, column_traits&lt; 1 &gt;::rvalue_type center_y, column_traits&lt; 2 &gt;::rvalue_type center_z, column_traits&lt; 3 &gt;::rvalue_type extents_x=0.5f, column_traits&lt; 4 &gt;::rvalue_type extents_y=0.5f, column_traits&lt; 5 &gt;::rvalue_type extents_z=0.5f, column_traits&lt; 6 &gt;::rvalue_type mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace(size_type{}, std::declval&lt; soagen::forward_type&lt; column_traits&lt; 0 &gt;::rvalue_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 1 &gt;::rvalue_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 2 &gt;::rvalue_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 3 &gt;::rvalue_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 4 &gt;::rvalue_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 5 &gt;::rvalue_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 6 &gt;::rvalue_type &gt;&gt;()))) SOAGEN_REQUIRES(table_traits</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>emplace_back</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>add96a804a781b0b092c4953957bf8701</anchor>
      <arglist>(CenterX &amp;&amp;center_x, CenterY &amp;&amp;center_y, CenterZ &amp;&amp;center_z, ExtentsX &amp;&amp;extents_x=0.5f, ExtentsY &amp;&amp;extents_y=0.5f, ExtentsZ &amp;&amp;extents_z=0.5f, Mass &amp;&amp;mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace_back(std::declval&lt; CenterX &amp;&amp; &gt;(), std::declval&lt; CenterY &amp;&amp; &gt;(), std::declval&lt; CenterZ &amp;&amp; &gt;(), std::declval&lt; ExtentsX &amp;&amp; &gt;(), std::declval&lt; ExtentsY &amp;&amp; &gt;(), std::declval&lt; ExtentsZ &amp;&amp; &gt;(), std::declval&lt; Mass &amp;&amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>emplace</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a876ada831bd76409629b27cbdc689243</anchor>
      <arglist>(size_type index_, CenterX &amp;&amp;center_x, CenterY &amp;&amp;center_y, CenterZ &amp;&amp;center_z, ExtentsX &amp;&amp;extents_x=0.5f, ExtentsY &amp;&amp;extents_y=0.5f, ExtentsZ &amp;&amp;extents_z=0.5f, Mass &amp;&amp;mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace(size_type{}, std::declval&lt; CenterX &amp;&amp; &gt;(), std::declval&lt; CenterY &amp;&amp; &gt;(), std::declval&lt; CenterZ &amp;&amp; &gt;(), std::declval&lt; ExtentsX &amp;&amp; &gt;(), std::declval&lt; ExtentsY &amp;&amp; &gt;(), std::declval&lt; ExtentsZ &amp;&amp; &gt;(), std::declval&lt; Mass &amp;&amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>pop_back</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>abcf709cc71a71f05c7532f542c524e8b</anchor>
      <arglist>(size_type num=1) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().pop_back(size_type{})))</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>resize</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a5e06c95e16c88bc295071f01614a6545</anchor>
      <arglist>(size_type new_size) noexcept(soagen::has_nothrow_resize_member&lt; table_type, size_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a3bc7e1de7325f0432fb42650c3f7788a</anchor>
      <arglist>(boxes &amp;other) noexcept(soagen::has_nothrow_swap_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::byte *</type>
      <name>data</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a158d9d27ceec4105e4c564b9e21d9573</anchor>
      <arglist>() noexcept(soagen::has_nothrow_data_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const std::byte *const</type>
      <name>data</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a3ba0ff3ee2d9f02a57534d19821ee5c1</anchor>
      <arglist>() noexcept(soagen::has_nothrow_data_member&lt; const table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>column_type&lt; Column &gt; *</type>
      <name>column</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>abfdeba3cc26a1c2e75946b6bfd5dd452</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::add_const_t&lt; column_type&lt; Column &gt; &gt; *</type>
      <name>column</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>adcf969687d09ba6f5c31355d28ebeba5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float *</type>
      <name>center_x</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a690e34be089db5629f6dc97b1880dbd1</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const float *</type>
      <name>center_x</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a784ad8cb70cc488395d15a1fde6686cf</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float *</type>
      <name>center_y</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a3b00cfab52a0fd85a2307fa70810524d</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const float *</type>
      <name>center_y</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a0b4e9507f91a9c47ffc07452cabf2270</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float *</type>
      <name>center_z</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>af93a3ce3a9a6434f2b004a3004530217</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const float *</type>
      <name>center_z</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a745d9b9de13437601147b4b586d6419e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float *</type>
      <name>extents_x</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a7a1cd3b0f2e52f020aec307d76c9993f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const float *</type>
      <name>extents_x</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a709b9e67e03748ca44114e6c79c4e25a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float *</type>
      <name>extents_y</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a332fff52af30185e2c650adb724d1d66</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const float *</type>
      <name>extents_y</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>aca36bec788137c86d0b812e20a516b20</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float *</type>
      <name>extents_z</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>af967a3761ad559eb5ccc2bbcb6769a6b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const float *</type>
      <name>extents_z</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a68d37cf93bc207dceecc3d6073969382</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float *</type>
      <name>mass</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>ab73ee3c16eedaa20c3328386de3165a2</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const float *</type>
      <name>mass</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>abe00ed96d8e4bd0b2e367ec63e6d64ce</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>for_each_column</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>aa8bd1e52f73e724b961d288b178a3424</anchor>
      <arglist>(Func &amp;&amp;func) noexcept(table_traits::for_each_column_ptr_nothrow_invocable&lt; Func &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>for_each_column</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a0cfe4d50bab8f7e29165bec6eebfdee6</anchor>
      <arglist>(Func &amp;&amp;func) const noexcept(table_traits::for_each_column_ptr_nothrow_invocable&lt; Func &amp;&amp;, true &gt;)</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; boxes, Columns... &gt;</type>
      <name>row</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>ae019e038496173f3b811394665ac20d0</anchor>
      <arglist>(size_type index) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; boxes &amp;&amp;, Columns... &gt;</type>
      <name>row</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>ac28e0d6d543869d3f88061f2bf43c33a</anchor>
      <arglist>(size_type index) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; const boxes, Columns... &gt;</type>
      <name>row</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>ae8524751e2958510574eb39279865088</anchor>
      <arglist>(size_type index) const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; const boxes &amp;&amp;, Columns... &gt;</type>
      <name>row</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a3c33c8ec626284322c4a20fbcd467a96</anchor>
      <arglist>(size_type index) const &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; boxes &gt;</type>
      <name>operator[]</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a2a610127968d46715edfd28dbac6d1b3</anchor>
      <arglist>(size_type index) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; boxes &amp;&amp; &gt;</type>
      <name>operator[]</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a430ff868fc9a3ecde8ef871874f0f8af</anchor>
      <arglist>(size_type index) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; const boxes &gt;</type>
      <name>operator[]</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a61765623b17832a3c536299aa0cf0a15</anchor>
      <arglist>(size_type index) const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; const boxes &amp;&amp; &gt;</type>
      <name>operator[]</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a959ff95edcd9be449c466e57a191e184</anchor>
      <arglist>(size_type index) const &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; boxes &gt;</type>
      <name>at</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a0683137c2c0b0110a8acbcf6a53c9c53</anchor>
      <arglist>(size_type index) &amp;</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; boxes &amp;&amp; &gt;</type>
      <name>at</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>afc4f69de21a797932d383ff84b864729</anchor>
      <arglist>(size_type index) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; const boxes &gt;</type>
      <name>at</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a6f049e978ae245de5cc760573adb4df4</anchor>
      <arglist>(size_type index) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; const boxes &amp;&amp; &gt;</type>
      <name>at</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>acdd17ac659d8609b00756b929d772872</anchor>
      <arglist>(size_type index) const &amp;&amp;</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>af1de6b8326125457c073d8d439964d5d</anchor>
      <arglist>(const boxes &amp;lhs, const boxes &amp;rhs) noexcept(soagen::is_nothrow_equality_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a1afe9819ec24b878abee954830e1978c</anchor>
      <arglist>(const boxes &amp;lhs, const boxes &amp;rhs) noexcept(soagen::is_nothrow_equality_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a7f151b8aef59afec875f119f846ac342</anchor>
      <arglist>(const boxes &amp;lhs, const boxes &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a97f21f38b98f2fdaf973393825a37a86</anchor>
      <arglist>(const boxes &amp;lhs, const boxes &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>ac9bfe5aeaefee1ceb1bd77ee6b43b7e0</anchor>
      <arglist>(const boxes &amp;lhs, const boxes &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classexample_1_1boxes.html</anchorfile>
      <anchor>a225cdcffa1c29725a6600e20e1cf0d7a</anchor>
      <arglist>(const boxes &amp;lhs, const boxes &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>soagen::column_traits</name>
    <filename>structsoagen_1_1column__traits.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>Align</templarg>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>storage_type</name>
      <anchorfile>structsoagen_1_1column__traits.html</anchorfile>
      <anchor>af416a53e25bcef17f52be0abfbcf9fcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ValueType</type>
      <name>value_type</name>
      <anchorfile>structsoagen_1_1column__traits.html</anchorfile>
      <anchor>a238c18b496954da0e2bb82b05e69932a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParamType</type>
      <name>param_type</name>
      <anchorfile>structsoagen_1_1column__traits.html</anchorfile>
      <anchor>ab3b6d538b407f0bb20a90efe52020a6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::rvalue_type&lt; param_type &gt;</type>
      <name>rvalue_type</name>
      <anchorfile>structsoagen_1_1column__traits.html</anchorfile>
      <anchor>acb98810256d18dc27a90593af64af875</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>alignment</name>
      <anchorfile>structsoagen_1_1column__traits.html</anchorfile>
      <anchor>a2fb54b25bbecffbaa41b3478d3be1275</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>aligned_stride</name>
      <anchorfile>structsoagen_1_1column__traits.html</anchorfile>
      <anchor>ae470a65843e286e65729c9855f41118c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>soagen::emplacer</name>
    <filename>structsoagen_1_1emplacer.html</filename>
    <templarg>Args</templarg>
  </compound>
  <compound kind="struct">
    <name>soagen::row</name>
    <filename>structsoagen_1_1row.html</filename>
    <templarg></templarg>
    <templarg>Columns</templarg>
  </compound>
  <compound kind="class">
    <name>example::spheres</name>
    <filename>classexample_1_1spheres.html</filename>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a0cfea9a13a16f21ecc0bdfeb881685f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>aaf67cfd1b17b4175c7cdcf2564a8e5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::allocator_type&lt; spheres &gt;</type>
      <name>allocator_type</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a16d485d90ed5ad211be359b4dc8905d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::table_type&lt; spheres &gt;</type>
      <name>table_type</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a23a1301e0883fa142bd76d8acacf56a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::table_traits_type&lt; spheres &gt;</type>
      <name>table_traits</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a7b4b4a5fc938b913fcc41b37cea1cd57</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename table_traits::template column&lt; Column &gt;</type>
      <name>column_traits</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>ae888c4bba4ab62f4845b1b5564d20d56</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename column_traits&lt; Column &gt;::value_type</type>
      <name>column_type</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a67231f78fbf8232f7034dfbb51e83d9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>spheres</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a1d794e6e2803524e4f38aa5ea16f83cf</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>spheres</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a702211776ed5e3904a7e0d74e1a5b076</anchor>
      <arglist>(spheres &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>operator=</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>abfe8b0a1e74768599a174ddc0d16acb9</anchor>
      <arglist>(spheres &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>spheres</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a1c8ac503643138de5c564f6a9711809d</anchor>
      <arglist>(const spheres &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>operator=</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>ac4766d05d2634d5b2fb9e15e0bd942b6</anchor>
      <arglist>(const spheres &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~spheres</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>aa1871b15ba5046a633a18e0e75187756</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>spheres</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a15fefe6cf819c08b46ca4caf24ca4e39</anchor>
      <arglist>(const allocator_type &amp;alloc) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>spheres</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a687c1c724f75fd4a7f378c80d819af98</anchor>
      <arglist>(allocator_type &amp;&amp;alloc) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr allocator_type</type>
      <name>get_allocator</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>afabd8b61a08797834548a7023ad00622</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>table_type &amp;</type>
      <name>table</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a81a7dbf1349cd8037edc164ce244b75e</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>table_type &amp;&amp;</type>
      <name>table</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>ada005b8ee259d483959cddf25819d702</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const table_type &amp;</type>
      <name>table</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a5bc59125019b3e94e0644c9a37d4c36c</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>aa5fab0a0de95c4b7631611b840a3a716</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>af692e3d00062f0db0d36fb1accddca38</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>max_size</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a99845ba284a353f14fdb48f9e2f58d4e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>reserve</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>ac6fb520239208f56b83a204b5937f33f</anchor>
      <arglist>(size_type new_cap) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().reserve(size_type{})))</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>capacity</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a869d02575ae243904274b9f7bd1e8b77</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>shrink_to_fit</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>aa260151e91098dae2fe6bb21ba815635</anchor>
      <arglist>() noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().shrink_to_fit()))</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>clear</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a60c7a894aaba356b8c42b0114101388d</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a4ebc3dee7123d5e27bd1965b9a16672a</anchor>
      <arglist>(size_type pos) noexcept(soagen::has_nothrow_erase_member&lt; table_type, size_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>soagen::optional&lt; size_type &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>ab650d842e62ce2abf4ac2dc72317947b</anchor>
      <arglist>(size_type pos) noexcept(soagen::has_nothrow_unordered_erase_member&lt; table_type, size_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>push_back</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a673effec761fcd1dc94ea7ab20e5a974</anchor>
      <arglist>(column_traits&lt; 0 &gt;::param_type center_x, column_traits&lt; 1 &gt;::param_type center_y, column_traits&lt; 2 &gt;::param_type center_z, column_traits&lt; 3 &gt;::param_type radius=0.5f, column_traits&lt; 4 &gt;::param_type mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace_back(std::declval&lt; soagen::forward_type&lt; column_traits&lt; 0 &gt;::param_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 1 &gt;::param_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 2 &gt;::param_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 3 &gt;::param_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 4 &gt;::param_type &gt;&gt;())))</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>push_back</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a9c9dd9e6abc08910d92117b2658adf1a</anchor>
      <arglist>(column_traits&lt; 0 &gt;::rvalue_type center_x, column_traits&lt; 1 &gt;::rvalue_type center_y, column_traits&lt; 2 &gt;::rvalue_type center_z, column_traits&lt; 3 &gt;::rvalue_type radius=0.5f, column_traits&lt; 4 &gt;::rvalue_type mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace_back(std::declval&lt; soagen::forward_type&lt; column_traits&lt; 0 &gt;::rvalue_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 1 &gt;::rvalue_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 2 &gt;::rvalue_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 3 &gt;::rvalue_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 4 &gt;::rvalue_type &gt;&gt;()))) SOAGEN_REQUIRES(table_traits</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>insert</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a655fea81bf1008c0ebb721a65b3d2265</anchor>
      <arglist>(size_type index_, column_traits&lt; 0 &gt;::param_type center_x, column_traits&lt; 1 &gt;::param_type center_y, column_traits&lt; 2 &gt;::param_type center_z, column_traits&lt; 3 &gt;::param_type radius=0.5f, column_traits&lt; 4 &gt;::param_type mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace(size_type{}, std::declval&lt; soagen::forward_type&lt; column_traits&lt; 0 &gt;::param_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 1 &gt;::param_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 2 &gt;::param_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 3 &gt;::param_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 4 &gt;::param_type &gt;&gt;())))</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>insert</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>acc2eb1787ec5e7f90af5547b143dc805</anchor>
      <arglist>(size_type index_, column_traits&lt; 0 &gt;::rvalue_type center_x, column_traits&lt; 1 &gt;::rvalue_type center_y, column_traits&lt; 2 &gt;::rvalue_type center_z, column_traits&lt; 3 &gt;::rvalue_type radius=0.5f, column_traits&lt; 4 &gt;::rvalue_type mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace(size_type{}, std::declval&lt; soagen::forward_type&lt; column_traits&lt; 0 &gt;::rvalue_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 1 &gt;::rvalue_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 2 &gt;::rvalue_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 3 &gt;::rvalue_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 4 &gt;::rvalue_type &gt;&gt;()))) SOAGEN_REQUIRES(table_traits</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>emplace_back</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a7d36f2723e5d295b0bc7957dacb826c0</anchor>
      <arglist>(CenterX &amp;&amp;center_x, CenterY &amp;&amp;center_y, CenterZ &amp;&amp;center_z, Radius &amp;&amp;radius=0.5f, Mass &amp;&amp;mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace_back(std::declval&lt; CenterX &amp;&amp; &gt;(), std::declval&lt; CenterY &amp;&amp; &gt;(), std::declval&lt; CenterZ &amp;&amp; &gt;(), std::declval&lt; Radius &amp;&amp; &gt;(), std::declval&lt; Mass &amp;&amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>emplace</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a09f29482de9c09f7da25b7559f23d1b1</anchor>
      <arglist>(size_type index_, CenterX &amp;&amp;center_x, CenterY &amp;&amp;center_y, CenterZ &amp;&amp;center_z, Radius &amp;&amp;radius=0.5f, Mass &amp;&amp;mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace(size_type{}, std::declval&lt; CenterX &amp;&amp; &gt;(), std::declval&lt; CenterY &amp;&amp; &gt;(), std::declval&lt; CenterZ &amp;&amp; &gt;(), std::declval&lt; Radius &amp;&amp; &gt;(), std::declval&lt; Mass &amp;&amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>pop_back</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a2c097476b8f245b3b4f7a692c6a417e2</anchor>
      <arglist>(size_type num=1) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().pop_back(size_type{})))</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>resize</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a1f49c1bf5f174b406cb19277fbc18620</anchor>
      <arglist>(size_type new_size) noexcept(soagen::has_nothrow_resize_member&lt; table_type, size_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>aafb75808b4982346dedd6c20513ebc38</anchor>
      <arglist>(spheres &amp;other) noexcept(soagen::has_nothrow_swap_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::byte *</type>
      <name>data</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a29044d142ce409eae19135e0cbc7265f</anchor>
      <arglist>() noexcept(soagen::has_nothrow_data_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const std::byte *const</type>
      <name>data</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a3d8ae0a63a6086c0cbc3e2563fffdd50</anchor>
      <arglist>() noexcept(soagen::has_nothrow_data_member&lt; const table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>column_type&lt; Column &gt; *</type>
      <name>column</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a6031af45a37fd2d38c7ff886f4bbdf73</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::add_const_t&lt; column_type&lt; Column &gt; &gt; *</type>
      <name>column</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a940675b29a3a2f7bc6dbfa2b5d8c5ff8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float *</type>
      <name>center_x</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a264e9f83f3f28d9fa278a6ab8060f5ec</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const float *</type>
      <name>center_x</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>aa25e1bae67ca8a0a36d541e67c7940f9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float *</type>
      <name>center_y</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a5d7a5add44bf51954cc2491bd5eacc1a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const float *</type>
      <name>center_y</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>acb0e64c904640cf5e1dfeaf9262d0a2e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float *</type>
      <name>center_z</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a4442624c09300517dedf745b6ff5a63b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const float *</type>
      <name>center_z</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a26845375052af6bd23ddc69771483cc6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float *</type>
      <name>radius</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a11567a50ba8c3cf7c215614d905b0cff</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const float *</type>
      <name>radius</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a70644553f9f51d058ebb600a84571906</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float *</type>
      <name>mass</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a71a5fe3445d674e292f6c70503b1e8ec</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const float *</type>
      <name>mass</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a5a0ea3cdb6d4995e54851d7173fb7ff9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>for_each_column</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a749f52b92fd291e24f43da1a0dd779e9</anchor>
      <arglist>(Func &amp;&amp;func) noexcept(table_traits::for_each_column_ptr_nothrow_invocable&lt; Func &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>for_each_column</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a9c739f1d689c04d8489883a95d975628</anchor>
      <arglist>(Func &amp;&amp;func) const noexcept(table_traits::for_each_column_ptr_nothrow_invocable&lt; Func &amp;&amp;, true &gt;)</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; spheres, Columns... &gt;</type>
      <name>row</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a6b2a2f2ad7d9c58e69d997c0b3ff388d</anchor>
      <arglist>(size_type index) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; spheres &amp;&amp;, Columns... &gt;</type>
      <name>row</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>abc6e5a7ed6963166e1f5f3644f006ea3</anchor>
      <arglist>(size_type index) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; const spheres, Columns... &gt;</type>
      <name>row</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a0b7b5446ace3cffc91b197c0eb1a2894</anchor>
      <arglist>(size_type index) const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; const spheres &amp;&amp;, Columns... &gt;</type>
      <name>row</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>aea7c7a2e3329a9cebf008a1e28f4add9</anchor>
      <arglist>(size_type index) const &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; spheres &gt;</type>
      <name>operator[]</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a771f7feeb97d4553aa3ddd785f030caa</anchor>
      <arglist>(size_type index) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; spheres &amp;&amp; &gt;</type>
      <name>operator[]</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>afa48140f81c70f7dd31eb86227e7d1d4</anchor>
      <arglist>(size_type index) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; const spheres &gt;</type>
      <name>operator[]</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a734cb9c5b119981d02ed62eb6b2103f4</anchor>
      <arglist>(size_type index) const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; const spheres &amp;&amp; &gt;</type>
      <name>operator[]</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a46cbb7255dd3ea5d256d99bcfbc0349d</anchor>
      <arglist>(size_type index) const &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; spheres &gt;</type>
      <name>at</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>aedbee55c83f9b04a183188c38d10423c</anchor>
      <arglist>(size_type index) &amp;</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; spheres &amp;&amp; &gt;</type>
      <name>at</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a9b8ceb6b1a4b78918c3afc6f5edb95dd</anchor>
      <arglist>(size_type index) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; const spheres &gt;</type>
      <name>at</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>affdd3c273e8c135876b9444624018a30</anchor>
      <arglist>(size_type index) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; const spheres &amp;&amp; &gt;</type>
      <name>at</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a8bb2088ff3493d01ae050f9b61dffe1c</anchor>
      <arglist>(size_type index) const &amp;&amp;</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>column_count</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>ab57c405833487e374c8e7c8d09bbde56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_type</type>
      <name>aligned_stride</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>aad94d6eb503bc6d23b13161160ec051d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto &amp;</type>
      <name>column_name</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a78fd89a9baebd6c6ccf7e3ee6ab63960</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a65ba32f00d34d6a5a5b8a7919f84e2d1</anchor>
      <arglist>(const spheres &amp;lhs, const spheres &amp;rhs) noexcept(soagen::is_nothrow_equality_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a120747d54b1f609346f629ee72e4c508</anchor>
      <arglist>(const spheres &amp;lhs, const spheres &amp;rhs) noexcept(soagen::is_nothrow_equality_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a0339ef900980527c37d896e7b5000aab</anchor>
      <arglist>(const spheres &amp;lhs, const spheres &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>ab265a656698bc6bc41281ccdbd88dace</anchor>
      <arglist>(const spheres &amp;lhs, const spheres &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>afa6d9a31f01eb202cf008bbd26fa6f70</anchor>
      <arglist>(const spheres &amp;lhs, const spheres &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a91300ac4967a242152b40f57b75c401e</anchor>
      <arglist>(const spheres &amp;lhs, const spheres &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>table_type &amp;</type>
      <name>table</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a81a7dbf1349cd8037edc164ce244b75e</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>table_type &amp;&amp;</type>
      <name>table</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>ada005b8ee259d483959cddf25819d702</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const table_type &amp;</type>
      <name>table</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a5bc59125019b3e94e0644c9a37d4c36c</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>aa5fab0a0de95c4b7631611b840a3a716</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>af692e3d00062f0db0d36fb1accddca38</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>max_size</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a99845ba284a353f14fdb48f9e2f58d4e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>reserve</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>ac6fb520239208f56b83a204b5937f33f</anchor>
      <arglist>(size_type new_cap) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().reserve(size_type{})))</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>capacity</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a869d02575ae243904274b9f7bd1e8b77</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>shrink_to_fit</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>aa260151e91098dae2fe6bb21ba815635</anchor>
      <arglist>() noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().shrink_to_fit()))</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>clear</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a60c7a894aaba356b8c42b0114101388d</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a4ebc3dee7123d5e27bd1965b9a16672a</anchor>
      <arglist>(size_type pos) noexcept(soagen::has_nothrow_erase_member&lt; table_type, size_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>soagen::optional&lt; size_type &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>ab650d842e62ce2abf4ac2dc72317947b</anchor>
      <arglist>(size_type pos) noexcept(soagen::has_nothrow_unordered_erase_member&lt; table_type, size_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>push_back</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a673effec761fcd1dc94ea7ab20e5a974</anchor>
      <arglist>(column_traits&lt; 0 &gt;::param_type center_x, column_traits&lt; 1 &gt;::param_type center_y, column_traits&lt; 2 &gt;::param_type center_z, column_traits&lt; 3 &gt;::param_type radius=0.5f, column_traits&lt; 4 &gt;::param_type mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace_back(std::declval&lt; soagen::forward_type&lt; column_traits&lt; 0 &gt;::param_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 1 &gt;::param_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 2 &gt;::param_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 3 &gt;::param_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 4 &gt;::param_type &gt;&gt;())))</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>push_back</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a9c9dd9e6abc08910d92117b2658adf1a</anchor>
      <arglist>(column_traits&lt; 0 &gt;::rvalue_type center_x, column_traits&lt; 1 &gt;::rvalue_type center_y, column_traits&lt; 2 &gt;::rvalue_type center_z, column_traits&lt; 3 &gt;::rvalue_type radius=0.5f, column_traits&lt; 4 &gt;::rvalue_type mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace_back(std::declval&lt; soagen::forward_type&lt; column_traits&lt; 0 &gt;::rvalue_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 1 &gt;::rvalue_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 2 &gt;::rvalue_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 3 &gt;::rvalue_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 4 &gt;::rvalue_type &gt;&gt;()))) SOAGEN_REQUIRES(table_traits</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>insert</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a655fea81bf1008c0ebb721a65b3d2265</anchor>
      <arglist>(size_type index_, column_traits&lt; 0 &gt;::param_type center_x, column_traits&lt; 1 &gt;::param_type center_y, column_traits&lt; 2 &gt;::param_type center_z, column_traits&lt; 3 &gt;::param_type radius=0.5f, column_traits&lt; 4 &gt;::param_type mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace(size_type{}, std::declval&lt; soagen::forward_type&lt; column_traits&lt; 0 &gt;::param_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 1 &gt;::param_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 2 &gt;::param_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 3 &gt;::param_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 4 &gt;::param_type &gt;&gt;())))</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>insert</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>acc2eb1787ec5e7f90af5547b143dc805</anchor>
      <arglist>(size_type index_, column_traits&lt; 0 &gt;::rvalue_type center_x, column_traits&lt; 1 &gt;::rvalue_type center_y, column_traits&lt; 2 &gt;::rvalue_type center_z, column_traits&lt; 3 &gt;::rvalue_type radius=0.5f, column_traits&lt; 4 &gt;::rvalue_type mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace(size_type{}, std::declval&lt; soagen::forward_type&lt; column_traits&lt; 0 &gt;::rvalue_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 1 &gt;::rvalue_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 2 &gt;::rvalue_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 3 &gt;::rvalue_type &gt;&gt;(), std::declval&lt; soagen::forward_type&lt; column_traits&lt; 4 &gt;::rvalue_type &gt;&gt;()))) SOAGEN_REQUIRES(table_traits</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>emplace_back</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a7d36f2723e5d295b0bc7957dacb826c0</anchor>
      <arglist>(CenterX &amp;&amp;center_x, CenterY &amp;&amp;center_y, CenterZ &amp;&amp;center_z, Radius &amp;&amp;radius=0.5f, Mass &amp;&amp;mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace_back(std::declval&lt; CenterX &amp;&amp; &gt;(), std::declval&lt; CenterY &amp;&amp; &gt;(), std::declval&lt; CenterZ &amp;&amp; &gt;(), std::declval&lt; Radius &amp;&amp; &gt;(), std::declval&lt; Mass &amp;&amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>emplace</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a09f29482de9c09f7da25b7559f23d1b1</anchor>
      <arglist>(size_type index_, CenterX &amp;&amp;center_x, CenterY &amp;&amp;center_y, CenterZ &amp;&amp;center_z, Radius &amp;&amp;radius=0.5f, Mass &amp;&amp;mass=default_mass) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().emplace(size_type{}, std::declval&lt; CenterX &amp;&amp; &gt;(), std::declval&lt; CenterY &amp;&amp; &gt;(), std::declval&lt; CenterZ &amp;&amp; &gt;(), std::declval&lt; Radius &amp;&amp; &gt;(), std::declval&lt; Mass &amp;&amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>pop_back</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a2c097476b8f245b3b4f7a692c6a417e2</anchor>
      <arglist>(size_type num=1) noexcept(noexcept(std::declval&lt; table_type &amp; &gt;().pop_back(size_type{})))</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>resize</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a1f49c1bf5f174b406cb19277fbc18620</anchor>
      <arglist>(size_type new_size) noexcept(soagen::has_nothrow_resize_member&lt; table_type, size_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>aafb75808b4982346dedd6c20513ebc38</anchor>
      <arglist>(spheres &amp;other) noexcept(soagen::has_nothrow_swap_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::byte *</type>
      <name>data</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a29044d142ce409eae19135e0cbc7265f</anchor>
      <arglist>() noexcept(soagen::has_nothrow_data_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const std::byte *const</type>
      <name>data</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a3d8ae0a63a6086c0cbc3e2563fffdd50</anchor>
      <arglist>() noexcept(soagen::has_nothrow_data_member&lt; const table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>column_type&lt; Column &gt; *</type>
      <name>column</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a6031af45a37fd2d38c7ff886f4bbdf73</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::add_const_t&lt; column_type&lt; Column &gt; &gt; *</type>
      <name>column</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a940675b29a3a2f7bc6dbfa2b5d8c5ff8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float *</type>
      <name>center_x</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a264e9f83f3f28d9fa278a6ab8060f5ec</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const float *</type>
      <name>center_x</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>aa25e1bae67ca8a0a36d541e67c7940f9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float *</type>
      <name>center_y</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a5d7a5add44bf51954cc2491bd5eacc1a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const float *</type>
      <name>center_y</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>acb0e64c904640cf5e1dfeaf9262d0a2e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float *</type>
      <name>center_z</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a4442624c09300517dedf745b6ff5a63b</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const float *</type>
      <name>center_z</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a26845375052af6bd23ddc69771483cc6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float *</type>
      <name>radius</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a11567a50ba8c3cf7c215614d905b0cff</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const float *</type>
      <name>radius</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a70644553f9f51d058ebb600a84571906</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>float *</type>
      <name>mass</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a71a5fe3445d674e292f6c70503b1e8ec</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const float *</type>
      <name>mass</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a5a0ea3cdb6d4995e54851d7173fb7ff9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>for_each_column</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a749f52b92fd291e24f43da1a0dd779e9</anchor>
      <arglist>(Func &amp;&amp;func) noexcept(table_traits::for_each_column_ptr_nothrow_invocable&lt; Func &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>for_each_column</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a9c739f1d689c04d8489883a95d975628</anchor>
      <arglist>(Func &amp;&amp;func) const noexcept(table_traits::for_each_column_ptr_nothrow_invocable&lt; Func &amp;&amp;, true &gt;)</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; spheres, Columns... &gt;</type>
      <name>row</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a6b2a2f2ad7d9c58e69d997c0b3ff388d</anchor>
      <arglist>(size_type index) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; spheres &amp;&amp;, Columns... &gt;</type>
      <name>row</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>abc6e5a7ed6963166e1f5f3644f006ea3</anchor>
      <arglist>(size_type index) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; const spheres, Columns... &gt;</type>
      <name>row</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a0b7b5446ace3cffc91b197c0eb1a2894</anchor>
      <arglist>(size_type index) const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; const spheres &amp;&amp;, Columns... &gt;</type>
      <name>row</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>aea7c7a2e3329a9cebf008a1e28f4add9</anchor>
      <arglist>(size_type index) const &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; spheres &gt;</type>
      <name>operator[]</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a771f7feeb97d4553aa3ddd785f030caa</anchor>
      <arglist>(size_type index) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; spheres &amp;&amp; &gt;</type>
      <name>operator[]</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>afa48140f81c70f7dd31eb86227e7d1d4</anchor>
      <arglist>(size_type index) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; const spheres &gt;</type>
      <name>operator[]</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a734cb9c5b119981d02ed62eb6b2103f4</anchor>
      <arglist>(size_type index) const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; const spheres &amp;&amp; &gt;</type>
      <name>operator[]</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a46cbb7255dd3ea5d256d99bcfbc0349d</anchor>
      <arglist>(size_type index) const &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; spheres &gt;</type>
      <name>at</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>aedbee55c83f9b04a183188c38d10423c</anchor>
      <arglist>(size_type index) &amp;</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; spheres &amp;&amp; &gt;</type>
      <name>at</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a9b8ceb6b1a4b78918c3afc6f5edb95dd</anchor>
      <arglist>(size_type index) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; const spheres &gt;</type>
      <name>at</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>affdd3c273e8c135876b9444624018a30</anchor>
      <arglist>(size_type index) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; const spheres &amp;&amp; &gt;</type>
      <name>at</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a8bb2088ff3493d01ae050f9b61dffe1c</anchor>
      <arglist>(size_type index) const &amp;&amp;</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a65ba32f00d34d6a5a5b8a7919f84e2d1</anchor>
      <arglist>(const spheres &amp;lhs, const spheres &amp;rhs) noexcept(soagen::is_nothrow_equality_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a120747d54b1f609346f629ee72e4c508</anchor>
      <arglist>(const spheres &amp;lhs, const spheres &amp;rhs) noexcept(soagen::is_nothrow_equality_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a0339ef900980527c37d896e7b5000aab</anchor>
      <arglist>(const spheres &amp;lhs, const spheres &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>ab265a656698bc6bc41281ccdbd88dace</anchor>
      <arglist>(const spheres &amp;lhs, const spheres &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>afa6d9a31f01eb202cf008bbd26fa6f70</anchor>
      <arglist>(const spheres &amp;lhs, const spheres &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classexample_1_1spheres.html</anchorfile>
      <anchor>a91300ac4967a242152b40f57b75c401e</anchor>
      <arglist>(const spheres &amp;lhs, const spheres &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>soagen::table</name>
    <filename>classsoagen_1_1table.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Traits</type>
      <name>table_traits</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a9570cd144cb12019ab9941945d1b10d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Allocator</type>
      <name>allocator_type</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a746187826b42ba59b0c121a0e38320dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename table_traits::template column&lt; Column &gt;</type>
      <name>column_traits</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>aa1b2bafba3d8dc942fbafb2452f33fe8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename column_traits&lt; Column &gt;::value_type</type>
      <name>column_type</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>aab55a3e2e1b323ee4a16192a8c6d6a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>table</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ad9885ecaf5fe062639ec9409f900c261</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>table</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a7296a81aac125e7938fd35dd5e15be94</anchor>
      <arglist>(table &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>table &amp;</type>
      <name>operator=</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a2250cd5e92c989efcca61da1a68fb159</anchor>
      <arglist>(table &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>table</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ad192bf21e3d92be79ed260ab1a2a726f</anchor>
      <arglist>(const table &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>table &amp;</type>
      <name>operator=</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a78761dedffd9338afe29870eb023bdbf</anchor>
      <arglist>(const table &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~table</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ab7b68cde7cac6d8a4439184a26a02752</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>table</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a2eba6aa0d28a7bf8904ff18c8413b058</anchor>
      <arglist>(const allocator_type &amp;alloc) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>table</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a83d5cc430bf47ec982764fbf37739c31</anchor>
      <arglist>(allocator_type &amp;&amp;alloc) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr allocator_type</type>
      <name>get_allocator</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ae04052a208cb475abf9c21dbdc87e5f5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ab2301cc792aaeeec4f1fa7bc44c690df</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a44e5a90f68d48cc9d1215464c374504c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>max_size</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a62d7d9c723d5ba2b7291dc1b146124cf</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>abfc3cc96dea33c8bc5e8195cc8875511</anchor>
      <arglist>(size_type new_cap) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>capacity</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>acc9e59da33074da54c363abbd9d1773b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shrink_to_fit</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a2a61077997a3a9202aa4fe869728e3f7</anchor>
      <arglist>() noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a286e59a8423d2ed19beedf78545ecd04</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a594219234a3eb4c5eba502fdda95f801</anchor>
      <arglist>(size_type pos) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>soagen::optional&lt; size_type &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a2025d38ad3f8ca8c710fc86e818126d9</anchor>
      <arglist>(size_type pos) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emplace_back</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a375841a3f64d8bb5a1acae63d1acca86</anchor>
      <arglist>(Args &amp;&amp;... args) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop_back</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a808bfa88a013c8c95bcd0adb13e1b8be</anchor>
      <arglist>(size_type num=1) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a1f02ce400aef54b142b2a684882de5f8</anchor>
      <arglist>(size_type new_size) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a9886d31a2d8887f33ccf57afe8f1047d</anchor>
      <arglist>(table &amp;other) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::byte *</type>
      <name>data</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a8e8716b6e0c13a1b37ec5493bb7c7801</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const std::byte *</type>
      <name>data</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ac2a6b40384455de36e7aa3a4652f338a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>column_type&lt; Column &gt; *</type>
      <name>column</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a66ae398abdb4a9ef483da123f5e18dc2</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::add_const_t&lt; column_type&lt; Column &gt; &gt; *</type>
      <name>column</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a15d2673a73707b2ad27f3f1c1cd5ddbe</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>aligned_stride</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a4499d1b68c768be5bb1976aff3d172ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>afb7c9b31b82a2f581341293d7b886bec</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept(...)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ae7e6dcd41e4076c6c0f17226c9f90606</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept(...)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a3284223bf5cebda393d8cfe864acfcf2</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept(...)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a538d7b417aa6bd97438f46cbd6fb4fcf</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept(...)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>aa4f939153878d51597644c36c682427f</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept(...)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ae16c2ee9b6ca0e308afca8f8c210e738</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ab2301cc792aaeeec4f1fa7bc44c690df</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a44e5a90f68d48cc9d1215464c374504c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>max_size</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a62d7d9c723d5ba2b7291dc1b146124cf</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>abfc3cc96dea33c8bc5e8195cc8875511</anchor>
      <arglist>(size_type new_cap) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>capacity</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>acc9e59da33074da54c363abbd9d1773b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shrink_to_fit</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a2a61077997a3a9202aa4fe869728e3f7</anchor>
      <arglist>() noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a286e59a8423d2ed19beedf78545ecd04</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a594219234a3eb4c5eba502fdda95f801</anchor>
      <arglist>(size_type pos) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>soagen::optional&lt; size_type &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a2025d38ad3f8ca8c710fc86e818126d9</anchor>
      <arglist>(size_type pos) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emplace_back</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a375841a3f64d8bb5a1acae63d1acca86</anchor>
      <arglist>(Args &amp;&amp;... args) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop_back</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a808bfa88a013c8c95bcd0adb13e1b8be</anchor>
      <arglist>(size_type num=1) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a1f02ce400aef54b142b2a684882de5f8</anchor>
      <arglist>(size_type new_size) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a9886d31a2d8887f33ccf57afe8f1047d</anchor>
      <arglist>(table &amp;other) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::byte *</type>
      <name>data</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a8e8716b6e0c13a1b37ec5493bb7c7801</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const std::byte *</type>
      <name>data</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ac2a6b40384455de36e7aa3a4652f338a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>column_type&lt; Column &gt; *</type>
      <name>column</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a66ae398abdb4a9ef483da123f5e18dc2</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::add_const_t&lt; column_type&lt; Column &gt; &gt; *</type>
      <name>column</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a15d2673a73707b2ad27f3f1c1cd5ddbe</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>afb7c9b31b82a2f581341293d7b886bec</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept(...)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ae7e6dcd41e4076c6c0f17226c9f90606</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept(...)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a3284223bf5cebda393d8cfe864acfcf2</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept(...)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a538d7b417aa6bd97438f46cbd6fb4fcf</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept(...)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>aa4f939153878d51597644c36c682427f</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept(...)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ae16c2ee9b6ca0e308afca8f8c210e738</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept(...)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>soagen::table_traits</name>
    <filename>structsoagen_1_1table__traits.html</filename>
    <templarg>Columns</templarg>
    <member kind="typedef">
      <type>type_at_index&lt; Index, Columns... &gt;</type>
      <name>column</name>
      <anchorfile>structsoagen_1_1table__traits.html</anchorfile>
      <anchor>af2430752acbf69d08a931056e594e737</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>type_at_index&lt; IndexConstant::value, Columns... &gt;</type>
      <name>column_from_ic</name>
      <anchorfile>structsoagen_1_1table__traits.html</anchorfile>
      <anchor>a518123d396810415393320217eec75ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>column_count</name>
      <anchorfile>structsoagen_1_1table__traits.html</anchorfile>
      <anchor>a9c5de4cd50de5c424f1bd3eecc2bb228</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>aligned_stride</name>
      <anchorfile>structsoagen_1_1table__traits.html</anchorfile>
      <anchor>a7b18454ef28aa4279e1f1fc61bd15381</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>column_alignments</name>
      <anchorfile>structsoagen_1_1table__traits.html</anchorfile>
      <anchor>a0405d7fb8c928727d169f006fd46abac</anchor>
      <arglist>[column_count]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>largest_alignment</name>
      <anchorfile>structsoagen_1_1table__traits.html</anchorfile>
      <anchor>a595a21db7abeb21baf06e855b8fffd8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>rvalue_type_list_is_distinct</name>
      <anchorfile>structsoagen_1_1table__traits.html</anchorfile>
      <anchor>acc959fd217581e04726ca725cec7c65d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>example</name>
    <filename>namespaceexample.html</filename>
    <class kind="class">example::boxes</class>
    <class kind="class">example::spheres</class>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>namespaceexample.html</anchorfile>
      <anchor>a034099d48e5f7e437ef49534a8c217f8</anchor>
      <arglist>(boxes &amp;lhs, boxes &amp;rhs) noexcept(soagen::has_nothrow_swap_member&lt; boxes &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>namespaceexample.html</anchorfile>
      <anchor>ae43c61341038c50f1214d9817ccd4a22</anchor>
      <arglist>(spheres &amp;lhs, spheres &amp;rhs) noexcept(soagen::has_nothrow_swap_member&lt; spheres &gt;)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>soagen</name>
    <filename>namespacesoagen.html</filename>
    <class kind="struct">soagen::allocator</class>
    <class kind="struct">soagen::column_traits</class>
    <class kind="struct">soagen::emplacer</class>
    <class kind="struct">soagen::row</class>
    <class kind="class">soagen::table</class>
    <class kind="struct">soagen::table_traits</class>
    <member kind="typedef">
      <type>std::remove_cv_t&lt; std::remove_reference_t&lt; T &gt; &gt;</type>
      <name>remove_cvref</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>ac8013f256732192bd84bfe3853d36ecf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::add_lvalue_reference_t&lt; std::add_const_t&lt; std::remove_reference_t&lt; T &gt; &gt;&gt;</type>
      <name>make_cref</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a999c94c0a9677dda7f4d6ef97854cc12</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::integral_constant&lt; size_t, static_cast&lt; size_t &gt;(Value)&gt;</type>
      <name>index_constant</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>ad43f30999296a4d8571022ae2549ff68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>forward_type</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>acc7386f915bae0818a7078fee2350cf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::optional&lt; T &gt;</type>
      <name>optional</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a752660c356d07c3815ebe85969788ae3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>table_traits_type</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a0b1aa7477b1f150cbfcd4cfbce00ff83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>table_type</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a83c1e715eb12c7393c508dcc1ba6264f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>allocator_type</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a85c2af2605578cc55f1e69ccac75ffc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>value_type</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a3039db4dcf0ce567d3779945a88a97bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>storage_type</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a05e7d77f37a4bcb2d256798df0fcbbc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>param_type</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>adf58db246695891f9f6789a84dce309a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>rvalue_type</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a0f0b3f50730a07796f5b04cf18926d4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename detail::row_type_&lt; std::conditional_t&lt; std::is_reference_v&lt; Table &gt;, Table, std::add_lvalue_reference_t&lt; Table &gt; &gt;, std::index_sequence&lt; Columns... &gt; &gt;::type</type>
      <name>row_type</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a3e7a0fd09c4cd1cc4dec8152c635811b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>type_at_index</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a3d26167a02130bdc91a58e0c3a2f75a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Traits&lt; __VA_ARGS__ &gt; constexpr Allocator void</type>
      <name>swap</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a160bc9f4d4838ccd943a8bc3f5ee3d84</anchor>
      <arglist>(table&lt; Traits, Allocator &gt; &amp;lhs, table&lt; Traits, Allocator &gt; &amp;rhs) noexcept(soagen::has_nothrow_swap_member&lt; table&lt; Traits, Allocator &gt;&gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_constant_evaluated</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a7accb1e12492f06811847809f2576565</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const T &amp;</type>
      <name>min</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a5e72e14c43c4ce06481b5a27de2573fa</anchor>
      <arglist>(const T &amp;val1, const T &amp;val2, const U &amp;... vals) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const T &amp;</type>
      <name>max</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a9cdcdd406199bd3c4a0bad19a7aac5ec</anchor>
      <arglist>(const T &amp;val1, const T &amp;val2, const U &amp;... vals) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T&lt; __VA_ARGS__ &gt; bool</type>
      <name>has_single_bit</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a33a712147a84a4dfebf719b58c8d7f23</anchor>
      <arglist>(T val) noexcept</arglist>
    </member>
    <member kind="function">
      <type>To&lt; __VA_ARGS__ &gt; constexpr From To</type>
      <name>bit_cast</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a305021e277e1a63a117dd673e773752b</anchor>
      <arglist>(const From &amp;from) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr T *</type>
      <name>assume_aligned</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>acfee766462da3971630e2057a78e23c4</anchor>
      <arglist>(T *ptr) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_column_traits</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>aabcf58d0029fe593e95833cb07c4f7a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_cv</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a33f1ab2862c86938e20c474a5b454551</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_cvref</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a6807d6e29ce4c1c6923e2214a3bd6b83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_integer</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a26eb6d5dd00e245d1100c028ee8af498</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_integer</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a85d7ea90620b08fe88b334fe5a52c9ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_unsigned</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>aa4ea4199aca8afd46bccd2c067e16aa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>any_same</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a0e0ba083c71c58486abb3a35973d210a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_soa</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>af1ebb4d107e208fb28942fdea2cb6fa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_implicit_lifetime_type</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a24f6ae16c76ca86d6bf594a40daea0bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_swap_member</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a85b5060347f1c2ccc296b67ead6bfb56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_resize_member</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>adf014a1a2acfd10d0352fa8701510e83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_erase_member</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a52a288798b5c6bf79222ff727424547d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_unordered_erase_member</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a0256b4d1a6bbec2890b316acec5f6f6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_data_member</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a60597862a1a2fe5e93a0b8f7e38df031</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_equality_comparable</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a1feeeeac75c633a5479f91f6d96aef85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_less_than_comparable</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>ac633e60da34e1b33f52b02ae74570820</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_nothrow_swap_member</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a26feac0abbb3db577bc5e749ea2d84e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_nothrow_resize_member</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>aafc939c40239e54f5c50cb6ad6f07f87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_nothrow_erase_member</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>ac9bdb5dbd5de15f271326832a429f9bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_nothrow_unordered_erase_member</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a75673dcda8ea56c9240b1c946536e701</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_nothrow_data_member</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>ac39e6aa84e74f60370b9ca737fefddec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_nothrow_equality_comparable</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>ae343150616e0e79217848e4fb27c0be5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_nothrow_less_than_comparable</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a5bae32f1abaf115c96d228ac3c92e407</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_emplacer</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a28a13532fbc8ec520bcc036345af34f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_invocable_with_optarg</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a5cf5c15d18695d3f4926890fd59f54eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_nothrow_invocable_with_optarg</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>ab5993030dc50dc82782a8eea7ccbf40c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_row</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>af318a46d5e993f9a3742d0dc5f9604cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_table</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a52fd2ec6fe868575bdbacf17d045573a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_table_traits</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>ae01a388ac93f910d43246f50ac3648b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>is_detected</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a419e437a6695ca5f441f9325e602f239</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T&lt; __VA_ARGS__ &gt;</type>
      <name>U</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>ab63075e25ef2b2d110bf5e48b02cfce5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="page">
    <name>poxy_changelog</name>
    <title>Changelog</title>
    <filename>poxy_changelog.html</filename>
  </compound>
</tagfile>
