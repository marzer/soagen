<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile doxygen_version="1.9.1">
  <compound kind="file">
    <name>entities.hpp</name>
    <filename>entities_8hpp.html</filename>
    <includes id="soagen_8hpp" name="soagen.hpp" local="no" imported="no">soagen.hpp</includes>
    <class kind="class">soagen::examples::entities</class>
    <namespace>soagen</namespace>
    <namespace>soagen::examples</namespace>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>namespacesoagen_1_1examples.html</anchorfile>
      <anchor>ab27a4c779651cc5c8bb538ba7f5b7802</anchor>
      <arglist>(entities &amp;lhs, entities &amp;rhs) noexcept(soagen::has_nothrow_swap_member&lt; entities &gt;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>shapes.hpp</name>
    <filename>shapes_8hpp.html</filename>
    <includes id="soagen_8hpp" name="soagen.hpp" local="no" imported="no">soagen.hpp</includes>
    <class kind="class">soagen::examples::boxes</class>
    <class kind="class">soagen::examples::spheres</class>
    <namespace>soagen</namespace>
    <namespace>soagen::examples</namespace>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>namespacesoagen_1_1examples.html</anchorfile>
      <anchor>a73ca6e1dfeb7041e934e8694d2cf2d6b</anchor>
      <arglist>(boxes &amp;lhs, boxes &amp;rhs) noexcept(soagen::has_nothrow_swap_member&lt; boxes &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>namespacesoagen_1_1examples.html</anchorfile>
      <anchor>a2f2937d0182090b040da55081644f65f</anchor>
      <arglist>(spheres &amp;lhs, spheres &amp;rhs) noexcept(soagen::has_nothrow_swap_member&lt; spheres &gt;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>soagen.hpp</name>
    <filename>soagen_8hpp.html</filename>
  </compound>
  <compound kind="struct">
    <name>soagen::allocator</name>
    <filename>structsoagen_1_1allocator.html</filename>
    <member kind="typedef">
      <type>std::byte</type>
      <name>value_type</name>
      <anchorfile>structsoagen_1_1allocator.html</anchorfile>
      <anchor>aba2ca5c1dab7bb208da881989ca8eb69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::true_type</type>
      <name>is_always_equal</name>
      <anchorfile>structsoagen_1_1allocator.html</anchorfile>
      <anchor>a70693a30d83b4bf8257b7b5fdbc6c1c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::false_type</type>
      <name>propagate_on_container_copy_assignment</name>
      <anchorfile>structsoagen_1_1allocator.html</anchorfile>
      <anchor>a94f66255e4a892b9415c33beb4fe0df4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::false_type</type>
      <name>propagate_on_container_move_assignment</name>
      <anchorfile>structsoagen_1_1allocator.html</anchorfile>
      <anchor>af9f354372099aca15526fcb63143f827</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::false_type</type>
      <name>propagate_on_container_swap</name>
      <anchorfile>structsoagen_1_1allocator.html</anchorfile>
      <anchor>acd4166ae64119659c42b16e9b39d7185</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>value_type *</type>
      <name>allocate</name>
      <anchorfile>structsoagen_1_1allocator.html</anchorfile>
      <anchor>aee695c2544392c49d903354bfc9137ed</anchor>
      <arglist>(size_type size, std::align_val_t alignment=std::align_val_t{ min_alignment })</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocate</name>
      <anchorfile>structsoagen_1_1allocator.html</anchorfile>
      <anchor>a0af9d20806a4395f8af0036f37e89757</anchor>
      <arglist>(value_type *ptr, [[maybe_unused]] size_type size) noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_type</type>
      <name>min_alignment</name>
      <anchorfile>structsoagen_1_1allocator.html</anchorfile>
      <anchor>acd296828478c6af6e0aa4122e9f72ea5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>structsoagen_1_1allocator.html</anchorfile>
      <anchor>a1c923b7e894d9cf2a14dd278021e65f5</anchor>
      <arglist>(const allocator &amp;, const allocator &amp;) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>structsoagen_1_1allocator.html</anchorfile>
      <anchor>a1f0ba8d66cbc541d18e9934dc950c9fd</anchor>
      <arglist>(const allocator &amp;, const allocator &amp;) noexcept</arglist>
    </member>
    <docanchor file="structsoagen_1_1allocator.html" title="Customizing allocators for soagen">customizing_allocators</docanchor>
    <docanchor file="structsoagen_1_1allocator.html" title="Specifying a min_alignment">customizing_allocators_min_alignment</docanchor>
    <docanchor file="structsoagen_1_1allocator.html" title="Providing an alignment-aware allocate()">customizing_allocators_aligned_allocate</docanchor>
  </compound>
  <compound kind="class">
    <name>soagen::examples::boxes</name>
    <filename>classsoagen_1_1examples_1_1boxes.html</filename>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a79aeedacf92fcfff7477633c99832b3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ae80d9e115e4caf6a3c8489002762dfd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::allocator_type&lt; boxes &gt;</type>
      <name>allocator_type</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a35a212c2b6a6d0a5d17fc45fbb09abd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::table_type&lt; boxes &gt;</type>
      <name>table_type</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>af1c2c265684acf95551939feaab9efc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::table_traits_type&lt; boxes &gt;</type>
      <name>table_traits</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>abf96250c6c5d66b906cacbf90c59b4a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>column_traits</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a26e5867fdea82e8a28180fa3371e886f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>column_type</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ac3718c5745d99fe7cf072370eeb4a36b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::iterator_type&lt; boxes &gt;</type>
      <name>iterator</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a69270fa0dbbd43d2fa9cc2da48411969</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::rvalue_iterator_type&lt; boxes &gt;</type>
      <name>rvalue_iterator</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ab17953996db8b3ae9287303271f9d8ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::const_iterator_type&lt; boxes &gt;</type>
      <name>const_iterator</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a40617d91746aff40b500c0a2458edc5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::span_type&lt; boxes &gt;</type>
      <name>span_type</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ab8e1e71de60146eb81ebf3dc95ffe964</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::rvalue_span_type&lt; boxes &gt;</type>
      <name>rvalue_span_type</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a474fc1004acd21af218596e83df7c9f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::const_span_type&lt; boxes &gt;</type>
      <name>const_span_type</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a13658502fc1c9ae3bc95c23fce40067c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::row_type&lt; boxes &gt;</type>
      <name>row_type</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a8760d8855b77398037e72645c3debcde</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::rvalue_row_type&lt; boxes &gt;</type>
      <name>rvalue_row_type</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>aa8406308dde4328c09e9964fa5310c01</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::const_row_type&lt; boxes &gt;</type>
      <name>const_row_type</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a2b9d9e9ae3c8db1ddc1dd2e55cc4e552</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>columns</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ad6bf5f2165ececbd3f63099102e2771b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>boxes</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a6264b86eff1f40143dbce82cbd6f6866</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>boxes</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a0de413c75f96495cf3a9e8154b7e882c</anchor>
      <arglist>(boxes &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>operator=</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>adffe7f9a7e41e09b615873ad2ff5269c</anchor>
      <arglist>(boxes &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>boxes</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a5993e472547bf5be4ef8e9d98c67526d</anchor>
      <arglist>(const boxes &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>operator=</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a551fb8fb5bc83e9bcd65a5f09fc51113</anchor>
      <arglist>(const boxes &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~boxes</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a8fd3f937f12ced496d7818402c823680</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>boxes</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a6791a97971ee2bb79a1ddb3eaef5f1ff</anchor>
      <arglist>(const allocator_type &amp;alloc) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>boxes</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a6659e7c96ab9df03d1839737c346c701</anchor>
      <arglist>(allocator_type &amp;&amp;alloc) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr allocator_type</type>
      <name>get_allocator</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ac05a944668996fb2c2a91c6a2f3cda3a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr table_type &amp;</type>
      <name>table</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a99563640025b1fb960ec361646528942</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr table_type &amp;&amp;</type>
      <name>table</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ac0ef0df0f8f31275d0c4133ddf3ab842</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const table_type &amp;</type>
      <name>table</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>aefe8fe689544b84cccdfbff0965b3c64</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator table_type &amp;</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a5d4c43a3b5299f808b223b7c768d140a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator table_type &amp;&amp;</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a4713228ffff235aaea560cefe690e0ab</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator const table_type &amp;</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a264bf4a60261a319b50417dc76640546</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>erase</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a56fc579011858012868b0eaae8533561</anchor>
      <arglist>(size_type pos) noexcept(soagen::has_nothrow_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::optional&lt; size_type &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a34a9a22db200dea0d73728197ee359df</anchor>
      <arglist>(size_type pos) noexcept(soagen::has_nothrow_unordered_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>erase</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a2ebddcd74e613217fe2a5402f30eaa4d</anchor>
      <arglist>(iterator pos) noexcept(soagen::has_nothrow_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::optional&lt; iterator &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a7aad701061b665a2776503fbd06ce476</anchor>
      <arglist>(iterator pos) noexcept(soagen::has_nothrow_unordered_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>erase</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a27ffa0f01ba36c7df7e163c03df6aec6</anchor>
      <arglist>(const_iterator pos) noexcept(soagen::has_nothrow_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::optional&lt; const_iterator &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>af85d1082d316c7d898417496ce1e074d</anchor>
      <arglist>(const_iterator pos) noexcept(soagen::has_nothrow_unordered_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>swap_columns</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ad2895452d1788d95ab41295c0b23c56d</anchor>
      <arglist>() noexcept(noexcept(std::declval&lt; table_type &amp; &gt;() .template swap_columns&lt; static_cast&lt; size_type &gt;(A), static_cast&lt; size_type &gt;(B)&gt;()))</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>pop_back</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>af55c45f3f54eeeb70179bfa93b00b191</anchor>
      <arglist>(size_type num=1) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>clear</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>aa293cdda20542f6bf340ab767bca0426</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>resize</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a1fb70d2be920112ec429076aadf6e3f6</anchor>
      <arglist>(size_type new_size) noexcept(soagen::has_nothrow_resize_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ad2204ab6797d1a7b3c7daa4950c50e75</anchor>
      <arglist>(boxes &amp;other) noexcept(soagen::has_nothrow_swap_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>push_back</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a5bf5a85f8b2e2d8da3553b8953af7e6f</anchor>
      <arglist>(column_traits&lt; 0 &gt;::param_type center_x, column_traits&lt; 1 &gt;::param_type center_y, column_traits&lt; 2 &gt;::param_type center_z, column_traits&lt; 3 &gt;::param_type extents_x=0.5, column_traits&lt; 4 &gt;::param_type extents_y=0.5, column_traits&lt; 5 &gt;::param_type extents_z=0.5, column_traits&lt; 6 &gt;::param_type mass=default_mass) noexcept(table_traits::push_back_is_nothrow&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>push_back</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ad07ece1f3dede574d67f654c9d598158</anchor>
      <arglist>(column_traits&lt; 0 &gt;::rvalue_type center_x, column_traits&lt; 1 &gt;::rvalue_type center_y, column_traits&lt; 2 &gt;::rvalue_type center_z, column_traits&lt; 3 &gt;::rvalue_type extents_x=0.5, column_traits&lt; 4 &gt;::rvalue_type extents_y=0.5, column_traits&lt; 5 &gt;::rvalue_type extents_z=0.5, column_traits&lt; 6 &gt;::rvalue_type mass=default_mass) noexcept(table_traits::rvalue_push_back_is_nothrow&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>emplace_back</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ad7b393bf006f5ddac829c534796d62e1</anchor>
      <arglist>(CenterX &amp;&amp;center_x, CenterY &amp;&amp;center_y, CenterZ &amp;&amp;center_z, ExtentsX &amp;&amp;extents_x=0.5, ExtentsY &amp;&amp;extents_y=0.5, ExtentsZ &amp;&amp;extents_z=0.5, Mass &amp;&amp;mass=default_mass) noexcept(table_traits::emplace_back_is_nothrow&lt; table_type, CenterX &amp;&amp;, CenterY &amp;&amp;, CenterZ &amp;&amp;, ExtentsX &amp;&amp;, ExtentsY &amp;&amp;, ExtentsZ &amp;&amp;, Mass &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>emplace_back</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a8b7cc14ac9b6559a612d582dd3e76a5f</anchor>
      <arglist>(Tuple &amp;&amp;tuple_) noexcept(table_traits::emplace_back_is_nothrow&lt; table_type, Tuple &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a101c3014f1af8849d957704855d9ec17</anchor>
      <arglist>(size_type index_, column_traits&lt; 0 &gt;::param_type center_x, column_traits&lt; 1 &gt;::param_type center_y, column_traits&lt; 2 &gt;::param_type center_z, column_traits&lt; 3 &gt;::param_type extents_x=0.5, column_traits&lt; 4 &gt;::param_type extents_y=0.5, column_traits&lt; 5 &gt;::param_type extents_z=0.5, column_traits&lt; 6 &gt;::param_type mass=default_mass) noexcept(table_traits::insert_is_nothrow&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a2c7590067a1b2862567118529f67a2c2</anchor>
      <arglist>(size_type index_, column_traits&lt; 0 &gt;::rvalue_type center_x, column_traits&lt; 1 &gt;::rvalue_type center_y, column_traits&lt; 2 &gt;::rvalue_type center_z, column_traits&lt; 3 &gt;::rvalue_type extents_x=0.5, column_traits&lt; 4 &gt;::rvalue_type extents_y=0.5, column_traits&lt; 5 &gt;::rvalue_type extents_z=0.5, column_traits&lt; 6 &gt;::rvalue_type mass=default_mass) noexcept(table_traits::insert_is_nothrow&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a36b75c129338125bdb93d82d1adddca6</anchor>
      <arglist>(iterator iter_, column_traits&lt; 0 &gt;::param_type center_x, column_traits&lt; 1 &gt;::param_type center_y, column_traits&lt; 2 &gt;::param_type center_z, column_traits&lt; 3 &gt;::param_type extents_x=0.5, column_traits&lt; 4 &gt;::param_type extents_y=0.5, column_traits&lt; 5 &gt;::param_type extents_z=0.5, column_traits&lt; 6 &gt;::param_type mass=default_mass) noexcept(table_traits::insert_is_nothrow&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a1845e9e5415d08291daea204e280c31d</anchor>
      <arglist>(const_iterator iter_, column_traits&lt; 0 &gt;::param_type center_x, column_traits&lt; 1 &gt;::param_type center_y, column_traits&lt; 2 &gt;::param_type center_z, column_traits&lt; 3 &gt;::param_type extents_x=0.5, column_traits&lt; 4 &gt;::param_type extents_y=0.5, column_traits&lt; 5 &gt;::param_type extents_z=0.5, column_traits&lt; 6 &gt;::param_type mass=default_mass) noexcept(table_traits::insert_is_nothrow&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>aa26c05aee37293bf6769183de3a36352</anchor>
      <arglist>(iterator iter_, column_traits&lt; 0 &gt;::rvalue_type center_x, column_traits&lt; 1 &gt;::rvalue_type center_y, column_traits&lt; 2 &gt;::rvalue_type center_z, column_traits&lt; 3 &gt;::rvalue_type extents_x=0.5, column_traits&lt; 4 &gt;::rvalue_type extents_y=0.5, column_traits&lt; 5 &gt;::rvalue_type extents_z=0.5, column_traits&lt; 6 &gt;::rvalue_type mass=default_mass) noexcept(table_traits::insert_is_nothrow&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a7271d6d68a9c61a09af8691b9dab2760</anchor>
      <arglist>(const_iterator iter_, column_traits&lt; 0 &gt;::rvalue_type center_x, column_traits&lt; 1 &gt;::rvalue_type center_y, column_traits&lt; 2 &gt;::rvalue_type center_z, column_traits&lt; 3 &gt;::rvalue_type extents_x=0.5, column_traits&lt; 4 &gt;::rvalue_type extents_y=0.5, column_traits&lt; 5 &gt;::rvalue_type extents_z=0.5, column_traits&lt; 6 &gt;::rvalue_type mass=default_mass) noexcept(table_traits::insert_is_nothrow&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ac25561f3c68f81aefcd48dd1114a0cfc</anchor>
      <arglist>(size_type index_, CenterX &amp;&amp;center_x, CenterY &amp;&amp;center_y, CenterZ &amp;&amp;center_z, ExtentsX &amp;&amp;extents_x=0.5, ExtentsY &amp;&amp;extents_y=0.5, ExtentsZ &amp;&amp;extents_z=0.5, Mass &amp;&amp;mass=default_mass) noexcept(table_traits::emplace_is_nothrow&lt; table_type, CenterX &amp;&amp;, CenterY &amp;&amp;, CenterZ &amp;&amp;, ExtentsX &amp;&amp;, ExtentsY &amp;&amp;, ExtentsZ &amp;&amp;, Mass &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a5b78ba51174f6142524311fb4cb648bf</anchor>
      <arglist>(size_type index_, Tuple &amp;&amp;tuple_) noexcept(table_traits::emplace_is_nothrow&lt; table_type, Tuple &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>aec0f65cd30f6492f13f6112b02190706</anchor>
      <arglist>(iterator iter_, CenterX &amp;&amp;center_x, CenterY &amp;&amp;center_y, CenterZ &amp;&amp;center_z, ExtentsX &amp;&amp;extents_x=0.5, ExtentsY &amp;&amp;extents_y=0.5, ExtentsZ &amp;&amp;extents_z=0.5, Mass &amp;&amp;mass=default_mass) noexcept(table_traits::emplace_is_nothrow&lt; table_type, CenterX &amp;&amp;, CenterY &amp;&amp;, CenterZ &amp;&amp;, ExtentsX &amp;&amp;, ExtentsY &amp;&amp;, ExtentsZ &amp;&amp;, Mass &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a2beecd7833ba70beb35a6e0d449cf3de</anchor>
      <arglist>(iterator iter_, Tuple &amp;&amp;tuple_) noexcept(table_traits::emplace_is_nothrow&lt; table_type, Tuple &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a4af213412cc3c092b1cec8b60c46d592</anchor>
      <arglist>(const_iterator iter_, CenterX &amp;&amp;center_x, CenterY &amp;&amp;center_y, CenterZ &amp;&amp;center_z, ExtentsX &amp;&amp;extents_x=0.5, ExtentsY &amp;&amp;extents_y=0.5, ExtentsZ &amp;&amp;extents_z=0.5, Mass &amp;&amp;mass=default_mass) noexcept(table_traits::emplace_is_nothrow&lt; table_type, CenterX &amp;&amp;, CenterY &amp;&amp;, CenterZ &amp;&amp;, ExtentsX &amp;&amp;, ExtentsY &amp;&amp;, ExtentsZ &amp;&amp;, Mass &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>aac56393fea0c3b34d2c8951b27cb2f06</anchor>
      <arglist>(const_iterator iter_, Tuple &amp;&amp;tuple_) noexcept(table_traits::emplace_is_nothrow&lt; table_type, Tuple &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr column_type&lt; Column &gt; *</type>
      <name>column</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a2a641f6146abdf6174a1107948c465e4</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::add_const_t&lt; column_type&lt; Column &gt; &gt; *</type>
      <name>column</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>af5e23463c10124397b1c79459f0cf1a0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::byte *</type>
      <name>data</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a383dbc3d6897abf38e6bc285e8f440ad</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const std::byte *const</type>
      <name>data</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a275c134d86565d4a41f43aebea931762</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>center_x</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ac6340bb69743f8d5277374582fdeb0c9</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>center_x</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>af7ed114f61fee1579e6c2221d0207d8c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>center_y</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a0f7cc17a16452e63190e6d18b1e4329e</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>center_y</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a033078ff705254f7ae6cda6ef2191b3f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>center_z</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a6a25452fef8a9a20ffdd4bda107f7530</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>center_z</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a8b8e2024fe3e104940554d964e02a939</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>extents_x</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a214fc9dd629aa987e2b49dfb043288d2</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>extents_x</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>aa9073c2d39a00f007eb51ca38dbe7d7f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>extents_y</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>abcf87b3a283b18c7ad6fc82ffabe1b20</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>extents_y</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ab13c2649de4dba4d8b61a03e6f21af35</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>extents_z</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a0cc979a249dddbeb584106904a72f245</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>extents_z</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ae8aff289df8adc9dbda8e44adbed0e96</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>mass</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>af4bf12b35edd3e0814a8228d0c57787a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>mass</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>aef95352740973bf8212e76fe907cb7c8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>for_each_column</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a36fad20cf4ee6700d08a708ab18865a1</anchor>
      <arglist>(Func &amp;&amp;func) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>for_each_column</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>aca00ad8cc2deb98d442a1850487fb2bd</anchor>
      <arglist>(Func &amp;&amp;func) const noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a0e382d8361550b4947c6bc20ba87b23d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ad33f90666f5212fdcaa994199fea3bee</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>max_size</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a6ab29aa4d92e24c4bd6abff41d2bf79d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>allocation_size</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>aa5d4a754dcd04a4fd96d0f099d2d22a9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>reserve</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a1ba2fce33873ba22196568279799960f</anchor>
      <arglist>(size_type new_cap) noexcept(...) const expr size_type capacity() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>shrink_to_fit</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ae101421af5fed407236a450e5d16f1bb</anchor>
      <arglist>() noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; boxes, Cols... &gt;</type>
      <name>begin</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a38a9ac3352dc7c224296fb1eca5b7a58</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; boxes, Cols... &gt;</type>
      <name>end</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ad7889d6bdd77e7c519dc80c9c67d6385</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; boxes &amp;&amp;, Cols... &gt;</type>
      <name>begin</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a1026aeb8a2bf238727a3ebe0cf4a1464</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; boxes &amp;&amp;, Cols... &gt;</type>
      <name>end</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ac4285223ddced30d58a5698f7aa91413</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::const_iterator_type&lt; boxes, Cols... &gt;</type>
      <name>begin</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a1033b5a2fdab591fff23f05649db84e8</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::const_iterator_type&lt; boxes, Cols... &gt;</type>
      <name>end</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a2b0ff9624574bd0611b2dc1a17556f72</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::const_iterator_type&lt; boxes, Cols... &gt;</type>
      <name>cbegin</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a84b6feadd9e09a05fdb14f114c9e2295</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::const_iterator_type&lt; boxes, Cols... &gt;</type>
      <name>cend</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>aa29af92eb33592f691269b86b8d3a292</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; boxes, Cols... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>aca55112ddbf1b0080f173169050017d3</anchor>
      <arglist>(size_type index) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>row_type</type>
      <name>operator[]</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a4cecee09af9dc517209a1c61adf5e3f8</anchor>
      <arglist>(size_type index) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; boxes, Cols... &gt;</type>
      <name>at</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a8f4e1a38c6553e0fdeef5636fb1c2150</anchor>
      <arglist>(size_type index) &amp;</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; boxes, Cols... &gt;</type>
      <name>front</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a3c414ee89f13daed28731d3533ac6aa5</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; boxes, Cols... &gt;</type>
      <name>back</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ab073a2c525eaee9e9339a5b014ac02c7</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; boxes &amp;&amp;, Cols... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a4828f796c0facea4da75af8cf60e1c42</anchor>
      <arglist>(size_type index) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>rvalue_row_type</type>
      <name>operator[]</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a3fe781bc65d3b721422f5ae296766ebd</anchor>
      <arglist>(size_type index) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; boxes &amp;&amp;, Cols... &gt;</type>
      <name>at</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>af2fc1badaf88a85676c592d6ca1c83b1</anchor>
      <arglist>(size_type index) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; boxes &amp;&amp;, Cols... &gt;</type>
      <name>front</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>aaa59eb02369f6ab75d05ed7bbcfc7ece</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; boxes &amp;&amp;, Cols... &gt;</type>
      <name>back</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a34a775008e67e1c4e629bacee3057c9f</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::const_row_type&lt; boxes, Cols... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a5c60d3cb310e9978b58b278a79c14cc7</anchor>
      <arglist>(size_type index) const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_row_type</type>
      <name>operator[]</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a3348edee9043dbddeb76f0a9280e4185</anchor>
      <arglist>(size_type index) const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::const_row_type&lt; boxes, Cols... &gt;</type>
      <name>at</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a6a073ab59be653e5958e113091adf698</anchor>
      <arglist>(size_type index) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>soagen::const_row_type&lt; boxes, Cols... &gt;</type>
      <name>front</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a9b41cd62a5934f203b4276bbdb38f5bf</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::const_row_type&lt; boxes, Cols... &gt;</type>
      <name>back</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a3d2e6a070cad0bfc3885f3dd882e60bd</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>span_type</type>
      <name>subspan</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a996e9a6002ab4ae324f76dcbf94dfc9c</anchor>
      <arglist>(size_type start, size_type count=static_cast&lt; size_type &gt;(-1)) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>rvalue_span_type</type>
      <name>subspan</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>adbbb3a7e428df983dbba68cda74619f1</anchor>
      <arglist>(size_type start, size_type count=static_cast&lt; size_type &gt;(-1)) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_span_type</type>
      <name>subspan</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a718e257a5027aa3cc8ce5f83e0bc257d</anchor>
      <arglist>(size_type start, size_type count=static_cast&lt; size_type &gt;(-1)) const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_span_type</type>
      <name>const_subspan</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>af5674df91619befe7338cab3008059aa</anchor>
      <arglist>(size_type start, size_type count=static_cast&lt; size_type &gt;(-1)) const noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_type</type>
      <name>column_count</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>aba2d427764b2295b6167944d37221f34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_type</type>
      <name>aligned_stride</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>af0361fb59169d8b55024aaa61443f26f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto &amp;</type>
      <name>column_name</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>aac799b93448ba55381670ab5be1992c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>af1de6b8326125457c073d8d439964d5d</anchor>
      <arglist>(const boxes &amp;lhs, const boxes &amp;rhs) noexcept(soagen::is_nothrow_equality_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a1afe9819ec24b878abee954830e1978c</anchor>
      <arglist>(const boxes &amp;lhs, const boxes &amp;rhs) noexcept(soagen::is_nothrow_equality_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a7f151b8aef59afec875f119f846ac342</anchor>
      <arglist>(const boxes &amp;lhs, const boxes &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a97f21f38b98f2fdaf973393825a37a86</anchor>
      <arglist>(const boxes &amp;lhs, const boxes &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ac9bfe5aeaefee1ceb1bd77ee6b43b7e0</anchor>
      <arglist>(const boxes &amp;lhs, const boxes &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a225cdcffa1c29725a6600e20e1cf0d7a</anchor>
      <arglist>(const boxes &amp;lhs, const boxes &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr table_type &amp;</type>
      <name>table</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a99563640025b1fb960ec361646528942</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr table_type &amp;&amp;</type>
      <name>table</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ac0ef0df0f8f31275d0c4133ddf3ab842</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const table_type &amp;</type>
      <name>table</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>aefe8fe689544b84cccdfbff0965b3c64</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator table_type &amp;</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a5d4c43a3b5299f808b223b7c768d140a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator table_type &amp;&amp;</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a4713228ffff235aaea560cefe690e0ab</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator const table_type &amp;</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a264bf4a60261a319b50417dc76640546</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>erase</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a56fc579011858012868b0eaae8533561</anchor>
      <arglist>(size_type pos) noexcept(soagen::has_nothrow_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::optional&lt; size_type &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a34a9a22db200dea0d73728197ee359df</anchor>
      <arglist>(size_type pos) noexcept(soagen::has_nothrow_unordered_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>erase</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a2ebddcd74e613217fe2a5402f30eaa4d</anchor>
      <arglist>(iterator pos) noexcept(soagen::has_nothrow_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::optional&lt; iterator &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a7aad701061b665a2776503fbd06ce476</anchor>
      <arglist>(iterator pos) noexcept(soagen::has_nothrow_unordered_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>erase</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a27ffa0f01ba36c7df7e163c03df6aec6</anchor>
      <arglist>(const_iterator pos) noexcept(soagen::has_nothrow_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::optional&lt; const_iterator &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>af85d1082d316c7d898417496ce1e074d</anchor>
      <arglist>(const_iterator pos) noexcept(soagen::has_nothrow_unordered_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>swap_columns</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ad2895452d1788d95ab41295c0b23c56d</anchor>
      <arglist>() noexcept(noexcept(std::declval&lt; table_type &amp; &gt;() .template swap_columns&lt; static_cast&lt; size_type &gt;(A), static_cast&lt; size_type &gt;(B)&gt;()))</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>pop_back</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>af55c45f3f54eeeb70179bfa93b00b191</anchor>
      <arglist>(size_type num=1) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>clear</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>aa293cdda20542f6bf340ab767bca0426</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>resize</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a1fb70d2be920112ec429076aadf6e3f6</anchor>
      <arglist>(size_type new_size) noexcept(soagen::has_nothrow_resize_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ad2204ab6797d1a7b3c7daa4950c50e75</anchor>
      <arglist>(boxes &amp;other) noexcept(soagen::has_nothrow_swap_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>push_back</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a5bf5a85f8b2e2d8da3553b8953af7e6f</anchor>
      <arglist>(column_traits&lt; 0 &gt;::param_type center_x, column_traits&lt; 1 &gt;::param_type center_y, column_traits&lt; 2 &gt;::param_type center_z, column_traits&lt; 3 &gt;::param_type extents_x=0.5, column_traits&lt; 4 &gt;::param_type extents_y=0.5, column_traits&lt; 5 &gt;::param_type extents_z=0.5, column_traits&lt; 6 &gt;::param_type mass=default_mass) noexcept(table_traits::push_back_is_nothrow&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>push_back</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ad07ece1f3dede574d67f654c9d598158</anchor>
      <arglist>(column_traits&lt; 0 &gt;::rvalue_type center_x, column_traits&lt; 1 &gt;::rvalue_type center_y, column_traits&lt; 2 &gt;::rvalue_type center_z, column_traits&lt; 3 &gt;::rvalue_type extents_x=0.5, column_traits&lt; 4 &gt;::rvalue_type extents_y=0.5, column_traits&lt; 5 &gt;::rvalue_type extents_z=0.5, column_traits&lt; 6 &gt;::rvalue_type mass=default_mass) noexcept(table_traits::rvalue_push_back_is_nothrow&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>emplace_back</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ad7b393bf006f5ddac829c534796d62e1</anchor>
      <arglist>(CenterX &amp;&amp;center_x, CenterY &amp;&amp;center_y, CenterZ &amp;&amp;center_z, ExtentsX &amp;&amp;extents_x=0.5, ExtentsY &amp;&amp;extents_y=0.5, ExtentsZ &amp;&amp;extents_z=0.5, Mass &amp;&amp;mass=default_mass) noexcept(table_traits::emplace_back_is_nothrow&lt; table_type, CenterX &amp;&amp;, CenterY &amp;&amp;, CenterZ &amp;&amp;, ExtentsX &amp;&amp;, ExtentsY &amp;&amp;, ExtentsZ &amp;&amp;, Mass &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>emplace_back</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a8b7cc14ac9b6559a612d582dd3e76a5f</anchor>
      <arglist>(Tuple &amp;&amp;tuple_) noexcept(table_traits::emplace_back_is_nothrow&lt; table_type, Tuple &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a101c3014f1af8849d957704855d9ec17</anchor>
      <arglist>(size_type index_, column_traits&lt; 0 &gt;::param_type center_x, column_traits&lt; 1 &gt;::param_type center_y, column_traits&lt; 2 &gt;::param_type center_z, column_traits&lt; 3 &gt;::param_type extents_x=0.5, column_traits&lt; 4 &gt;::param_type extents_y=0.5, column_traits&lt; 5 &gt;::param_type extents_z=0.5, column_traits&lt; 6 &gt;::param_type mass=default_mass) noexcept(table_traits::insert_is_nothrow&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a2c7590067a1b2862567118529f67a2c2</anchor>
      <arglist>(size_type index_, column_traits&lt; 0 &gt;::rvalue_type center_x, column_traits&lt; 1 &gt;::rvalue_type center_y, column_traits&lt; 2 &gt;::rvalue_type center_z, column_traits&lt; 3 &gt;::rvalue_type extents_x=0.5, column_traits&lt; 4 &gt;::rvalue_type extents_y=0.5, column_traits&lt; 5 &gt;::rvalue_type extents_z=0.5, column_traits&lt; 6 &gt;::rvalue_type mass=default_mass) noexcept(table_traits::insert_is_nothrow&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a36b75c129338125bdb93d82d1adddca6</anchor>
      <arglist>(iterator iter_, column_traits&lt; 0 &gt;::param_type center_x, column_traits&lt; 1 &gt;::param_type center_y, column_traits&lt; 2 &gt;::param_type center_z, column_traits&lt; 3 &gt;::param_type extents_x=0.5, column_traits&lt; 4 &gt;::param_type extents_y=0.5, column_traits&lt; 5 &gt;::param_type extents_z=0.5, column_traits&lt; 6 &gt;::param_type mass=default_mass) noexcept(table_traits::insert_is_nothrow&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a1845e9e5415d08291daea204e280c31d</anchor>
      <arglist>(const_iterator iter_, column_traits&lt; 0 &gt;::param_type center_x, column_traits&lt; 1 &gt;::param_type center_y, column_traits&lt; 2 &gt;::param_type center_z, column_traits&lt; 3 &gt;::param_type extents_x=0.5, column_traits&lt; 4 &gt;::param_type extents_y=0.5, column_traits&lt; 5 &gt;::param_type extents_z=0.5, column_traits&lt; 6 &gt;::param_type mass=default_mass) noexcept(table_traits::insert_is_nothrow&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>aa26c05aee37293bf6769183de3a36352</anchor>
      <arglist>(iterator iter_, column_traits&lt; 0 &gt;::rvalue_type center_x, column_traits&lt; 1 &gt;::rvalue_type center_y, column_traits&lt; 2 &gt;::rvalue_type center_z, column_traits&lt; 3 &gt;::rvalue_type extents_x=0.5, column_traits&lt; 4 &gt;::rvalue_type extents_y=0.5, column_traits&lt; 5 &gt;::rvalue_type extents_z=0.5, column_traits&lt; 6 &gt;::rvalue_type mass=default_mass) noexcept(table_traits::insert_is_nothrow&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a7271d6d68a9c61a09af8691b9dab2760</anchor>
      <arglist>(const_iterator iter_, column_traits&lt; 0 &gt;::rvalue_type center_x, column_traits&lt; 1 &gt;::rvalue_type center_y, column_traits&lt; 2 &gt;::rvalue_type center_z, column_traits&lt; 3 &gt;::rvalue_type extents_x=0.5, column_traits&lt; 4 &gt;::rvalue_type extents_y=0.5, column_traits&lt; 5 &gt;::rvalue_type extents_z=0.5, column_traits&lt; 6 &gt;::rvalue_type mass=default_mass) noexcept(table_traits::insert_is_nothrow&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ac25561f3c68f81aefcd48dd1114a0cfc</anchor>
      <arglist>(size_type index_, CenterX &amp;&amp;center_x, CenterY &amp;&amp;center_y, CenterZ &amp;&amp;center_z, ExtentsX &amp;&amp;extents_x=0.5, ExtentsY &amp;&amp;extents_y=0.5, ExtentsZ &amp;&amp;extents_z=0.5, Mass &amp;&amp;mass=default_mass) noexcept(table_traits::emplace_is_nothrow&lt; table_type, CenterX &amp;&amp;, CenterY &amp;&amp;, CenterZ &amp;&amp;, ExtentsX &amp;&amp;, ExtentsY &amp;&amp;, ExtentsZ &amp;&amp;, Mass &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr boxes &amp;</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a5b78ba51174f6142524311fb4cb648bf</anchor>
      <arglist>(size_type index_, Tuple &amp;&amp;tuple_) noexcept(table_traits::emplace_is_nothrow&lt; table_type, Tuple &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>aec0f65cd30f6492f13f6112b02190706</anchor>
      <arglist>(iterator iter_, CenterX &amp;&amp;center_x, CenterY &amp;&amp;center_y, CenterZ &amp;&amp;center_z, ExtentsX &amp;&amp;extents_x=0.5, ExtentsY &amp;&amp;extents_y=0.5, ExtentsZ &amp;&amp;extents_z=0.5, Mass &amp;&amp;mass=default_mass) noexcept(table_traits::emplace_is_nothrow&lt; table_type, CenterX &amp;&amp;, CenterY &amp;&amp;, CenterZ &amp;&amp;, ExtentsX &amp;&amp;, ExtentsY &amp;&amp;, ExtentsZ &amp;&amp;, Mass &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a2beecd7833ba70beb35a6e0d449cf3de</anchor>
      <arglist>(iterator iter_, Tuple &amp;&amp;tuple_) noexcept(table_traits::emplace_is_nothrow&lt; table_type, Tuple &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a4af213412cc3c092b1cec8b60c46d592</anchor>
      <arglist>(const_iterator iter_, CenterX &amp;&amp;center_x, CenterY &amp;&amp;center_y, CenterZ &amp;&amp;center_z, ExtentsX &amp;&amp;extents_x=0.5, ExtentsY &amp;&amp;extents_y=0.5, ExtentsZ &amp;&amp;extents_z=0.5, Mass &amp;&amp;mass=default_mass) noexcept(table_traits::emplace_is_nothrow&lt; table_type, CenterX &amp;&amp;, CenterY &amp;&amp;, CenterZ &amp;&amp;, ExtentsX &amp;&amp;, ExtentsY &amp;&amp;, ExtentsZ &amp;&amp;, Mass &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>aac56393fea0c3b34d2c8951b27cb2f06</anchor>
      <arglist>(const_iterator iter_, Tuple &amp;&amp;tuple_) noexcept(table_traits::emplace_is_nothrow&lt; table_type, Tuple &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr column_type&lt; Column &gt; *</type>
      <name>column</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a2a641f6146abdf6174a1107948c465e4</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::add_const_t&lt; column_type&lt; Column &gt; &gt; *</type>
      <name>column</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>af5e23463c10124397b1c79459f0cf1a0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::byte *</type>
      <name>data</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a383dbc3d6897abf38e6bc285e8f440ad</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const std::byte *const</type>
      <name>data</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a275c134d86565d4a41f43aebea931762</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>center_x</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ac6340bb69743f8d5277374582fdeb0c9</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>center_x</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>af7ed114f61fee1579e6c2221d0207d8c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>center_y</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a0f7cc17a16452e63190e6d18b1e4329e</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>center_y</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a033078ff705254f7ae6cda6ef2191b3f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>center_z</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a6a25452fef8a9a20ffdd4bda107f7530</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>center_z</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a8b8e2024fe3e104940554d964e02a939</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>extents_x</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a214fc9dd629aa987e2b49dfb043288d2</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>extents_x</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>aa9073c2d39a00f007eb51ca38dbe7d7f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>extents_y</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>abcf87b3a283b18c7ad6fc82ffabe1b20</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>extents_y</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ab13c2649de4dba4d8b61a03e6f21af35</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>extents_z</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a0cc979a249dddbeb584106904a72f245</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>extents_z</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ae8aff289df8adc9dbda8e44adbed0e96</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>mass</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>af4bf12b35edd3e0814a8228d0c57787a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>mass</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>aef95352740973bf8212e76fe907cb7c8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>for_each_column</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a36fad20cf4ee6700d08a708ab18865a1</anchor>
      <arglist>(Func &amp;&amp;func) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>for_each_column</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>aca00ad8cc2deb98d442a1850487fb2bd</anchor>
      <arglist>(Func &amp;&amp;func) const noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a0e382d8361550b4947c6bc20ba87b23d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ad33f90666f5212fdcaa994199fea3bee</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>max_size</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a6ab29aa4d92e24c4bd6abff41d2bf79d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>allocation_size</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>aa5d4a754dcd04a4fd96d0f099d2d22a9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>reserve</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a1ba2fce33873ba22196568279799960f</anchor>
      <arglist>(size_type new_cap) noexcept(...) const expr size_type capacity() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>boxes &amp;</type>
      <name>shrink_to_fit</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ae101421af5fed407236a450e5d16f1bb</anchor>
      <arglist>() noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; boxes, Cols... &gt;</type>
      <name>begin</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a38a9ac3352dc7c224296fb1eca5b7a58</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; boxes, Cols... &gt;</type>
      <name>end</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ad7889d6bdd77e7c519dc80c9c67d6385</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; boxes &amp;&amp;, Cols... &gt;</type>
      <name>begin</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a1026aeb8a2bf238727a3ebe0cf4a1464</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; boxes &amp;&amp;, Cols... &gt;</type>
      <name>end</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ac4285223ddced30d58a5698f7aa91413</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::const_iterator_type&lt; boxes, Cols... &gt;</type>
      <name>begin</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a1033b5a2fdab591fff23f05649db84e8</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::const_iterator_type&lt; boxes, Cols... &gt;</type>
      <name>end</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a2b0ff9624574bd0611b2dc1a17556f72</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::const_iterator_type&lt; boxes, Cols... &gt;</type>
      <name>cbegin</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a84b6feadd9e09a05fdb14f114c9e2295</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::const_iterator_type&lt; boxes, Cols... &gt;</type>
      <name>cend</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>aa29af92eb33592f691269b86b8d3a292</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; boxes, Cols... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>aca55112ddbf1b0080f173169050017d3</anchor>
      <arglist>(size_type index) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>row_type</type>
      <name>operator[]</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a4cecee09af9dc517209a1c61adf5e3f8</anchor>
      <arglist>(size_type index) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; boxes, Cols... &gt;</type>
      <name>at</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a8f4e1a38c6553e0fdeef5636fb1c2150</anchor>
      <arglist>(size_type index) &amp;</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; boxes, Cols... &gt;</type>
      <name>front</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a3c414ee89f13daed28731d3533ac6aa5</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; boxes, Cols... &gt;</type>
      <name>back</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ab073a2c525eaee9e9339a5b014ac02c7</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; boxes &amp;&amp;, Cols... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a4828f796c0facea4da75af8cf60e1c42</anchor>
      <arglist>(size_type index) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>rvalue_row_type</type>
      <name>operator[]</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a3fe781bc65d3b721422f5ae296766ebd</anchor>
      <arglist>(size_type index) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; boxes &amp;&amp;, Cols... &gt;</type>
      <name>at</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>af2fc1badaf88a85676c592d6ca1c83b1</anchor>
      <arglist>(size_type index) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; boxes &amp;&amp;, Cols... &gt;</type>
      <name>front</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>aaa59eb02369f6ab75d05ed7bbcfc7ece</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; boxes &amp;&amp;, Cols... &gt;</type>
      <name>back</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a34a775008e67e1c4e629bacee3057c9f</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::const_row_type&lt; boxes, Cols... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a5c60d3cb310e9978b58b278a79c14cc7</anchor>
      <arglist>(size_type index) const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_row_type</type>
      <name>operator[]</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a3348edee9043dbddeb76f0a9280e4185</anchor>
      <arglist>(size_type index) const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::const_row_type&lt; boxes, Cols... &gt;</type>
      <name>at</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a6a073ab59be653e5958e113091adf698</anchor>
      <arglist>(size_type index) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>soagen::const_row_type&lt; boxes, Cols... &gt;</type>
      <name>front</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a9b41cd62a5934f203b4276bbdb38f5bf</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::const_row_type&lt; boxes, Cols... &gt;</type>
      <name>back</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a3d2e6a070cad0bfc3885f3dd882e60bd</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>span_type</type>
      <name>subspan</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a996e9a6002ab4ae324f76dcbf94dfc9c</anchor>
      <arglist>(size_type start, size_type count=static_cast&lt; size_type &gt;(-1)) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>rvalue_span_type</type>
      <name>subspan</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>adbbb3a7e428df983dbba68cda74619f1</anchor>
      <arglist>(size_type start, size_type count=static_cast&lt; size_type &gt;(-1)) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_span_type</type>
      <name>subspan</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a718e257a5027aa3cc8ce5f83e0bc257d</anchor>
      <arglist>(size_type start, size_type count=static_cast&lt; size_type &gt;(-1)) const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_span_type</type>
      <name>const_subspan</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>af5674df91619befe7338cab3008059aa</anchor>
      <arglist>(size_type start, size_type count=static_cast&lt; size_type &gt;(-1)) const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>af1de6b8326125457c073d8d439964d5d</anchor>
      <arglist>(const boxes &amp;lhs, const boxes &amp;rhs) noexcept(soagen::is_nothrow_equality_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a1afe9819ec24b878abee954830e1978c</anchor>
      <arglist>(const boxes &amp;lhs, const boxes &amp;rhs) noexcept(soagen::is_nothrow_equality_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a7f151b8aef59afec875f119f846ac342</anchor>
      <arglist>(const boxes &amp;lhs, const boxes &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a97f21f38b98f2fdaf973393825a37a86</anchor>
      <arglist>(const boxes &amp;lhs, const boxes &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>ac9bfe5aeaefee1ceb1bd77ee6b43b7e0</anchor>
      <arglist>(const boxes &amp;lhs, const boxes &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classsoagen_1_1examples_1_1boxes.html</anchorfile>
      <anchor>a225cdcffa1c29725a6600e20e1cf0d7a</anchor>
      <arglist>(const boxes &amp;lhs, const boxes &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>soagen::column_traits</name>
    <filename>structsoagen_1_1column__traits.html</filename>
    <templarg></templarg>
    <templarg>Align</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>storage_type</name>
      <anchorfile>structsoagen_1_1column__traits.html</anchorfile>
      <anchor>ac7565614ad518f9c714936305838dc9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ValueType</type>
      <name>value_type</name>
      <anchorfile>structsoagen_1_1column__traits.html</anchorfile>
      <anchor>abc43a55237ba1212da2a82decedd8a8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParamType</type>
      <name>param_type</name>
      <anchorfile>structsoagen_1_1column__traits.html</anchorfile>
      <anchor>a7e97ca614d4d8f34e873fee45cb0f047</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>forward_type&lt; param_type &gt;</type>
      <name>param_forward_type</name>
      <anchorfile>structsoagen_1_1column__traits.html</anchorfile>
      <anchor>a269906021dadcb9a9d6ad1aff3364cf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::rvalue_type&lt; param_type &gt;</type>
      <name>rvalue_type</name>
      <anchorfile>structsoagen_1_1column__traits.html</anchorfile>
      <anchor>afef9b99d2dda22869ae2f8ddb471287b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>forward_type&lt; rvalue_type &gt;</type>
      <name>rvalue_forward_type</name>
      <anchorfile>structsoagen_1_1column__traits.html</anchorfile>
      <anchor>aed32c7d75d45d823910737cc1a0d7a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>default_emplace_type</name>
      <anchorfile>structsoagen_1_1column__traits.html</anchorfile>
      <anchor>a50a3e6491fb45613b0ca6555067e4cae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>alignment</name>
      <anchorfile>structsoagen_1_1column__traits.html</anchorfile>
      <anchor>ac4f3d2258732b02124b46658afd5c4e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>aligned_stride</name>
      <anchorfile>structsoagen_1_1column__traits.html</anchorfile>
      <anchor>a662bd935d7b9454d7f6751934185cdea</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>soagen::emplacer</name>
    <filename>structsoagen_1_1emplacer.html</filename>
    <templarg>Args</templarg>
  </compound>
  <compound kind="class">
    <name>soagen::examples::entities</name>
    <filename>classsoagen_1_1examples_1_1entities.html</filename>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>acbb62a3e02159f733fa9267dfdf3b75f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a7656c80ce8625679628d7f4d918ba478</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::allocator_type&lt; entities &gt;</type>
      <name>allocator_type</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a34a7613616bb4279d75edaf49516728f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::table_type&lt; entities &gt;</type>
      <name>table_type</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a1bd996f5c4022db5f147db8af5790747</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::table_traits_type&lt; entities &gt;</type>
      <name>table_traits</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>aae71ecd2ce17f7cbdb99ffd0b8430783</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>column_traits</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a71909bec956d9f4442a6043cbc1e1740</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>column_type</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a7ef9e16f613ae328273eb4cd94cebcbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::iterator_type&lt; entities &gt;</type>
      <name>iterator</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>af19a750d0d59cde32ef9729bdd47970c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::rvalue_iterator_type&lt; entities &gt;</type>
      <name>rvalue_iterator</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a71f4540b6502e692c8e28ca371f349ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::const_iterator_type&lt; entities &gt;</type>
      <name>const_iterator</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a463a808ada24ed8232529dfbf0265a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::span_type&lt; entities &gt;</type>
      <name>span_type</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a6a73b6d54dfce2b14a42d5fa821e8150</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::rvalue_span_type&lt; entities &gt;</type>
      <name>rvalue_span_type</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a5e6dce30e29e5078ae36ed815743ce02</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::const_span_type&lt; entities &gt;</type>
      <name>const_span_type</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>aee808b18f0ba24d4ded8008ade62f7cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::row_type&lt; entities &gt;</type>
      <name>row_type</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a668221ad705364de69c47797dbc30742</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::rvalue_row_type&lt; entities &gt;</type>
      <name>rvalue_row_type</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a59a4be474ef94f094d9b67e851e44715</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::const_row_type&lt; entities &gt;</type>
      <name>const_row_type</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a76bbd7ef1f1ccfad19bcde2a30f8ffde</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>columns</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>ac794e09312922513568a829b957945b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>entities</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a1d70b7f712792d2754b1a99e5a5a2e7e</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>entities</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>ab84f48d46d2cc0ce2fd0a19a0682a851</anchor>
      <arglist>(entities &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>entities &amp;</type>
      <name>operator=</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a01eeb58c10ec1107f73ac71ba907efdf</anchor>
      <arglist>(entities &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>entities</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a2b1829339099d03df04f79994d28a455</anchor>
      <arglist>(const entities &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>entities &amp;</type>
      <name>operator=</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>aa7b8f6c2209351ed118081143ed2dfe6</anchor>
      <arglist>(const entities &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~entities</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a29d7413b5b7241fc74d9d86dbb758616</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>entities</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a4151778de07646aa512da1063a0da468</anchor>
      <arglist>(const allocator_type &amp;alloc) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>entities</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a3c13993c1dbe68b3cfca2e888daa60e7</anchor>
      <arglist>(allocator_type &amp;&amp;alloc) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr allocator_type</type>
      <name>get_allocator</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a5e7bea256e62d305c7b0c30c015bfe57</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr table_type &amp;</type>
      <name>table</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a2d1c7235defa00d7015a60ca6e1c36b8</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr table_type &amp;&amp;</type>
      <name>table</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a19591536f444db20b93ab73782f0799a</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const table_type &amp;</type>
      <name>table</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>aeb3e013b73cba6af6bc2bdcbe537488f</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator table_type &amp;</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a520739e2cb614814d468d9bacf1d8655</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator table_type &amp;&amp;</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a2dc19fa3bf3e1e30ab06f9c56bd4fc88</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator const table_type &amp;</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>ae415424f62b0ea12511908889e82b905</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr entities &amp;</type>
      <name>erase</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a81ed248f20d54859adbed93a75c5fc1f</anchor>
      <arglist>(size_type pos) noexcept(soagen::has_nothrow_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::optional&lt; size_type &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>ad99aa12e13d5084fcd13062c51aa7585</anchor>
      <arglist>(size_type pos) noexcept(soagen::has_nothrow_unordered_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>erase</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a0cfc569515fd8e042d68b63a8685200f</anchor>
      <arglist>(iterator pos) noexcept(soagen::has_nothrow_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::optional&lt; iterator &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a5777db35e317da6aeed59841a8e25a8e</anchor>
      <arglist>(iterator pos) noexcept(soagen::has_nothrow_unordered_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>erase</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>ab754c3f27c6d9029c349230f4003331f</anchor>
      <arglist>(const_iterator pos) noexcept(soagen::has_nothrow_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::optional&lt; const_iterator &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a4ab08f64c4be2abbeb86f820cd6098c1</anchor>
      <arglist>(const_iterator pos) noexcept(soagen::has_nothrow_unordered_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr entities &amp;</type>
      <name>swap_columns</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>af1d79876813722c4196aa4c421f500c7</anchor>
      <arglist>() noexcept(noexcept(std::declval&lt; table_type &amp; &gt;() .template swap_columns&lt; static_cast&lt; size_type &gt;(A), static_cast&lt; size_type &gt;(B)&gt;()))</arglist>
    </member>
    <member kind="function">
      <type>entities &amp;</type>
      <name>pop_back</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a9f0b37cc61db2ef79dc29297eb0dd1e5</anchor>
      <arglist>(size_type num=1) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>entities &amp;</type>
      <name>clear</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a8142708a836b592c0d0798d915a9e81a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>entities &amp;</type>
      <name>resize</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a7c276434607741aa7faedbc6692e97b2</anchor>
      <arglist>(size_type new_size) noexcept(soagen::has_nothrow_resize_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a16afc16b389d4a28dcb41f006cde323e</anchor>
      <arglist>(entities &amp;other) noexcept(soagen::has_nothrow_swap_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr entities &amp;</type>
      <name>push_back</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a7817baa2951663fa7695f388cdf2edc0</anchor>
      <arglist>(column_traits&lt; 0 &gt;::param_type id, column_traits&lt; 1 &gt;::param_type name=&quot;&quot;, column_traits&lt; 2 &gt;::param_type pos={}, column_traits&lt; 3 &gt;::param_type orient={ 1, 0, 0, 0 }) noexcept(table_traits::push_back_is_nothrow&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr entities &amp;</type>
      <name>push_back</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a1f7f5f7725c5e4e2a79964c6f4d57c24</anchor>
      <arglist>(column_traits&lt; 0 &gt;::rvalue_type id, column_traits&lt; 1 &gt;::rvalue_type name=&quot;&quot;, column_traits&lt; 2 &gt;::rvalue_type pos={}, column_traits&lt; 3 &gt;::rvalue_type orient={ 1, 0, 0, 0 }) noexcept(table_traits::rvalue_push_back_is_nothrow&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr entities &amp;</type>
      <name>emplace_back</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a76738a79f1166af2f6fb84e1659684dc</anchor>
      <arglist>(Id &amp;&amp;id, Name &amp;&amp;name=&quot;&quot;, Pos &amp;&amp;pos={}, Orient &amp;&amp;orient={ 1, 0, 0, 0 }) noexcept(table_traits::emplace_back_is_nothrow&lt; table_type, Id &amp;&amp;, Name &amp;&amp;, Pos &amp;&amp;, Orient &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr entities &amp;</type>
      <name>emplace_back</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a8408908ebff4edc1a3eb2ff74ce3e4d0</anchor>
      <arglist>(Tuple &amp;&amp;tuple_) noexcept(table_traits::emplace_back_is_nothrow&lt; table_type, Tuple &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr entities &amp;</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a875aabf26be310d972981d05e9a1b6bf</anchor>
      <arglist>(size_type index_, column_traits&lt; 0 &gt;::param_type id, column_traits&lt; 1 &gt;::param_type name=&quot;&quot;, column_traits&lt; 2 &gt;::param_type pos={}, column_traits&lt; 3 &gt;::param_type orient={ 1, 0, 0, 0 }) noexcept(table_traits::insert_is_nothrow&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr entities &amp;</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a2a274b12ec8ce336fb56ce147f3e6c92</anchor>
      <arglist>(size_type index_, column_traits&lt; 0 &gt;::rvalue_type id, column_traits&lt; 1 &gt;::rvalue_type name=&quot;&quot;, column_traits&lt; 2 &gt;::rvalue_type pos={}, column_traits&lt; 3 &gt;::rvalue_type orient={ 1, 0, 0, 0 }) noexcept(table_traits::insert_is_nothrow&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>abf3f6f33c1a1ca44c549113cea3a4ae4</anchor>
      <arglist>(iterator iter_, column_traits&lt; 0 &gt;::param_type id, column_traits&lt; 1 &gt;::param_type name=&quot;&quot;, column_traits&lt; 2 &gt;::param_type pos={}, column_traits&lt; 3 &gt;::param_type orient={ 1, 0, 0, 0 }) noexcept(table_traits::insert_is_nothrow&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>af8fa8cbe3459e3cb4db8f456f83ee189</anchor>
      <arglist>(const_iterator iter_, column_traits&lt; 0 &gt;::param_type id, column_traits&lt; 1 &gt;::param_type name=&quot;&quot;, column_traits&lt; 2 &gt;::param_type pos={}, column_traits&lt; 3 &gt;::param_type orient={ 1, 0, 0, 0 }) noexcept(table_traits::insert_is_nothrow&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a47b7c9334f61dffc013ba8e967d49ac5</anchor>
      <arglist>(iterator iter_, column_traits&lt; 0 &gt;::rvalue_type id, column_traits&lt; 1 &gt;::rvalue_type name=&quot;&quot;, column_traits&lt; 2 &gt;::rvalue_type pos={}, column_traits&lt; 3 &gt;::rvalue_type orient={ 1, 0, 0, 0 }) noexcept(table_traits::insert_is_nothrow&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>ab0c82a2953725d6dbf70b8037b591fd6</anchor>
      <arglist>(const_iterator iter_, column_traits&lt; 0 &gt;::rvalue_type id, column_traits&lt; 1 &gt;::rvalue_type name=&quot;&quot;, column_traits&lt; 2 &gt;::rvalue_type pos={}, column_traits&lt; 3 &gt;::rvalue_type orient={ 1, 0, 0, 0 }) noexcept(table_traits::insert_is_nothrow&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr entities &amp;</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a3137fae4724fa848736b7118f2e80369</anchor>
      <arglist>(size_type index_, Id &amp;&amp;id, Name &amp;&amp;name=&quot;&quot;, Pos &amp;&amp;pos={}, Orient &amp;&amp;orient={ 1, 0, 0, 0 }) noexcept(table_traits::emplace_is_nothrow&lt; table_type, Id &amp;&amp;, Name &amp;&amp;, Pos &amp;&amp;, Orient &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr entities &amp;</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a9ac107f13e4cdb00d944d20b8a19e51d</anchor>
      <arglist>(size_type index_, Tuple &amp;&amp;tuple_) noexcept(table_traits::emplace_is_nothrow&lt; table_type, Tuple &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a8622ad4243f5ec7a8c591fa81d4ec0f2</anchor>
      <arglist>(iterator iter_, Id &amp;&amp;id, Name &amp;&amp;name=&quot;&quot;, Pos &amp;&amp;pos={}, Orient &amp;&amp;orient={ 1, 0, 0, 0 }) noexcept(table_traits::emplace_is_nothrow&lt; table_type, Id &amp;&amp;, Name &amp;&amp;, Pos &amp;&amp;, Orient &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>ae7c0fb4c49d67cbbe654841fc42ed686</anchor>
      <arglist>(iterator iter_, Tuple &amp;&amp;tuple_) noexcept(table_traits::emplace_is_nothrow&lt; table_type, Tuple &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>aa7d912e9f56aa620291072441120a9a9</anchor>
      <arglist>(const_iterator iter_, Id &amp;&amp;id, Name &amp;&amp;name=&quot;&quot;, Pos &amp;&amp;pos={}, Orient &amp;&amp;orient={ 1, 0, 0, 0 }) noexcept(table_traits::emplace_is_nothrow&lt; table_type, Id &amp;&amp;, Name &amp;&amp;, Pos &amp;&amp;, Orient &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a038e783378acce7b0e0c98587d50f2f3</anchor>
      <arglist>(const_iterator iter_, Tuple &amp;&amp;tuple_) noexcept(table_traits::emplace_is_nothrow&lt; table_type, Tuple &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr column_type&lt; Column &gt; *</type>
      <name>column</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a1a9c843c5d5cd567cd5a0beff16e397c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::add_const_t&lt; column_type&lt; Column &gt; &gt; *</type>
      <name>column</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>ab37a1695bfe83ab604a2ec48f3241ba3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::byte *</type>
      <name>data</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a48ef08f110b229e77bcd8123e167db96</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const std::byte *const</type>
      <name>data</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a0a3c5a04b2b50ce5f756b090508254fd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr unsigned *</type>
      <name>id</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>acc3f6c1506b983e5ff4ed6ef52ab5339</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const unsigned *</type>
      <name>id</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>ad31682dc12439caff4a67a34fe410f04</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::string *</type>
      <name>name</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>aa834d3c58ebda1fa261fc1079a4939dc</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const std::string *</type>
      <name>name</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a053464e06cb9cd34b4122754b1ce0f52</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vec3 *</type>
      <name>pos</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>afbdca4f9a868a49b78753313721a7fc0</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const vec3 *</type>
      <name>pos</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a9b90fd3d48bc328dc4c0bff9c7685c4d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr quaternion *</type>
      <name>orient</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a45c5f188a3907c016e37fe9809ecffa1</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const quaternion *</type>
      <name>orient</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>acea5a84312d0194132a68400788ae8c7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>for_each_column</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>afa8ea3a486dcade701c7384ae3588299</anchor>
      <arglist>(Func &amp;&amp;func) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>for_each_column</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a9093b1286ece8a6125317911b5a9fbfc</anchor>
      <arglist>(Func &amp;&amp;func) const noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>acf59f7b2de775f95b8fc2859a6b98af8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a17e92df127739e7cf8235c734f07e678</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>max_size</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>af085b8dfcaccff366850498627eea014</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>allocation_size</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a96b127e9ca0eb95673500990fa015003</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>entities &amp;</type>
      <name>reserve</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a33d311da7d13b8411a4f79923a2e3a87</anchor>
      <arglist>(size_type new_cap) noexcept(...) const expr size_type capacity() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>entities &amp;</type>
      <name>shrink_to_fit</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>ac68e7d5bbf5ed61fd1abbd62f9a4e0df</anchor>
      <arglist>() noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; entities, Cols... &gt;</type>
      <name>begin</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a24a39573888883f4aba817c11de06b22</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; entities, Cols... &gt;</type>
      <name>end</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>abf6e6397ed5034d8e59a3bf1b377e026</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; entities &amp;&amp;, Cols... &gt;</type>
      <name>begin</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>aea78473a14a67dd47872145cca817d68</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; entities &amp;&amp;, Cols... &gt;</type>
      <name>end</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a9d51e2a647edf82a7a2666be684cfd77</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::const_iterator_type&lt; entities, Cols... &gt;</type>
      <name>begin</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>ac8b7b19c0243272e57d49a7f2abfe4f3</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::const_iterator_type&lt; entities, Cols... &gt;</type>
      <name>end</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a89527985bcc61c4846b189ae1b642957</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::const_iterator_type&lt; entities, Cols... &gt;</type>
      <name>cbegin</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a1f832696089ca8fb386abaa026249a9b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::const_iterator_type&lt; entities, Cols... &gt;</type>
      <name>cend</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a5c83576a87cabdd8f5f717785d3c800a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; entities, Cols... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a8e80cf11372990d47883ade0b03c4b84</anchor>
      <arglist>(size_type index) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>row_type</type>
      <name>operator[]</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>adfa5d17a4f30ea8d50fd92cd9bff7d4d</anchor>
      <arglist>(size_type index) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; entities, Cols... &gt;</type>
      <name>at</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a13a411259a22c3d7bc7da71cfd04ee01</anchor>
      <arglist>(size_type index) &amp;</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; entities, Cols... &gt;</type>
      <name>front</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>ad923b43b3f841d00c066561f02cbc761</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; entities, Cols... &gt;</type>
      <name>back</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>ac25d722db6c615202dca259c93840861</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; entities &amp;&amp;, Cols... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a408b9050b2e3d31ab3e05c41a323a514</anchor>
      <arglist>(size_type index) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>rvalue_row_type</type>
      <name>operator[]</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a30c6ccdca3fb0b0f03081de261f85725</anchor>
      <arglist>(size_type index) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; entities &amp;&amp;, Cols... &gt;</type>
      <name>at</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>ac82c2bbf3a70aede7ecbfc2529644cac</anchor>
      <arglist>(size_type index) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; entities &amp;&amp;, Cols... &gt;</type>
      <name>front</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a2c3b05b1b32310e3c959a95875d18857</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; entities &amp;&amp;, Cols... &gt;</type>
      <name>back</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>abee4cc5602fd6126239a0c18486abde0</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::const_row_type&lt; entities, Cols... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a7045168cecebc9a585b463e722a23630</anchor>
      <arglist>(size_type index) const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_row_type</type>
      <name>operator[]</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a95ef73dffc6429c88385a6557961a00e</anchor>
      <arglist>(size_type index) const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::const_row_type&lt; entities, Cols... &gt;</type>
      <name>at</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a61710f124583c20ddff0084c70391445</anchor>
      <arglist>(size_type index) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>soagen::const_row_type&lt; entities, Cols... &gt;</type>
      <name>front</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a221b625dc5b5a53c2312c54851e32eba</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::const_row_type&lt; entities, Cols... &gt;</type>
      <name>back</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a0812547adcdd40366029041dddca45ba</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>span_type</type>
      <name>subspan</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a353a444c2520717bd7f59d779ef42c6a</anchor>
      <arglist>(size_type start, size_type count=static_cast&lt; size_type &gt;(-1)) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>rvalue_span_type</type>
      <name>subspan</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a1e31d862a799d49e94b1b2a004c1fc37</anchor>
      <arglist>(size_type start, size_type count=static_cast&lt; size_type &gt;(-1)) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_span_type</type>
      <name>subspan</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a35245d7510501a796290ea5f9b91dc55</anchor>
      <arglist>(size_type start, size_type count=static_cast&lt; size_type &gt;(-1)) const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_span_type</type>
      <name>const_subspan</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>ad8a991021f6581a70077307673ede7de</anchor>
      <arglist>(size_type start, size_type count=static_cast&lt; size_type &gt;(-1)) const noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_type</type>
      <name>column_count</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a6135b8551750b36d51f78c953f7ef64d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_type</type>
      <name>aligned_stride</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>aacafb3baabbbd1a586b5812b4c7a827a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto &amp;</type>
      <name>column_name</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a49a7ec3fe4037841ea4676ea65816f6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a25f4af4d89b5a3d783ab059b610a85aa</anchor>
      <arglist>(const entities &amp;lhs, const entities &amp;rhs) noexcept(soagen::is_nothrow_equality_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a70bb5da3f4f9c8d615536e65a70813ca</anchor>
      <arglist>(const entities &amp;lhs, const entities &amp;rhs) noexcept(soagen::is_nothrow_equality_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a3d3b2f5880d87fb39abbd97dc3d0bf91</anchor>
      <arglist>(const entities &amp;lhs, const entities &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a3f8b925c2c2febfbfb2e70c4a3a2fe16</anchor>
      <arglist>(const entities &amp;lhs, const entities &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a585baf2e4aa58fa6f6c8864d80ec5b5c</anchor>
      <arglist>(const entities &amp;lhs, const entities &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a6f2ca9b2bf25e5d549778858686d15ff</anchor>
      <arglist>(const entities &amp;lhs, const entities &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr table_type &amp;</type>
      <name>table</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a2d1c7235defa00d7015a60ca6e1c36b8</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr table_type &amp;&amp;</type>
      <name>table</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a19591536f444db20b93ab73782f0799a</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const table_type &amp;</type>
      <name>table</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>aeb3e013b73cba6af6bc2bdcbe537488f</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator table_type &amp;</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a520739e2cb614814d468d9bacf1d8655</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator table_type &amp;&amp;</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a2dc19fa3bf3e1e30ab06f9c56bd4fc88</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator const table_type &amp;</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>ae415424f62b0ea12511908889e82b905</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr entities &amp;</type>
      <name>erase</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a81ed248f20d54859adbed93a75c5fc1f</anchor>
      <arglist>(size_type pos) noexcept(soagen::has_nothrow_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::optional&lt; size_type &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>ad99aa12e13d5084fcd13062c51aa7585</anchor>
      <arglist>(size_type pos) noexcept(soagen::has_nothrow_unordered_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>erase</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a0cfc569515fd8e042d68b63a8685200f</anchor>
      <arglist>(iterator pos) noexcept(soagen::has_nothrow_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::optional&lt; iterator &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a5777db35e317da6aeed59841a8e25a8e</anchor>
      <arglist>(iterator pos) noexcept(soagen::has_nothrow_unordered_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>erase</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>ab754c3f27c6d9029c349230f4003331f</anchor>
      <arglist>(const_iterator pos) noexcept(soagen::has_nothrow_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::optional&lt; const_iterator &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a4ab08f64c4be2abbeb86f820cd6098c1</anchor>
      <arglist>(const_iterator pos) noexcept(soagen::has_nothrow_unordered_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr entities &amp;</type>
      <name>swap_columns</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>af1d79876813722c4196aa4c421f500c7</anchor>
      <arglist>() noexcept(noexcept(std::declval&lt; table_type &amp; &gt;() .template swap_columns&lt; static_cast&lt; size_type &gt;(A), static_cast&lt; size_type &gt;(B)&gt;()))</arglist>
    </member>
    <member kind="function">
      <type>entities &amp;</type>
      <name>pop_back</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a9f0b37cc61db2ef79dc29297eb0dd1e5</anchor>
      <arglist>(size_type num=1) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>entities &amp;</type>
      <name>clear</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a8142708a836b592c0d0798d915a9e81a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>entities &amp;</type>
      <name>resize</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a7c276434607741aa7faedbc6692e97b2</anchor>
      <arglist>(size_type new_size) noexcept(soagen::has_nothrow_resize_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a16afc16b389d4a28dcb41f006cde323e</anchor>
      <arglist>(entities &amp;other) noexcept(soagen::has_nothrow_swap_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr entities &amp;</type>
      <name>push_back</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a7817baa2951663fa7695f388cdf2edc0</anchor>
      <arglist>(column_traits&lt; 0 &gt;::param_type id, column_traits&lt; 1 &gt;::param_type name=&quot;&quot;, column_traits&lt; 2 &gt;::param_type pos={}, column_traits&lt; 3 &gt;::param_type orient={ 1, 0, 0, 0 }) noexcept(table_traits::push_back_is_nothrow&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr entities &amp;</type>
      <name>push_back</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a1f7f5f7725c5e4e2a79964c6f4d57c24</anchor>
      <arglist>(column_traits&lt; 0 &gt;::rvalue_type id, column_traits&lt; 1 &gt;::rvalue_type name=&quot;&quot;, column_traits&lt; 2 &gt;::rvalue_type pos={}, column_traits&lt; 3 &gt;::rvalue_type orient={ 1, 0, 0, 0 }) noexcept(table_traits::rvalue_push_back_is_nothrow&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr entities &amp;</type>
      <name>emplace_back</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a76738a79f1166af2f6fb84e1659684dc</anchor>
      <arglist>(Id &amp;&amp;id, Name &amp;&amp;name=&quot;&quot;, Pos &amp;&amp;pos={}, Orient &amp;&amp;orient={ 1, 0, 0, 0 }) noexcept(table_traits::emplace_back_is_nothrow&lt; table_type, Id &amp;&amp;, Name &amp;&amp;, Pos &amp;&amp;, Orient &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr entities &amp;</type>
      <name>emplace_back</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a8408908ebff4edc1a3eb2ff74ce3e4d0</anchor>
      <arglist>(Tuple &amp;&amp;tuple_) noexcept(table_traits::emplace_back_is_nothrow&lt; table_type, Tuple &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr entities &amp;</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a875aabf26be310d972981d05e9a1b6bf</anchor>
      <arglist>(size_type index_, column_traits&lt; 0 &gt;::param_type id, column_traits&lt; 1 &gt;::param_type name=&quot;&quot;, column_traits&lt; 2 &gt;::param_type pos={}, column_traits&lt; 3 &gt;::param_type orient={ 1, 0, 0, 0 }) noexcept(table_traits::insert_is_nothrow&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr entities &amp;</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a2a274b12ec8ce336fb56ce147f3e6c92</anchor>
      <arglist>(size_type index_, column_traits&lt; 0 &gt;::rvalue_type id, column_traits&lt; 1 &gt;::rvalue_type name=&quot;&quot;, column_traits&lt; 2 &gt;::rvalue_type pos={}, column_traits&lt; 3 &gt;::rvalue_type orient={ 1, 0, 0, 0 }) noexcept(table_traits::insert_is_nothrow&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>abf3f6f33c1a1ca44c549113cea3a4ae4</anchor>
      <arglist>(iterator iter_, column_traits&lt; 0 &gt;::param_type id, column_traits&lt; 1 &gt;::param_type name=&quot;&quot;, column_traits&lt; 2 &gt;::param_type pos={}, column_traits&lt; 3 &gt;::param_type orient={ 1, 0, 0, 0 }) noexcept(table_traits::insert_is_nothrow&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>af8fa8cbe3459e3cb4db8f456f83ee189</anchor>
      <arglist>(const_iterator iter_, column_traits&lt; 0 &gt;::param_type id, column_traits&lt; 1 &gt;::param_type name=&quot;&quot;, column_traits&lt; 2 &gt;::param_type pos={}, column_traits&lt; 3 &gt;::param_type orient={ 1, 0, 0, 0 }) noexcept(table_traits::insert_is_nothrow&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a47b7c9334f61dffc013ba8e967d49ac5</anchor>
      <arglist>(iterator iter_, column_traits&lt; 0 &gt;::rvalue_type id, column_traits&lt; 1 &gt;::rvalue_type name=&quot;&quot;, column_traits&lt; 2 &gt;::rvalue_type pos={}, column_traits&lt; 3 &gt;::rvalue_type orient={ 1, 0, 0, 0 }) noexcept(table_traits::insert_is_nothrow&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>ab0c82a2953725d6dbf70b8037b591fd6</anchor>
      <arglist>(const_iterator iter_, column_traits&lt; 0 &gt;::rvalue_type id, column_traits&lt; 1 &gt;::rvalue_type name=&quot;&quot;, column_traits&lt; 2 &gt;::rvalue_type pos={}, column_traits&lt; 3 &gt;::rvalue_type orient={ 1, 0, 0, 0 }) noexcept(table_traits::insert_is_nothrow&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr entities &amp;</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a3137fae4724fa848736b7118f2e80369</anchor>
      <arglist>(size_type index_, Id &amp;&amp;id, Name &amp;&amp;name=&quot;&quot;, Pos &amp;&amp;pos={}, Orient &amp;&amp;orient={ 1, 0, 0, 0 }) noexcept(table_traits::emplace_is_nothrow&lt; table_type, Id &amp;&amp;, Name &amp;&amp;, Pos &amp;&amp;, Orient &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr entities &amp;</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a9ac107f13e4cdb00d944d20b8a19e51d</anchor>
      <arglist>(size_type index_, Tuple &amp;&amp;tuple_) noexcept(table_traits::emplace_is_nothrow&lt; table_type, Tuple &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a8622ad4243f5ec7a8c591fa81d4ec0f2</anchor>
      <arglist>(iterator iter_, Id &amp;&amp;id, Name &amp;&amp;name=&quot;&quot;, Pos &amp;&amp;pos={}, Orient &amp;&amp;orient={ 1, 0, 0, 0 }) noexcept(table_traits::emplace_is_nothrow&lt; table_type, Id &amp;&amp;, Name &amp;&amp;, Pos &amp;&amp;, Orient &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>ae7c0fb4c49d67cbbe654841fc42ed686</anchor>
      <arglist>(iterator iter_, Tuple &amp;&amp;tuple_) noexcept(table_traits::emplace_is_nothrow&lt; table_type, Tuple &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>aa7d912e9f56aa620291072441120a9a9</anchor>
      <arglist>(const_iterator iter_, Id &amp;&amp;id, Name &amp;&amp;name=&quot;&quot;, Pos &amp;&amp;pos={}, Orient &amp;&amp;orient={ 1, 0, 0, 0 }) noexcept(table_traits::emplace_is_nothrow&lt; table_type, Id &amp;&amp;, Name &amp;&amp;, Pos &amp;&amp;, Orient &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a038e783378acce7b0e0c98587d50f2f3</anchor>
      <arglist>(const_iterator iter_, Tuple &amp;&amp;tuple_) noexcept(table_traits::emplace_is_nothrow&lt; table_type, Tuple &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr column_type&lt; Column &gt; *</type>
      <name>column</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a1a9c843c5d5cd567cd5a0beff16e397c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::add_const_t&lt; column_type&lt; Column &gt; &gt; *</type>
      <name>column</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>ab37a1695bfe83ab604a2ec48f3241ba3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::byte *</type>
      <name>data</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a48ef08f110b229e77bcd8123e167db96</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const std::byte *const</type>
      <name>data</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a0a3c5a04b2b50ce5f756b090508254fd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr unsigned *</type>
      <name>id</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>acc3f6c1506b983e5ff4ed6ef52ab5339</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const unsigned *</type>
      <name>id</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>ad31682dc12439caff4a67a34fe410f04</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::string *</type>
      <name>name</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>aa834d3c58ebda1fa261fc1079a4939dc</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const std::string *</type>
      <name>name</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a053464e06cb9cd34b4122754b1ce0f52</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr vec3 *</type>
      <name>pos</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>afbdca4f9a868a49b78753313721a7fc0</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const vec3 *</type>
      <name>pos</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a9b90fd3d48bc328dc4c0bff9c7685c4d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr quaternion *</type>
      <name>orient</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a45c5f188a3907c016e37fe9809ecffa1</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const quaternion *</type>
      <name>orient</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>acea5a84312d0194132a68400788ae8c7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>for_each_column</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>afa8ea3a486dcade701c7384ae3588299</anchor>
      <arglist>(Func &amp;&amp;func) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>for_each_column</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a9093b1286ece8a6125317911b5a9fbfc</anchor>
      <arglist>(Func &amp;&amp;func) const noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>acf59f7b2de775f95b8fc2859a6b98af8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a17e92df127739e7cf8235c734f07e678</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>max_size</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>af085b8dfcaccff366850498627eea014</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>allocation_size</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a96b127e9ca0eb95673500990fa015003</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>entities &amp;</type>
      <name>reserve</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a33d311da7d13b8411a4f79923a2e3a87</anchor>
      <arglist>(size_type new_cap) noexcept(...) const expr size_type capacity() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>entities &amp;</type>
      <name>shrink_to_fit</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>ac68e7d5bbf5ed61fd1abbd62f9a4e0df</anchor>
      <arglist>() noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; entities, Cols... &gt;</type>
      <name>begin</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a24a39573888883f4aba817c11de06b22</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; entities, Cols... &gt;</type>
      <name>end</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>abf6e6397ed5034d8e59a3bf1b377e026</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; entities &amp;&amp;, Cols... &gt;</type>
      <name>begin</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>aea78473a14a67dd47872145cca817d68</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; entities &amp;&amp;, Cols... &gt;</type>
      <name>end</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a9d51e2a647edf82a7a2666be684cfd77</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::const_iterator_type&lt; entities, Cols... &gt;</type>
      <name>begin</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>ac8b7b19c0243272e57d49a7f2abfe4f3</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::const_iterator_type&lt; entities, Cols... &gt;</type>
      <name>end</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a89527985bcc61c4846b189ae1b642957</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::const_iterator_type&lt; entities, Cols... &gt;</type>
      <name>cbegin</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a1f832696089ca8fb386abaa026249a9b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::const_iterator_type&lt; entities, Cols... &gt;</type>
      <name>cend</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a5c83576a87cabdd8f5f717785d3c800a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; entities, Cols... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a8e80cf11372990d47883ade0b03c4b84</anchor>
      <arglist>(size_type index) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>row_type</type>
      <name>operator[]</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>adfa5d17a4f30ea8d50fd92cd9bff7d4d</anchor>
      <arglist>(size_type index) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; entities, Cols... &gt;</type>
      <name>at</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a13a411259a22c3d7bc7da71cfd04ee01</anchor>
      <arglist>(size_type index) &amp;</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; entities, Cols... &gt;</type>
      <name>front</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>ad923b43b3f841d00c066561f02cbc761</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; entities, Cols... &gt;</type>
      <name>back</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>ac25d722db6c615202dca259c93840861</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; entities &amp;&amp;, Cols... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a408b9050b2e3d31ab3e05c41a323a514</anchor>
      <arglist>(size_type index) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>rvalue_row_type</type>
      <name>operator[]</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a30c6ccdca3fb0b0f03081de261f85725</anchor>
      <arglist>(size_type index) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; entities &amp;&amp;, Cols... &gt;</type>
      <name>at</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>ac82c2bbf3a70aede7ecbfc2529644cac</anchor>
      <arglist>(size_type index) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; entities &amp;&amp;, Cols... &gt;</type>
      <name>front</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a2c3b05b1b32310e3c959a95875d18857</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; entities &amp;&amp;, Cols... &gt;</type>
      <name>back</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>abee4cc5602fd6126239a0c18486abde0</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::const_row_type&lt; entities, Cols... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a7045168cecebc9a585b463e722a23630</anchor>
      <arglist>(size_type index) const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_row_type</type>
      <name>operator[]</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a95ef73dffc6429c88385a6557961a00e</anchor>
      <arglist>(size_type index) const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::const_row_type&lt; entities, Cols... &gt;</type>
      <name>at</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a61710f124583c20ddff0084c70391445</anchor>
      <arglist>(size_type index) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>soagen::const_row_type&lt; entities, Cols... &gt;</type>
      <name>front</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a221b625dc5b5a53c2312c54851e32eba</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::const_row_type&lt; entities, Cols... &gt;</type>
      <name>back</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a0812547adcdd40366029041dddca45ba</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>span_type</type>
      <name>subspan</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a353a444c2520717bd7f59d779ef42c6a</anchor>
      <arglist>(size_type start, size_type count=static_cast&lt; size_type &gt;(-1)) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>rvalue_span_type</type>
      <name>subspan</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a1e31d862a799d49e94b1b2a004c1fc37</anchor>
      <arglist>(size_type start, size_type count=static_cast&lt; size_type &gt;(-1)) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_span_type</type>
      <name>subspan</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a35245d7510501a796290ea5f9b91dc55</anchor>
      <arglist>(size_type start, size_type count=static_cast&lt; size_type &gt;(-1)) const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_span_type</type>
      <name>const_subspan</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>ad8a991021f6581a70077307673ede7de</anchor>
      <arglist>(size_type start, size_type count=static_cast&lt; size_type &gt;(-1)) const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a25f4af4d89b5a3d783ab059b610a85aa</anchor>
      <arglist>(const entities &amp;lhs, const entities &amp;rhs) noexcept(soagen::is_nothrow_equality_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a70bb5da3f4f9c8d615536e65a70813ca</anchor>
      <arglist>(const entities &amp;lhs, const entities &amp;rhs) noexcept(soagen::is_nothrow_equality_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a3d3b2f5880d87fb39abbd97dc3d0bf91</anchor>
      <arglist>(const entities &amp;lhs, const entities &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a3f8b925c2c2febfbfb2e70c4a3a2fe16</anchor>
      <arglist>(const entities &amp;lhs, const entities &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a585baf2e4aa58fa6f6c8864d80ec5b5c</anchor>
      <arglist>(const entities &amp;lhs, const entities &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classsoagen_1_1examples_1_1entities.html</anchorfile>
      <anchor>a6f2ca9b2bf25e5d549778858686d15ff</anchor>
      <arglist>(const entities &amp;lhs, const entities &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>soagen::iterator</name>
    <filename>classsoagen_1_1iterator.html</filename>
    <templarg></templarg>
    <templarg>Columns</templarg>
    <member kind="typedef">
      <type>remove_cvref&lt; Soa &gt;</type>
      <name>soa_type</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>adde625fba683f7d32052502abb3fcb04</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>coerce_ref&lt; Soa &gt;</type>
      <name>soa_ref</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>af676899a55d5cefc9c66bec52a8198b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a7e704d60fdf43cbec1a4db7f5003c107</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a2867e7fa0c2b07744e41c7597e285950</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::row_type&lt; Soa, Columns... &gt;</type>
      <name>row_type</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a99382c3c6da748cc8cdbabe9ade501e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>row_type</type>
      <name>value_type</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a4fb0a6fc499f8019993b998dc06aa025</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>row_type</type>
      <name>reference</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>af7d05ec26f586dada50eb16b695a23c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::random_access_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a0c9c7017b64eb5b2ad281c0523e6ad70</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>iterator</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a44962beaadfd1fdc8544761d3b0cd2e9</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>iterator</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>ad0798563b0e91fc18353291f21efbe80</anchor>
      <arglist>(const iterator &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>iterator &amp;</type>
      <name>operator=</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a4024fb84fbfdc2139327eb092ae93605</anchor>
      <arglist>(const iterator &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>iterator</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>add518b0aa7149411062301a4d778eaaf</anchor>
      <arglist>(soa_ref src, difference_type pos) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr difference_type</type>
      <name>operator-</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a75d7ac6e934c57b0be7b6733545d6d8c</anchor>
      <arglist>(const iterator&lt; T, Cols... &gt; &amp;rhs) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>operator*</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>afc5bb326934eaca98f31726df558b33c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr detail::arrow_proxy&lt; row_type &gt;</type>
      <name>operator-&gt;</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a57c9b53301fbbd5b07eb5348cd8c134b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>operator[]</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>ab102660c5a0cc9dafc339f36cfca2bfa</anchor>
      <arglist>(difference_type offset) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a714a67f0cc7e309030dbae40cb9ae071</anchor>
      <arglist>(const iterator&lt; T, Cols... &gt; &amp;rhs) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a12cc48373d524b80c250a586c42bb79c</anchor>
      <arglist>(const iterator&lt; T, Cols... &gt; &amp;rhs) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>ab3be2aa025dbab1ded98fcf2ec4627b8</anchor>
      <arglist>(const iterator&lt; T, Cols... &gt; &amp;rhs) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>aa4df73cce2df46fad9f850bbe0fb46f4</anchor>
      <arglist>(const iterator&lt; T, Cols... &gt; &amp;rhs) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator iterator&lt; T, Cols... &gt;</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a08fdec008c2814b1588748185ef13ec8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator difference_type</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a80c176bd9f88959ac48c326705292b2e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a734fd3df3b6d80c9d71ff8d8f3bf776e</anchor>
      <arglist>(iterator &amp;it) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator</type>
      <name>operator++</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>afa985da3b39b42c99544ae16cae0e0dc</anchor>
      <arglist>(iterator &amp;it, int) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator &amp;</type>
      <name>operator+=</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>acbfffd554042f2882c2baa4afd134c27</anchor>
      <arglist>(iterator &amp;it, difference_type n) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator</type>
      <name>operator+</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>afcc32be7a707083d7a68b0166ad0d2fc</anchor>
      <arglist>(const iterator &amp;it, difference_type n) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator &amp;</type>
      <name>operator--</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a6151a5148a247f521cf4e148fc65f85e</anchor>
      <arglist>(iterator &amp;it) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator</type>
      <name>operator--</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a15ade785b30bd7ab2b73ad9cce8af505</anchor>
      <arglist>(iterator &amp;it, int) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator &amp;</type>
      <name>operator-=</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>ab94c4d5c5401feb11a5700c787026e47</anchor>
      <arglist>(iterator &amp;it, difference_type n) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator</type>
      <name>operator-</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a5e0bd834a7f89cfd220c53bc3c9baaae</anchor>
      <arglist>(const iterator &amp;it, difference_type n) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr difference_type</type>
      <name>operator-</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a75d7ac6e934c57b0be7b6733545d6d8c</anchor>
      <arglist>(const iterator&lt; T, Cols... &gt; &amp;rhs) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>operator*</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>afc5bb326934eaca98f31726df558b33c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr detail::arrow_proxy&lt; row_type &gt;</type>
      <name>operator-&gt;</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a57c9b53301fbbd5b07eb5348cd8c134b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>operator[]</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>ab102660c5a0cc9dafc339f36cfca2bfa</anchor>
      <arglist>(difference_type offset) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a37ac42a9113635e195999f9289b383e4</anchor>
      <arglist>(const iterator&lt; T, Cols... &gt; &amp;rhs) const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>aae008963a245dc475a120628c995c12f</anchor>
      <arglist>(const iterator &amp;lhs, const iterator&lt; T, Cols... &gt; &amp;rhs) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a714a67f0cc7e309030dbae40cb9ae071</anchor>
      <arglist>(const iterator&lt; T, Cols... &gt; &amp;rhs) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a12cc48373d524b80c250a586c42bb79c</anchor>
      <arglist>(const iterator&lt; T, Cols... &gt; &amp;rhs) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>ab3be2aa025dbab1ded98fcf2ec4627b8</anchor>
      <arglist>(const iterator&lt; T, Cols... &gt; &amp;rhs) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>aa4df73cce2df46fad9f850bbe0fb46f4</anchor>
      <arglist>(const iterator&lt; T, Cols... &gt; &amp;rhs) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator iterator&lt; T, Cols... &gt;</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a08fdec008c2814b1588748185ef13ec8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator difference_type</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a80c176bd9f88959ac48c326705292b2e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a734fd3df3b6d80c9d71ff8d8f3bf776e</anchor>
      <arglist>(iterator &amp;it) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator</type>
      <name>operator++</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>afa985da3b39b42c99544ae16cae0e0dc</anchor>
      <arglist>(iterator &amp;it, int) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator &amp;</type>
      <name>operator+=</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>acbfffd554042f2882c2baa4afd134c27</anchor>
      <arglist>(iterator &amp;it, difference_type n) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator</type>
      <name>operator+</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>afcc32be7a707083d7a68b0166ad0d2fc</anchor>
      <arglist>(const iterator &amp;it, difference_type n) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator &amp;</type>
      <name>operator--</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a6151a5148a247f521cf4e148fc65f85e</anchor>
      <arglist>(iterator &amp;it) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator</type>
      <name>operator--</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a15ade785b30bd7ab2b73ad9cce8af505</anchor>
      <arglist>(iterator &amp;it, int) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator &amp;</type>
      <name>operator-=</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>ab94c4d5c5401feb11a5700c787026e47</anchor>
      <arglist>(iterator &amp;it, difference_type n) noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend iterator</type>
      <name>operator-</name>
      <anchorfile>classsoagen_1_1iterator.html</anchorfile>
      <anchor>a5e0bd834a7f89cfd220c53bc3c9baaae</anchor>
      <arglist>(const iterator &amp;it, difference_type n) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>soagen::iterator_base</name>
    <filename>structsoagen_1_1iterator__base.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>soagen::row</name>
    <filename>structsoagen_1_1row.html</filename>
    <templarg></templarg>
    <templarg>Columns</templarg>
    <member kind="function">
      <type>constexpr decltype(auto)</type>
      <name>column</name>
      <anchorfile>structsoagen_1_1row.html</anchorfile>
      <anchor>a046cac5cd0d9d47cfb79d062c4a2887d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>for_each_column</name>
      <anchorfile>structsoagen_1_1row.html</anchorfile>
      <anchor>a9a0441ecdd38bf48fff4b88cb9296771</anchor>
      <arglist>(Func &amp;&amp;func) const noexcept(noexcept(soagen::for_each_column(std::declval&lt; const row &amp; &gt;(), std::declval&lt; Func &amp;&amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr decltype(auto)</type>
      <name>get</name>
      <anchorfile>structsoagen_1_1row.html</anchorfile>
      <anchor>a426d9e32f9db186f66ac7e1f7c95db95</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator row&lt; T, Cols... &gt;</name>
      <anchorfile>structsoagen_1_1row.html</anchorfile>
      <anchor>acf8ab0b3f08c3994f77a58e93bfb7bf3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>structsoagen_1_1row.html</anchorfile>
      <anchor>ab549d06a6998ba06077907a1f5765d2e</anchor>
      <arglist>(const row &amp;lhs, const row&lt; T, Columns... &gt; &amp;rhs) noexcept(table_traits_type&lt; Soa &gt;::all_nothrow_equality_comparable)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>structsoagen_1_1row.html</anchorfile>
      <anchor>a43d542011fdb4ef0c912a211d6bd24bb</anchor>
      <arglist>(const row &amp;lhs, const row&lt; T, Columns... &gt; &amp;rhs) noexcept(table_traits_type&lt; Soa &gt;::all_nothrow_equality_comparable)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>structsoagen_1_1row.html</anchorfile>
      <anchor>ad6ef3ef6d021620d1351615841578d6b</anchor>
      <arglist>(const row &amp;lhs, const row&lt; T, Columns... &gt; &amp;rhs) noexcept(table_traits_type&lt; Soa &gt;::all_nothrow_less_than_comparable)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>structsoagen_1_1row.html</anchorfile>
      <anchor>a40c1529c9924cc0bec08adf330d71ff5</anchor>
      <arglist>(const row &amp;lhs, const row&lt; T, Columns... &gt; &amp;rhs) noexcept(table_traits_type&lt; Soa &gt;::all_nothrow_less_than_comparable)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>structsoagen_1_1row.html</anchorfile>
      <anchor>a03ad66685003021f847bfbe2331e03f8</anchor>
      <arglist>(const row &amp;lhs, const row&lt; T, Columns... &gt; &amp;rhs) noexcept(table_traits_type&lt; Soa &gt;::all_nothrow_less_than_comparable)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>structsoagen_1_1row.html</anchorfile>
      <anchor>a9a7f2f012d9d0c8660c8641bad0c1276</anchor>
      <arglist>(const row &amp;lhs, const row&lt; T, Columns... &gt; &amp;rhs) noexcept(table_traits_type&lt; Soa &gt;::all_nothrow_less_than_comparable)</arglist>
    </member>
    <member kind="function">
      <type>constexpr decltype(auto)</type>
      <name>column</name>
      <anchorfile>structsoagen_1_1row.html</anchorfile>
      <anchor>a046cac5cd0d9d47cfb79d062c4a2887d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>for_each_column</name>
      <anchorfile>structsoagen_1_1row.html</anchorfile>
      <anchor>a9a0441ecdd38bf48fff4b88cb9296771</anchor>
      <arglist>(Func &amp;&amp;func) const noexcept(noexcept(soagen::for_each_column(std::declval&lt; const row &amp; &gt;(), std::declval&lt; Func &amp;&amp; &gt;())))</arglist>
    </member>
    <member kind="function">
      <type>constexpr decltype(auto)</type>
      <name>get</name>
      <anchorfile>structsoagen_1_1row.html</anchorfile>
      <anchor>a426d9e32f9db186f66ac7e1f7c95db95</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator row&lt; T, Cols... &gt;</name>
      <anchorfile>structsoagen_1_1row.html</anchorfile>
      <anchor>acf8ab0b3f08c3994f77a58e93bfb7bf3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>structsoagen_1_1row.html</anchorfile>
      <anchor>ab549d06a6998ba06077907a1f5765d2e</anchor>
      <arglist>(const row &amp;lhs, const row&lt; T, Columns... &gt; &amp;rhs) noexcept(table_traits_type&lt; Soa &gt;::all_nothrow_equality_comparable)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>structsoagen_1_1row.html</anchorfile>
      <anchor>a43d542011fdb4ef0c912a211d6bd24bb</anchor>
      <arglist>(const row &amp;lhs, const row&lt; T, Columns... &gt; &amp;rhs) noexcept(table_traits_type&lt; Soa &gt;::all_nothrow_equality_comparable)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>structsoagen_1_1row.html</anchorfile>
      <anchor>ad6ef3ef6d021620d1351615841578d6b</anchor>
      <arglist>(const row &amp;lhs, const row&lt; T, Columns... &gt; &amp;rhs) noexcept(table_traits_type&lt; Soa &gt;::all_nothrow_less_than_comparable)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>structsoagen_1_1row.html</anchorfile>
      <anchor>a40c1529c9924cc0bec08adf330d71ff5</anchor>
      <arglist>(const row &amp;lhs, const row&lt; T, Columns... &gt; &amp;rhs) noexcept(table_traits_type&lt; Soa &gt;::all_nothrow_less_than_comparable)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>structsoagen_1_1row.html</anchorfile>
      <anchor>a03ad66685003021f847bfbe2331e03f8</anchor>
      <arglist>(const row &amp;lhs, const row&lt; T, Columns... &gt; &amp;rhs) noexcept(table_traits_type&lt; Soa &gt;::all_nothrow_less_than_comparable)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>structsoagen_1_1row.html</anchorfile>
      <anchor>a9a7f2f012d9d0c8660c8641bad0c1276</anchor>
      <arglist>(const row &amp;lhs, const row&lt; T, Columns... &gt; &amp;rhs) noexcept(table_traits_type&lt; Soa &gt;::all_nothrow_less_than_comparable)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>soagen::row_base</name>
    <filename>structsoagen_1_1row__base.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>soagen::span</name>
    <filename>classsoagen_1_1span.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>remove_cvref&lt; Soa &gt;</type>
      <name>soa_type</name>
      <anchorfile>classsoagen_1_1span.html</anchorfile>
      <anchor>a3fb4d1cc3c15023ba9353e9fc2bb87bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>coerce_ref&lt; Soa &gt;</type>
      <name>soa_ref</name>
      <anchorfile>classsoagen_1_1span.html</anchorfile>
      <anchor>a40651553b109ce0730f6727a60854f46</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classsoagen_1_1span.html</anchorfile>
      <anchor>a6be28b8687327211689bd252bf56a3f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classsoagen_1_1span.html</anchorfile>
      <anchor>ae5f6d0bb30374f85b756f70d74e9c2aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::row_type&lt; Soa &gt;</type>
      <name>row_type</name>
      <anchorfile>classsoagen_1_1span.html</anchorfile>
      <anchor>a890e6606b7133c11fe9c5a2c646f02f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::iterator_type&lt; Soa &gt;</type>
      <name>iterator</name>
      <anchorfile>classsoagen_1_1span.html</anchorfile>
      <anchor>a5043fed61a8a01fc189c89e04b63dfcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::const_iterator_type&lt; Soa &gt;</type>
      <name>const_iterator</name>
      <anchorfile>classsoagen_1_1span.html</anchorfile>
      <anchor>a4e4a79b7cda32b79e01677dcedb5510f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>span</type>
      <name>span_type</name>
      <anchorfile>classsoagen_1_1span.html</anchorfile>
      <anchor>a4b5482e9bb1450d8e8a204193a7935c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::const_span_type&lt; Soa &gt;</type>
      <name>const_span_type</name>
      <anchorfile>classsoagen_1_1span.html</anchorfile>
      <anchor>af49439bf50acc66646a70d0bf6495ecd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>span</name>
      <anchorfile>classsoagen_1_1span.html</anchorfile>
      <anchor>a348243858d05945f48461a030c8e9202</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>span</name>
      <anchorfile>classsoagen_1_1span.html</anchorfile>
      <anchor>a3cd97157ca835018f95c8fe8756165d0</anchor>
      <arglist>(const span &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>span &amp;</type>
      <name>operator=</name>
      <anchorfile>classsoagen_1_1span.html</anchorfile>
      <anchor>ae78157b15ffc67ecfcb57a416cdbf72b</anchor>
      <arglist>(const span &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>span</name>
      <anchorfile>classsoagen_1_1span.html</anchorfile>
      <anchor>acb9bd28f3142aaf45a9bccf84c5f3cbd</anchor>
      <arglist>(soa_ref soa, size_type start, size_type count=static_cast&lt; size_type &gt;(-1)) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>span</name>
      <anchorfile>classsoagen_1_1span.html</anchorfile>
      <anchor>addd20ec914ce1bc26cf5a7c43be44571</anchor>
      <arglist>(soa_ref soa) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size</name>
      <anchorfile>classsoagen_1_1span.html</anchorfile>
      <anchor>a5532dd68791f64b781e5e3d6ba2b8fcf</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>classsoagen_1_1span.html</anchorfile>
      <anchor>a7aec5b376afd393fe3df33becef6cb41</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto *</type>
      <name>column</name>
      <anchorfile>classsoagen_1_1span.html</anchorfile>
      <anchor>a26b0d68d8af5c72602c9d2f747165a18</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>for_each_column</name>
      <anchorfile>classsoagen_1_1span.html</anchorfile>
      <anchor>ae95e0d717658d02778672138e34bbe02</anchor>
      <arglist>(Func &amp;&amp;func) const noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; Soa, Cols... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen_1_1span.html</anchorfile>
      <anchor>a2d3926fb6e38765600a215b3869acbe3</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>row_type</type>
      <name>operator[]</name>
      <anchorfile>classsoagen_1_1span.html</anchorfile>
      <anchor>a5ea5c3d02af3e3bebdf4bb1cad6678d6</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; Soa, Cols... &gt;</type>
      <name>at</name>
      <anchorfile>classsoagen_1_1span.html</anchorfile>
      <anchor>a822ca8dfbdda729f9cb3fa0b0bf157e2</anchor>
      <arglist>(size_type index) const</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; Soa, Cols... &gt;</type>
      <name>front</name>
      <anchorfile>classsoagen_1_1span.html</anchorfile>
      <anchor>a4350af4f249315da54cb46b40a80ef81</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; Soa, Cols... &gt;</type>
      <name>back</name>
      <anchorfile>classsoagen_1_1span.html</anchorfile>
      <anchor>a3fdec5d85fbf30cdacd149333a249148</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; Soa, Cols... &gt;</type>
      <name>begin</name>
      <anchorfile>classsoagen_1_1span.html</anchorfile>
      <anchor>a3ae68b277c0d3bbe542b06fafceb866f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; Soa, Cols... &gt;</type>
      <name>end</name>
      <anchorfile>classsoagen_1_1span.html</anchorfile>
      <anchor>a3537ea149747e7abf4ae5b0d3e54ec9c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::const_iterator_type&lt; Soa, Cols... &gt;</type>
      <name>cbegin</name>
      <anchorfile>classsoagen_1_1span.html</anchorfile>
      <anchor>a6fb8dc5a81c0c9293da7f34b5b7b46ce</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::const_iterator_type&lt; Soa, Cols... &gt;</type>
      <name>cend</name>
      <anchorfile>classsoagen_1_1span.html</anchorfile>
      <anchor>aca86097c4bba5fed16eacc496f061ebd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>span_type</type>
      <name>subspan</name>
      <anchorfile>classsoagen_1_1span.html</anchorfile>
      <anchor>a810b11bf93fe2c680d2e97c388d5fb35</anchor>
      <arglist>(size_type start, size_type count=static_cast&lt; size_type &gt;(-1)) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_span_type</type>
      <name>const_subspan</name>
      <anchorfile>classsoagen_1_1span.html</anchorfile>
      <anchor>a7385a8fae734f7e670f5f33a05bd530f</anchor>
      <arglist>(size_type start, size_type count=static_cast&lt; size_type &gt;(-1)) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>source_offset</name>
      <anchorfile>classsoagen_1_1span.html</anchorfile>
      <anchor>acbd3dcedc97cb97cceb1874224417aed</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Soa *</type>
      <name>source</name>
      <anchorfile>classsoagen_1_1span.html</anchorfile>
      <anchor>a64a3d0412c8b13274bee69488246e033</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator span&lt; T &gt;</name>
      <anchorfile>classsoagen_1_1span.html</anchorfile>
      <anchor>a98d802bf6a0e6f2c1001950055b8626c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size</name>
      <anchorfile>classsoagen_1_1span.html</anchorfile>
      <anchor>a5532dd68791f64b781e5e3d6ba2b8fcf</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>classsoagen_1_1span.html</anchorfile>
      <anchor>a7aec5b376afd393fe3df33becef6cb41</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto *</type>
      <name>column</name>
      <anchorfile>classsoagen_1_1span.html</anchorfile>
      <anchor>a26b0d68d8af5c72602c9d2f747165a18</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>for_each_column</name>
      <anchorfile>classsoagen_1_1span.html</anchorfile>
      <anchor>ae95e0d717658d02778672138e34bbe02</anchor>
      <arglist>(Func &amp;&amp;func) const noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; Soa, Cols... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen_1_1span.html</anchorfile>
      <anchor>a2d3926fb6e38765600a215b3869acbe3</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>row_type</type>
      <name>operator[]</name>
      <anchorfile>classsoagen_1_1span.html</anchorfile>
      <anchor>a5ea5c3d02af3e3bebdf4bb1cad6678d6</anchor>
      <arglist>(size_type index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; Soa, Cols... &gt;</type>
      <name>at</name>
      <anchorfile>classsoagen_1_1span.html</anchorfile>
      <anchor>a822ca8dfbdda729f9cb3fa0b0bf157e2</anchor>
      <arglist>(size_type index) const</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; Soa, Cols... &gt;</type>
      <name>front</name>
      <anchorfile>classsoagen_1_1span.html</anchorfile>
      <anchor>a4350af4f249315da54cb46b40a80ef81</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; Soa, Cols... &gt;</type>
      <name>back</name>
      <anchorfile>classsoagen_1_1span.html</anchorfile>
      <anchor>a3fdec5d85fbf30cdacd149333a249148</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; Soa, Cols... &gt;</type>
      <name>begin</name>
      <anchorfile>classsoagen_1_1span.html</anchorfile>
      <anchor>a3ae68b277c0d3bbe542b06fafceb866f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; Soa, Cols... &gt;</type>
      <name>end</name>
      <anchorfile>classsoagen_1_1span.html</anchorfile>
      <anchor>a3537ea149747e7abf4ae5b0d3e54ec9c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::const_iterator_type&lt; Soa, Cols... &gt;</type>
      <name>cbegin</name>
      <anchorfile>classsoagen_1_1span.html</anchorfile>
      <anchor>a6fb8dc5a81c0c9293da7f34b5b7b46ce</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::const_iterator_type&lt; Soa, Cols... &gt;</type>
      <name>cend</name>
      <anchorfile>classsoagen_1_1span.html</anchorfile>
      <anchor>aca86097c4bba5fed16eacc496f061ebd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>span_type</type>
      <name>subspan</name>
      <anchorfile>classsoagen_1_1span.html</anchorfile>
      <anchor>a810b11bf93fe2c680d2e97c388d5fb35</anchor>
      <arglist>(size_type start, size_type count=static_cast&lt; size_type &gt;(-1)) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_span_type</type>
      <name>const_subspan</name>
      <anchorfile>classsoagen_1_1span.html</anchorfile>
      <anchor>a7385a8fae734f7e670f5f33a05bd530f</anchor>
      <arglist>(size_type start, size_type count=static_cast&lt; size_type &gt;(-1)) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>source_offset</name>
      <anchorfile>classsoagen_1_1span.html</anchorfile>
      <anchor>acbd3dcedc97cb97cceb1874224417aed</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Soa *</type>
      <name>source</name>
      <anchorfile>classsoagen_1_1span.html</anchorfile>
      <anchor>a64a3d0412c8b13274bee69488246e033</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator span&lt; T &gt;</name>
      <anchorfile>classsoagen_1_1span.html</anchorfile>
      <anchor>a98d802bf6a0e6f2c1001950055b8626c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>soagen::span_base</name>
    <filename>structsoagen_1_1span__base.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>soagen::examples::spheres</name>
    <filename>classsoagen_1_1examples_1_1spheres.html</filename>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a08c94a4942bcca1038a28a00fc4a50f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ab9e836fc78bd3a4be98e921027c4cfb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::allocator_type&lt; spheres &gt;</type>
      <name>allocator_type</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a910d7d27563a2e6bf62047cde7dfe4e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::table_type&lt; spheres &gt;</type>
      <name>table_type</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>aaf24a52e7021d0bd7e988c20cb35b02c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::table_traits_type&lt; spheres &gt;</type>
      <name>table_traits</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>aef225f6c4ed449740c52fd96c15c0282</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>column_traits</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a54ba47e78bab5689d2dc3b4e0d37e07e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>column_type</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a3dad94fc6c66ea1123d6781fd3c65e13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::iterator_type&lt; spheres &gt;</type>
      <name>iterator</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a4a5c44d97c344b8fe453cba7b0db5e05</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::rvalue_iterator_type&lt; spheres &gt;</type>
      <name>rvalue_iterator</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ac643b26f3227a4e2c35bb06cd6c203e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::const_iterator_type&lt; spheres &gt;</type>
      <name>const_iterator</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>add6f84afc8b8b97fa0aacd3ccbc2a6a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::span_type&lt; spheres &gt;</type>
      <name>span_type</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>af6730fccbe61f4133c41db7c76a5e0df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::rvalue_span_type&lt; spheres &gt;</type>
      <name>rvalue_span_type</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>aedcdfdc8eb47d1d60c8b8a9288d6c161</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::const_span_type&lt; spheres &gt;</type>
      <name>const_span_type</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>aea16f5875c3e1038c2a5ecd3d2c4f685</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::row_type&lt; spheres &gt;</type>
      <name>row_type</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a2a211cdb0a9111293dc382477768b470</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::rvalue_row_type&lt; spheres &gt;</type>
      <name>rvalue_row_type</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>acbe5edbb419b8f77cc9ff4a1079cfd86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::const_row_type&lt; spheres &gt;</type>
      <name>const_row_type</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>af92030dce028203cfea202498ddd0c00</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>columns</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>aa320de3f87173819382ea922a50226f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>spheres</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a8c9d746e87aa5a834949ca64106f6691</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>spheres</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a8a5497999770b47e13c75ee7b6d7d931</anchor>
      <arglist>(spheres &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>operator=</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ae7f82d0a8fc78f13ce29dce49c48b4a9</anchor>
      <arglist>(spheres &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>spheres</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a9c614147cad3baf75b3cd8c9d9c7e7e0</anchor>
      <arglist>(const spheres &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>operator=</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a9c45fd146c1dde07978dfb809caa6e71</anchor>
      <arglist>(const spheres &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~spheres</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ae8b5593b8cdb4f45cad89051da5017ef</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>spheres</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>abca5038237b135340c913b0b59ca0327</anchor>
      <arglist>(const allocator_type &amp;alloc) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>spheres</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ac067f40e77955ad3c2028578c5c2f777</anchor>
      <arglist>(allocator_type &amp;&amp;alloc) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr allocator_type</type>
      <name>get_allocator</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ad06d1f6f2aa8cda39360bf601eaf1217</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr table_type &amp;</type>
      <name>table</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a7e6b36eecf49e305fa8eb99ad79c9460</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr table_type &amp;&amp;</type>
      <name>table</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a277f06c64736f3e2d4d28d03c48f1ef0</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const table_type &amp;</type>
      <name>table</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a6254470367cdea596472975259c39a97</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator table_type &amp;</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a1858aef38307d3278e1703cc23c0991a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator table_type &amp;&amp;</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a25222e2aed3b19024e75da9389ff121c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator const table_type &amp;</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a27b92ce8e1e16077a8de49854b76dade</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>erase</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a890d9bbce31f73a508e3f74cd9883213</anchor>
      <arglist>(size_type pos) noexcept(soagen::has_nothrow_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::optional&lt; size_type &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>aeebd21bc853a2bb49733a4610498af93</anchor>
      <arglist>(size_type pos) noexcept(soagen::has_nothrow_unordered_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>erase</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a9a5c10d386bd7d0c8adc75d82c10ae67</anchor>
      <arglist>(iterator pos) noexcept(soagen::has_nothrow_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::optional&lt; iterator &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>afceeb76c39dccef11f22d6e5bb8d1a8f</anchor>
      <arglist>(iterator pos) noexcept(soagen::has_nothrow_unordered_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>erase</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ab92c1f221d132393e2a35cfee39a2002</anchor>
      <arglist>(const_iterator pos) noexcept(soagen::has_nothrow_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::optional&lt; const_iterator &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a7edf77f9736d1e74e735586dc83af97d</anchor>
      <arglist>(const_iterator pos) noexcept(soagen::has_nothrow_unordered_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>swap_columns</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a6bceb0ffbc70fb9a0522defbf7a9b401</anchor>
      <arglist>() noexcept(noexcept(std::declval&lt; table_type &amp; &gt;() .template swap_columns&lt; static_cast&lt; size_type &gt;(A), static_cast&lt; size_type &gt;(B)&gt;()))</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>pop_back</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a923ea692644d195fb922c6e1f47cf560</anchor>
      <arglist>(size_type num=1) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>clear</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>aacb0be54644a8e931d035da08ecea9eb</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>resize</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ac7bfab8337b2cc736de2ee64775acbd8</anchor>
      <arglist>(size_type new_size) noexcept(soagen::has_nothrow_resize_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a0489cf91ad00e97256a8ed4f42394fac</anchor>
      <arglist>(spheres &amp;other) noexcept(soagen::has_nothrow_swap_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>push_back</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ad75482fdeb74e364b40cfc70e4887bba</anchor>
      <arglist>(column_traits&lt; 0 &gt;::param_type center_x, column_traits&lt; 1 &gt;::param_type center_y, column_traits&lt; 2 &gt;::param_type center_z, column_traits&lt; 3 &gt;::param_type radius=0.5, column_traits&lt; 4 &gt;::param_type mass=default_mass) noexcept(table_traits::push_back_is_nothrow&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>push_back</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a6cde1f22f5f6a05f62ad56dc31f87ad8</anchor>
      <arglist>(column_traits&lt; 0 &gt;::rvalue_type center_x, column_traits&lt; 1 &gt;::rvalue_type center_y, column_traits&lt; 2 &gt;::rvalue_type center_z, column_traits&lt; 3 &gt;::rvalue_type radius=0.5, column_traits&lt; 4 &gt;::rvalue_type mass=default_mass) noexcept(table_traits::rvalue_push_back_is_nothrow&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>emplace_back</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a305222061a489a8336fdf13812cbf39a</anchor>
      <arglist>(CenterX &amp;&amp;center_x, CenterY &amp;&amp;center_y, CenterZ &amp;&amp;center_z, Radius &amp;&amp;radius=0.5, Mass &amp;&amp;mass=default_mass) noexcept(table_traits::emplace_back_is_nothrow&lt; table_type, CenterX &amp;&amp;, CenterY &amp;&amp;, CenterZ &amp;&amp;, Radius &amp;&amp;, Mass &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>emplace_back</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a5c4da9946ac86147d3339915c88309db</anchor>
      <arglist>(Tuple &amp;&amp;tuple_) noexcept(table_traits::emplace_back_is_nothrow&lt; table_type, Tuple &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ac2938cccf77609467e3b51b6186df965</anchor>
      <arglist>(size_type index_, column_traits&lt; 0 &gt;::param_type center_x, column_traits&lt; 1 &gt;::param_type center_y, column_traits&lt; 2 &gt;::param_type center_z, column_traits&lt; 3 &gt;::param_type radius=0.5, column_traits&lt; 4 &gt;::param_type mass=default_mass) noexcept(table_traits::insert_is_nothrow&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a747275d8bed6abf13d3bd2a61a7790c5</anchor>
      <arglist>(size_type index_, column_traits&lt; 0 &gt;::rvalue_type center_x, column_traits&lt; 1 &gt;::rvalue_type center_y, column_traits&lt; 2 &gt;::rvalue_type center_z, column_traits&lt; 3 &gt;::rvalue_type radius=0.5, column_traits&lt; 4 &gt;::rvalue_type mass=default_mass) noexcept(table_traits::insert_is_nothrow&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a12146ebcec7a2576784a7b68576f5408</anchor>
      <arglist>(iterator iter_, column_traits&lt; 0 &gt;::param_type center_x, column_traits&lt; 1 &gt;::param_type center_y, column_traits&lt; 2 &gt;::param_type center_z, column_traits&lt; 3 &gt;::param_type radius=0.5, column_traits&lt; 4 &gt;::param_type mass=default_mass) noexcept(table_traits::insert_is_nothrow&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a9fba794300130a26040ab4dea318156a</anchor>
      <arglist>(const_iterator iter_, column_traits&lt; 0 &gt;::param_type center_x, column_traits&lt; 1 &gt;::param_type center_y, column_traits&lt; 2 &gt;::param_type center_z, column_traits&lt; 3 &gt;::param_type radius=0.5, column_traits&lt; 4 &gt;::param_type mass=default_mass) noexcept(table_traits::insert_is_nothrow&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ad23c2a344838d6ab3023257fa0ad58c2</anchor>
      <arglist>(iterator iter_, column_traits&lt; 0 &gt;::rvalue_type center_x, column_traits&lt; 1 &gt;::rvalue_type center_y, column_traits&lt; 2 &gt;::rvalue_type center_z, column_traits&lt; 3 &gt;::rvalue_type radius=0.5, column_traits&lt; 4 &gt;::rvalue_type mass=default_mass) noexcept(table_traits::insert_is_nothrow&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>aa464f76ab1a20fd6ee8a7934c3ac0f92</anchor>
      <arglist>(const_iterator iter_, column_traits&lt; 0 &gt;::rvalue_type center_x, column_traits&lt; 1 &gt;::rvalue_type center_y, column_traits&lt; 2 &gt;::rvalue_type center_z, column_traits&lt; 3 &gt;::rvalue_type radius=0.5, column_traits&lt; 4 &gt;::rvalue_type mass=default_mass) noexcept(table_traits::insert_is_nothrow&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a3c8f7e5cd5229b5d4d5ee13c6ccaa394</anchor>
      <arglist>(size_type index_, CenterX &amp;&amp;center_x, CenterY &amp;&amp;center_y, CenterZ &amp;&amp;center_z, Radius &amp;&amp;radius=0.5, Mass &amp;&amp;mass=default_mass) noexcept(table_traits::emplace_is_nothrow&lt; table_type, CenterX &amp;&amp;, CenterY &amp;&amp;, CenterZ &amp;&amp;, Radius &amp;&amp;, Mass &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a7aa103136988828db92c62a6e2c301d4</anchor>
      <arglist>(size_type index_, Tuple &amp;&amp;tuple_) noexcept(table_traits::emplace_is_nothrow&lt; table_type, Tuple &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a86ce1516213eed501a50aa1ac5e9860a</anchor>
      <arglist>(iterator iter_, CenterX &amp;&amp;center_x, CenterY &amp;&amp;center_y, CenterZ &amp;&amp;center_z, Radius &amp;&amp;radius=0.5, Mass &amp;&amp;mass=default_mass) noexcept(table_traits::emplace_is_nothrow&lt; table_type, CenterX &amp;&amp;, CenterY &amp;&amp;, CenterZ &amp;&amp;, Radius &amp;&amp;, Mass &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a43ada972df0c3602983b5b883e1edd01</anchor>
      <arglist>(iterator iter_, Tuple &amp;&amp;tuple_) noexcept(table_traits::emplace_is_nothrow&lt; table_type, Tuple &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a4c4820b89171675fa602dad959c9aa95</anchor>
      <arglist>(const_iterator iter_, CenterX &amp;&amp;center_x, CenterY &amp;&amp;center_y, CenterZ &amp;&amp;center_z, Radius &amp;&amp;radius=0.5, Mass &amp;&amp;mass=default_mass) noexcept(table_traits::emplace_is_nothrow&lt; table_type, CenterX &amp;&amp;, CenterY &amp;&amp;, CenterZ &amp;&amp;, Radius &amp;&amp;, Mass &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a6372563204dece91534e537a101f48a9</anchor>
      <arglist>(const_iterator iter_, Tuple &amp;&amp;tuple_) noexcept(table_traits::emplace_is_nothrow&lt; table_type, Tuple &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr column_type&lt; Column &gt; *</type>
      <name>column</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a67a5c5fe70b4932d2b3f747c96223e66</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::add_const_t&lt; column_type&lt; Column &gt; &gt; *</type>
      <name>column</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a8d9e06c6cfc7ed698beba45529024dab</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::byte *</type>
      <name>data</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ab86636c6a29633def694d1a2ecfe5a61</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const std::byte *const</type>
      <name>data</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a794784ff216107a99346ecee0d49e3a1</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>center_x</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>aea05122bb9759daec15a7a5c9eb25d46</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>center_x</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a44a0081edf5fbf043c4804deab132cbd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>center_y</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>aaf8083ab9a33b02d820f238c78cea296</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>center_y</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a27d2a022c370cf882e8f0583046ccf71</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>center_z</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a2fea223a8afe6b475e625fb81d409af7</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>center_z</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a63031f4cb3faad18f152955b4a92ad93</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>radius</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ac9f501b290fa85b358bd2a4fa67f5c99</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>radius</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a318449bf18c7b46ea77e7f56887ffc1b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>mass</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a509dc20b825074d8ea67907869b4c258</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>mass</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a35c9dd59de00c0f0a56027ff3623dd36</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>for_each_column</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a9d95f0ccd4afe0ccf1d908e17896e6c3</anchor>
      <arglist>(Func &amp;&amp;func) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>for_each_column</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ab2a806cc4c46140527910dbf83a7e7ff</anchor>
      <arglist>(Func &amp;&amp;func) const noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a21db600b74615cf6bac286c6e1b5e95a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a437412ecf84dbccf377c5fc29910f74e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>max_size</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a54f75cec867b90bcabbb404d0edefe88</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>allocation_size</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ada9563d84c3e6d5edb6484843e611b68</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>reserve</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a0baad075f2ea9370eec0ca6c53b1291a</anchor>
      <arglist>(size_type new_cap) noexcept(...) const expr size_type capacity() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>shrink_to_fit</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a4eb96b5e3acebf7b127c1184fe88df9c</anchor>
      <arglist>() noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; spheres, Cols... &gt;</type>
      <name>begin</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a6b0fdf25bcf1aef2e0c7d2745a8e0b97</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; spheres, Cols... &gt;</type>
      <name>end</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ab0b3a018381f295fbbe5761aa765b59a</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; spheres &amp;&amp;, Cols... &gt;</type>
      <name>begin</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a6af0758ae04b775e73644038ed574d05</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; spheres &amp;&amp;, Cols... &gt;</type>
      <name>end</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a10bc64195cdd30103efa679d5620a26a</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::const_iterator_type&lt; spheres, Cols... &gt;</type>
      <name>begin</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ad446ac99347bd7870879c19789a09530</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::const_iterator_type&lt; spheres, Cols... &gt;</type>
      <name>end</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a98664904563da9f55df8997d4585dda9</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::const_iterator_type&lt; spheres, Cols... &gt;</type>
      <name>cbegin</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>af04a617e80c56380cd6ca398055fd07d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::const_iterator_type&lt; spheres, Cols... &gt;</type>
      <name>cend</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ac0bde8aba04752c991f7b59ecb228ef2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; spheres, Cols... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a5333e0029a4224a256cdb2c25f980470</anchor>
      <arglist>(size_type index) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>row_type</type>
      <name>operator[]</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a61fcd79ad205b7a54df83fa8b62d0745</anchor>
      <arglist>(size_type index) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; spheres, Cols... &gt;</type>
      <name>at</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a493e8bd01f7fe50faebfd6d9bade34bd</anchor>
      <arglist>(size_type index) &amp;</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; spheres, Cols... &gt;</type>
      <name>front</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>aaff5d18ed515b3be2b5f1611d8ed93cc</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; spheres, Cols... &gt;</type>
      <name>back</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a0495a5dfe05410247e4efd97d5348839</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; spheres &amp;&amp;, Cols... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ac47d8928c250661d72769921bd2bfd2e</anchor>
      <arglist>(size_type index) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>rvalue_row_type</type>
      <name>operator[]</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a4fe580440d1ca73698efa98b825e2163</anchor>
      <arglist>(size_type index) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; spheres &amp;&amp;, Cols... &gt;</type>
      <name>at</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>aa4e3ab499adab958832bd85ba463a0b9</anchor>
      <arglist>(size_type index) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; spheres &amp;&amp;, Cols... &gt;</type>
      <name>front</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a2a605479ba823af0c3d04255ce97e713</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; spheres &amp;&amp;, Cols... &gt;</type>
      <name>back</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a5ebd338422c203aefce119b4cfd729bf</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::const_row_type&lt; spheres, Cols... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a5a4049281c3416f975f77aede6d9f068</anchor>
      <arglist>(size_type index) const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_row_type</type>
      <name>operator[]</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a94fd7e1bda70a0d7652e4fb14e090d0f</anchor>
      <arglist>(size_type index) const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::const_row_type&lt; spheres, Cols... &gt;</type>
      <name>at</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a80ee4c1e39defca9928a5aca4fa26ac9</anchor>
      <arglist>(size_type index) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>soagen::const_row_type&lt; spheres, Cols... &gt;</type>
      <name>front</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a8f71ae33424e243b5066a99c3b713f12</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::const_row_type&lt; spheres, Cols... &gt;</type>
      <name>back</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a13f67cf6874895ff39d2b04a0acfca7c</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>span_type</type>
      <name>subspan</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a0761dae34c8e87bed3780785eb3b17e2</anchor>
      <arglist>(size_type start, size_type count=static_cast&lt; size_type &gt;(-1)) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>rvalue_span_type</type>
      <name>subspan</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a8f08454b2f6fbf9a59c33293d96828f7</anchor>
      <arglist>(size_type start, size_type count=static_cast&lt; size_type &gt;(-1)) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_span_type</type>
      <name>subspan</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a65335fb29b6d1b4c75e0198dcbcb0eb1</anchor>
      <arglist>(size_type start, size_type count=static_cast&lt; size_type &gt;(-1)) const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_span_type</type>
      <name>const_subspan</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>aac503c91727e0ebbdb0581953acc421b</anchor>
      <arglist>(size_type start, size_type count=static_cast&lt; size_type &gt;(-1)) const noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_type</type>
      <name>column_count</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a5673375cacaf6dfce4f70bdbd269c7b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_type</type>
      <name>aligned_stride</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a2d2ba7bad5fad60548156753b9e2ede7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto &amp;</type>
      <name>column_name</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>acc17bcf6059de245531ecf32fdfbc809</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a65ba32f00d34d6a5a5b8a7919f84e2d1</anchor>
      <arglist>(const spheres &amp;lhs, const spheres &amp;rhs) noexcept(soagen::is_nothrow_equality_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a120747d54b1f609346f629ee72e4c508</anchor>
      <arglist>(const spheres &amp;lhs, const spheres &amp;rhs) noexcept(soagen::is_nothrow_equality_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a0339ef900980527c37d896e7b5000aab</anchor>
      <arglist>(const spheres &amp;lhs, const spheres &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ab265a656698bc6bc41281ccdbd88dace</anchor>
      <arglist>(const spheres &amp;lhs, const spheres &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>afa6d9a31f01eb202cf008bbd26fa6f70</anchor>
      <arglist>(const spheres &amp;lhs, const spheres &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a91300ac4967a242152b40f57b75c401e</anchor>
      <arglist>(const spheres &amp;lhs, const spheres &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr table_type &amp;</type>
      <name>table</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a7e6b36eecf49e305fa8eb99ad79c9460</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr table_type &amp;&amp;</type>
      <name>table</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a277f06c64736f3e2d4d28d03c48f1ef0</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const table_type &amp;</type>
      <name>table</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a6254470367cdea596472975259c39a97</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator table_type &amp;</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a1858aef38307d3278e1703cc23c0991a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator table_type &amp;&amp;</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a25222e2aed3b19024e75da9389ff121c</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator const table_type &amp;</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a27b92ce8e1e16077a8de49854b76dade</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>erase</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a890d9bbce31f73a508e3f74cd9883213</anchor>
      <arglist>(size_type pos) noexcept(soagen::has_nothrow_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::optional&lt; size_type &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>aeebd21bc853a2bb49733a4610498af93</anchor>
      <arglist>(size_type pos) noexcept(soagen::has_nothrow_unordered_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>erase</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a9a5c10d386bd7d0c8adc75d82c10ae67</anchor>
      <arglist>(iterator pos) noexcept(soagen::has_nothrow_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::optional&lt; iterator &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>afceeb76c39dccef11f22d6e5bb8d1a8f</anchor>
      <arglist>(iterator pos) noexcept(soagen::has_nothrow_unordered_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>erase</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ab92c1f221d132393e2a35cfee39a2002</anchor>
      <arglist>(const_iterator pos) noexcept(soagen::has_nothrow_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::optional&lt; const_iterator &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a7edf77f9736d1e74e735586dc83af97d</anchor>
      <arglist>(const_iterator pos) noexcept(soagen::has_nothrow_unordered_erase_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>swap_columns</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a6bceb0ffbc70fb9a0522defbf7a9b401</anchor>
      <arglist>() noexcept(noexcept(std::declval&lt; table_type &amp; &gt;() .template swap_columns&lt; static_cast&lt; size_type &gt;(A), static_cast&lt; size_type &gt;(B)&gt;()))</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>pop_back</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a923ea692644d195fb922c6e1f47cf560</anchor>
      <arglist>(size_type num=1) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>clear</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>aacb0be54644a8e931d035da08ecea9eb</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>resize</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ac7bfab8337b2cc736de2ee64775acbd8</anchor>
      <arglist>(size_type new_size) noexcept(soagen::has_nothrow_resize_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a0489cf91ad00e97256a8ed4f42394fac</anchor>
      <arglist>(spheres &amp;other) noexcept(soagen::has_nothrow_swap_member&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>push_back</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ad75482fdeb74e364b40cfc70e4887bba</anchor>
      <arglist>(column_traits&lt; 0 &gt;::param_type center_x, column_traits&lt; 1 &gt;::param_type center_y, column_traits&lt; 2 &gt;::param_type center_z, column_traits&lt; 3 &gt;::param_type radius=0.5, column_traits&lt; 4 &gt;::param_type mass=default_mass) noexcept(table_traits::push_back_is_nothrow&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>push_back</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a6cde1f22f5f6a05f62ad56dc31f87ad8</anchor>
      <arglist>(column_traits&lt; 0 &gt;::rvalue_type center_x, column_traits&lt; 1 &gt;::rvalue_type center_y, column_traits&lt; 2 &gt;::rvalue_type center_z, column_traits&lt; 3 &gt;::rvalue_type radius=0.5, column_traits&lt; 4 &gt;::rvalue_type mass=default_mass) noexcept(table_traits::rvalue_push_back_is_nothrow&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>emplace_back</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a305222061a489a8336fdf13812cbf39a</anchor>
      <arglist>(CenterX &amp;&amp;center_x, CenterY &amp;&amp;center_y, CenterZ &amp;&amp;center_z, Radius &amp;&amp;radius=0.5, Mass &amp;&amp;mass=default_mass) noexcept(table_traits::emplace_back_is_nothrow&lt; table_type, CenterX &amp;&amp;, CenterY &amp;&amp;, CenterZ &amp;&amp;, Radius &amp;&amp;, Mass &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>emplace_back</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a5c4da9946ac86147d3339915c88309db</anchor>
      <arglist>(Tuple &amp;&amp;tuple_) noexcept(table_traits::emplace_back_is_nothrow&lt; table_type, Tuple &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ac2938cccf77609467e3b51b6186df965</anchor>
      <arglist>(size_type index_, column_traits&lt; 0 &gt;::param_type center_x, column_traits&lt; 1 &gt;::param_type center_y, column_traits&lt; 2 &gt;::param_type center_z, column_traits&lt; 3 &gt;::param_type radius=0.5, column_traits&lt; 4 &gt;::param_type mass=default_mass) noexcept(table_traits::insert_is_nothrow&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a747275d8bed6abf13d3bd2a61a7790c5</anchor>
      <arglist>(size_type index_, column_traits&lt; 0 &gt;::rvalue_type center_x, column_traits&lt; 1 &gt;::rvalue_type center_y, column_traits&lt; 2 &gt;::rvalue_type center_z, column_traits&lt; 3 &gt;::rvalue_type radius=0.5, column_traits&lt; 4 &gt;::rvalue_type mass=default_mass) noexcept(table_traits::insert_is_nothrow&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a12146ebcec7a2576784a7b68576f5408</anchor>
      <arglist>(iterator iter_, column_traits&lt; 0 &gt;::param_type center_x, column_traits&lt; 1 &gt;::param_type center_y, column_traits&lt; 2 &gt;::param_type center_z, column_traits&lt; 3 &gt;::param_type radius=0.5, column_traits&lt; 4 &gt;::param_type mass=default_mass) noexcept(table_traits::insert_is_nothrow&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a9fba794300130a26040ab4dea318156a</anchor>
      <arglist>(const_iterator iter_, column_traits&lt; 0 &gt;::param_type center_x, column_traits&lt; 1 &gt;::param_type center_y, column_traits&lt; 2 &gt;::param_type center_z, column_traits&lt; 3 &gt;::param_type radius=0.5, column_traits&lt; 4 &gt;::param_type mass=default_mass) noexcept(table_traits::insert_is_nothrow&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ad23c2a344838d6ab3023257fa0ad58c2</anchor>
      <arglist>(iterator iter_, column_traits&lt; 0 &gt;::rvalue_type center_x, column_traits&lt; 1 &gt;::rvalue_type center_y, column_traits&lt; 2 &gt;::rvalue_type center_z, column_traits&lt; 3 &gt;::rvalue_type radius=0.5, column_traits&lt; 4 &gt;::rvalue_type mass=default_mass) noexcept(table_traits::insert_is_nothrow&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>insert</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>aa464f76ab1a20fd6ee8a7934c3ac0f92</anchor>
      <arglist>(const_iterator iter_, column_traits&lt; 0 &gt;::rvalue_type center_x, column_traits&lt; 1 &gt;::rvalue_type center_y, column_traits&lt; 2 &gt;::rvalue_type center_z, column_traits&lt; 3 &gt;::rvalue_type radius=0.5, column_traits&lt; 4 &gt;::rvalue_type mass=default_mass) noexcept(table_traits::insert_is_nothrow&lt; table_type &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a3c8f7e5cd5229b5d4d5ee13c6ccaa394</anchor>
      <arglist>(size_type index_, CenterX &amp;&amp;center_x, CenterY &amp;&amp;center_y, CenterZ &amp;&amp;center_z, Radius &amp;&amp;radius=0.5, Mass &amp;&amp;mass=default_mass) noexcept(table_traits::emplace_is_nothrow&lt; table_type, CenterX &amp;&amp;, CenterY &amp;&amp;, CenterZ &amp;&amp;, Radius &amp;&amp;, Mass &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr spheres &amp;</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a7aa103136988828db92c62a6e2c301d4</anchor>
      <arglist>(size_type index_, Tuple &amp;&amp;tuple_) noexcept(table_traits::emplace_is_nothrow&lt; table_type, Tuple &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a86ce1516213eed501a50aa1ac5e9860a</anchor>
      <arglist>(iterator iter_, CenterX &amp;&amp;center_x, CenterY &amp;&amp;center_y, CenterZ &amp;&amp;center_z, Radius &amp;&amp;radius=0.5, Mass &amp;&amp;mass=default_mass) noexcept(table_traits::emplace_is_nothrow&lt; table_type, CenterX &amp;&amp;, CenterY &amp;&amp;, CenterZ &amp;&amp;, Radius &amp;&amp;, Mass &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a43ada972df0c3602983b5b883e1edd01</anchor>
      <arglist>(iterator iter_, Tuple &amp;&amp;tuple_) noexcept(table_traits::emplace_is_nothrow&lt; table_type, Tuple &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a4c4820b89171675fa602dad959c9aa95</anchor>
      <arglist>(const_iterator iter_, CenterX &amp;&amp;center_x, CenterY &amp;&amp;center_y, CenterZ &amp;&amp;center_z, Radius &amp;&amp;radius=0.5, Mass &amp;&amp;mass=default_mass) noexcept(table_traits::emplace_is_nothrow&lt; table_type, CenterX &amp;&amp;, CenterY &amp;&amp;, CenterZ &amp;&amp;, Radius &amp;&amp;, Mass &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a6372563204dece91534e537a101f48a9</anchor>
      <arglist>(const_iterator iter_, Tuple &amp;&amp;tuple_) noexcept(table_traits::emplace_is_nothrow&lt; table_type, Tuple &amp;&amp; &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr column_type&lt; Column &gt; *</type>
      <name>column</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a67a5c5fe70b4932d2b3f747c96223e66</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::add_const_t&lt; column_type&lt; Column &gt; &gt; *</type>
      <name>column</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a8d9e06c6cfc7ed698beba45529024dab</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::byte *</type>
      <name>data</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ab86636c6a29633def694d1a2ecfe5a61</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const std::byte *const</type>
      <name>data</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a794784ff216107a99346ecee0d49e3a1</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>center_x</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>aea05122bb9759daec15a7a5c9eb25d46</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>center_x</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a44a0081edf5fbf043c4804deab132cbd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>center_y</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>aaf8083ab9a33b02d820f238c78cea296</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>center_y</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a27d2a022c370cf882e8f0583046ccf71</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>center_z</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a2fea223a8afe6b475e625fb81d409af7</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>center_z</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a63031f4cb3faad18f152955b4a92ad93</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>radius</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ac9f501b290fa85b358bd2a4fa67f5c99</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>radius</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a318449bf18c7b46ea77e7f56887ffc1b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr float *</type>
      <name>mass</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a509dc20b825074d8ea67907869b4c258</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const float *</type>
      <name>mass</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a35c9dd59de00c0f0a56027ff3623dd36</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>for_each_column</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a9d95f0ccd4afe0ccf1d908e17896e6c3</anchor>
      <arglist>(Func &amp;&amp;func) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>for_each_column</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ab2a806cc4c46140527910dbf83a7e7ff</anchor>
      <arglist>(Func &amp;&amp;func) const noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a21db600b74615cf6bac286c6e1b5e95a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a437412ecf84dbccf377c5fc29910f74e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>max_size</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a54f75cec867b90bcabbb404d0edefe88</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>allocation_size</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ada9563d84c3e6d5edb6484843e611b68</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>reserve</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a0baad075f2ea9370eec0ca6c53b1291a</anchor>
      <arglist>(size_type new_cap) noexcept(...) const expr size_type capacity() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>spheres &amp;</type>
      <name>shrink_to_fit</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a4eb96b5e3acebf7b127c1184fe88df9c</anchor>
      <arglist>() noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; spheres, Cols... &gt;</type>
      <name>begin</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a6b0fdf25bcf1aef2e0c7d2745a8e0b97</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; spheres, Cols... &gt;</type>
      <name>end</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ab0b3a018381f295fbbe5761aa765b59a</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; spheres &amp;&amp;, Cols... &gt;</type>
      <name>begin</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a6af0758ae04b775e73644038ed574d05</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; spheres &amp;&amp;, Cols... &gt;</type>
      <name>end</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a10bc64195cdd30103efa679d5620a26a</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::const_iterator_type&lt; spheres, Cols... &gt;</type>
      <name>begin</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ad446ac99347bd7870879c19789a09530</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::const_iterator_type&lt; spheres, Cols... &gt;</type>
      <name>end</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a98664904563da9f55df8997d4585dda9</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::const_iterator_type&lt; spheres, Cols... &gt;</type>
      <name>cbegin</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>af04a617e80c56380cd6ca398055fd07d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::const_iterator_type&lt; spheres, Cols... &gt;</type>
      <name>cend</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ac0bde8aba04752c991f7b59ecb228ef2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; spheres, Cols... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a5333e0029a4224a256cdb2c25f980470</anchor>
      <arglist>(size_type index) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>row_type</type>
      <name>operator[]</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a61fcd79ad205b7a54df83fa8b62d0745</anchor>
      <arglist>(size_type index) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; spheres, Cols... &gt;</type>
      <name>at</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a493e8bd01f7fe50faebfd6d9bade34bd</anchor>
      <arglist>(size_type index) &amp;</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; spheres, Cols... &gt;</type>
      <name>front</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>aaff5d18ed515b3be2b5f1611d8ed93cc</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; spheres, Cols... &gt;</type>
      <name>back</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a0495a5dfe05410247e4efd97d5348839</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; spheres &amp;&amp;, Cols... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ac47d8928c250661d72769921bd2bfd2e</anchor>
      <arglist>(size_type index) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>rvalue_row_type</type>
      <name>operator[]</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a4fe580440d1ca73698efa98b825e2163</anchor>
      <arglist>(size_type index) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; spheres &amp;&amp;, Cols... &gt;</type>
      <name>at</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>aa4e3ab499adab958832bd85ba463a0b9</anchor>
      <arglist>(size_type index) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; spheres &amp;&amp;, Cols... &gt;</type>
      <name>front</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a2a605479ba823af0c3d04255ce97e713</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; spheres &amp;&amp;, Cols... &gt;</type>
      <name>back</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a5ebd338422c203aefce119b4cfd729bf</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::const_row_type&lt; spheres, Cols... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a5a4049281c3416f975f77aede6d9f068</anchor>
      <arglist>(size_type index) const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_row_type</type>
      <name>operator[]</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a94fd7e1bda70a0d7652e4fb14e090d0f</anchor>
      <arglist>(size_type index) const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::const_row_type&lt; spheres, Cols... &gt;</type>
      <name>at</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a80ee4c1e39defca9928a5aca4fa26ac9</anchor>
      <arglist>(size_type index) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>soagen::const_row_type&lt; spheres, Cols... &gt;</type>
      <name>front</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a8f71ae33424e243b5066a99c3b713f12</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::const_row_type&lt; spheres, Cols... &gt;</type>
      <name>back</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a13f67cf6874895ff39d2b04a0acfca7c</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>span_type</type>
      <name>subspan</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a0761dae34c8e87bed3780785eb3b17e2</anchor>
      <arglist>(size_type start, size_type count=static_cast&lt; size_type &gt;(-1)) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>rvalue_span_type</type>
      <name>subspan</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a8f08454b2f6fbf9a59c33293d96828f7</anchor>
      <arglist>(size_type start, size_type count=static_cast&lt; size_type &gt;(-1)) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_span_type</type>
      <name>subspan</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a65335fb29b6d1b4c75e0198dcbcb0eb1</anchor>
      <arglist>(size_type start, size_type count=static_cast&lt; size_type &gt;(-1)) const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_span_type</type>
      <name>const_subspan</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>aac503c91727e0ebbdb0581953acc421b</anchor>
      <arglist>(size_type start, size_type count=static_cast&lt; size_type &gt;(-1)) const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a65ba32f00d34d6a5a5b8a7919f84e2d1</anchor>
      <arglist>(const spheres &amp;lhs, const spheres &amp;rhs) noexcept(soagen::is_nothrow_equality_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a120747d54b1f609346f629ee72e4c508</anchor>
      <arglist>(const spheres &amp;lhs, const spheres &amp;rhs) noexcept(soagen::is_nothrow_equality_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a0339ef900980527c37d896e7b5000aab</anchor>
      <arglist>(const spheres &amp;lhs, const spheres &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>ab265a656698bc6bc41281ccdbd88dace</anchor>
      <arglist>(const spheres &amp;lhs, const spheres &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>afa6d9a31f01eb202cf008bbd26fa6f70</anchor>
      <arglist>(const spheres &amp;lhs, const spheres &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classsoagen_1_1examples_1_1spheres.html</anchorfile>
      <anchor>a91300ac4967a242152b40f57b75c401e</anchor>
      <arglist>(const spheres &amp;lhs, const spheres &amp;rhs) noexcept(soagen::is_nothrow_less_than_comparable&lt; table_type &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>soagen::table</name>
    <filename>classsoagen_1_1table.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a66c79b5cdd46517f5a5eb496a05af93d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>aa924c0c91d41f782f45ea5043acf6dec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Allocator</type>
      <name>allocator_type</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a746187826b42ba59b0c121a0e38320dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits</type>
      <name>table_traits</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a9570cd144cb12019ab9941945d1b10d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>column_traits</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a2fed74dcdcef8a24f5ec52f32fb87731</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>column_type</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a0b4ff81fbe89977104e25dc5ff8c5d65</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::row_type&lt; table &gt;</type>
      <name>row_type</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ae7da74d2e97f0ecf095cc83c7debea2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::rvalue_row_type&lt; table &gt;</type>
      <name>rvalue_row_type</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a3a9d8d6066f1324ac0879af25311132f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::const_row_type&lt; table &gt;</type>
      <name>const_row_type</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>adeaa4e02b2a7edf397c1005b56d825ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::iterator_type&lt; table &gt;</type>
      <name>iterator</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>aa4af218dd68282e9885a87cfa94a8900</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::rvalue_iterator_type&lt; table &gt;</type>
      <name>rvalue_iterator</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a5ed78df4efe59d150d123b198b01186f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::const_iterator_type&lt; table &gt;</type>
      <name>const_iterator</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a825084555330f01e52ce6f7bb53faecb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::span_type&lt; table &gt;</type>
      <name>span_type</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ac6353231705456a551ecdc46de3f3861</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::rvalue_span_type&lt; table &gt;</type>
      <name>rvalue_span_type</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a5c63752a9783e26f2a8612c518cd2f11</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>soagen::const_span_type&lt; table &gt;</type>
      <name>const_span_type</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a47ae42f3750f8969ccd47d8bf9a4123a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>table</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ad9885ecaf5fe062639ec9409f900c261</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>table</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a7296a81aac125e7938fd35dd5e15be94</anchor>
      <arglist>(table &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>table &amp;</type>
      <name>operator=</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a2250cd5e92c989efcca61da1a68fb159</anchor>
      <arglist>(table &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>table</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ad192bf21e3d92be79ed260ab1a2a726f</anchor>
      <arglist>(const table &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>table &amp;</type>
      <name>operator=</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a78761dedffd9338afe29870eb023bdbf</anchor>
      <arglist>(const table &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~table</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ab7b68cde7cac6d8a4439184a26a02752</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>table</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a2eba6aa0d28a7bf8904ff18c8413b058</anchor>
      <arglist>(const allocator_type &amp;alloc) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>table</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a83d5cc430bf47ec982764fbf37739c31</anchor>
      <arglist>(allocator_type &amp;&amp;alloc) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr allocator_type</type>
      <name>get_allocator</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ae04052a208cb475abf9c21dbdc87e5f5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr column_type&lt; Column &gt; *</type>
      <name>column</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ad8b565a03c8b7d727d0648524ae4d145</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::add_const_t&lt; column_type&lt; Column &gt; &gt; *</type>
      <name>column</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>aaee246eb90df38087349c937e3b1721b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::byte *</type>
      <name>data</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a8e8716b6e0c13a1b37ec5493bb7c7801</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const std::byte *</type>
      <name>data</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ac2a6b40384455de36e7aa3a4652f338a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>for_each_column</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a6372fccce0b54f1c795c1acd2b64c672</anchor>
      <arglist>(Func &amp;&amp;func) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>for_each_column</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>acb082b6e717b35de391cdfcdd5a402bd</anchor>
      <arglist>(Func &amp;&amp;func) const noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ab2301cc792aaeeec4f1fa7bc44c690df</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a44e5a90f68d48cc9d1215464c374504c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>max_size</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a62d7d9c723d5ba2b7291dc1b146124cf</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_t</type>
      <name>allocation_size</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ac85eb17c0528bf4640fba18859397099</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>abfc3cc96dea33c8bc5e8195cc8875511</anchor>
      <arglist>(size_type new_cap) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>capacity</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>acc9e59da33074da54c363abbd9d1773b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shrink_to_fit</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a2a61077997a3a9202aa4fe869728e3f7</anchor>
      <arglist>() noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a286e59a8423d2ed19beedf78545ecd04</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a594219234a3eb4c5eba502fdda95f801</anchor>
      <arglist>(size_type pos) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>soagen::optional&lt; size_type &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a2025d38ad3f8ca8c710fc86e818126d9</anchor>
      <arglist>(size_type pos) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop_back</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a808bfa88a013c8c95bcd0adb13e1b8be</anchor>
      <arglist>(size_type num=1) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a1f02ce400aef54b142b2a684882de5f8</anchor>
      <arglist>(size_type new_size) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a9886d31a2d8887f33ccf57afe8f1047d</anchor>
      <arglist>(table &amp;other) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap_columns</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a6591ea0603cb2ae33db3bda712adf2c6</anchor>
      <arglist>() noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emplace_back</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a375841a3f64d8bb5a1acae63d1acca86</anchor>
      <arglist>(Args &amp;&amp;... args) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ab15aecb6e24d7adfd1f71b1a297e1845</anchor>
      <arglist>(size_type index, Args &amp;&amp;... args) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; table, Cols... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a0fa24aed654e0eb449f9334cd3295d37</anchor>
      <arglist>(size_type index) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::rvalue_row_type&lt; table, Cols... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a89da47204c073f4901fe8d74bc471003</anchor>
      <arglist>(size_type index) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::const_row_type&lt; table, Cols... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a40c5be78f31dffc6751ce614ba12c30a</anchor>
      <arglist>(size_type index) const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>row_type</type>
      <name>operator[]</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ae10683db545a9f80cc01c5a60cc1776e</anchor>
      <arglist>(size_type index) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>rvalue_row_type</type>
      <name>operator[]</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a41e66a5e72e7b3b9ad60db7156dbd869</anchor>
      <arglist>(size_type index) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_row_type</type>
      <name>operator[]</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>aeeded72d9ab3c74b37e1178ee34f1605</anchor>
      <arglist>(size_type index) const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; table, Cols... &gt;</type>
      <name>at</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a5469d0c5e03ef8693f79cde7447723ab</anchor>
      <arglist>(size_type index) &amp;</arglist>
    </member>
    <member kind="function">
      <type>soagen::rvalue_row_type&lt; table, Cols... &gt;</type>
      <name>at</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a4c2337e174270ae22b8ec6158945fd54</anchor>
      <arglist>(size_type index) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>soagen::const_row_type&lt; table, Cols... &gt;</type>
      <name>at</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a29cf692febc1491bd6e7ee879fed3c56</anchor>
      <arglist>(size_type index) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; table, Cols... &gt;</type>
      <name>front</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ab4dd4de19b6c54567c511ffb908742fb</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; table, Cols... &gt;</type>
      <name>back</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a9b7ab8189b688c0fde43ff47aa18c853</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::rvalue_row_type&lt; table, Cols... &gt;</type>
      <name>front</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>aedb4b816ca4e301c1e164fe542b5ef32</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_row_type&lt; table, Cols... &gt;</type>
      <name>back</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>adcaba8ceb6c86184c1413e0a8663c2ee</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::const_row_type&lt; table, Cols... &gt;</type>
      <name>front</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ab21c09c679d06619cd2b21f38db4408f</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::const_row_type&lt; table, Cols... &gt;</type>
      <name>back</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>aaff17f4ddf7d6d13cf14bb202f5a2e97</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; table, Cols... &gt;</type>
      <name>begin</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a96c7f8357c710541db12d7a2f6e73cdb</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; table, Cols... &gt;</type>
      <name>end</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a12f0ad175530c350d9a37c8e9ce558bd</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::rvalue_iterator_type&lt; table, Cols... &gt;</type>
      <name>begin</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a39e9cfa9d69bd839cbde6d31dff995cf</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::rvalue_iterator_type&lt; table, Cols... &gt;</type>
      <name>end</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ae4219ff0902a8cb7b2d35214adfe26bb</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::const_iterator_type&lt; table, Cols... &gt;</type>
      <name>begin</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a8dbb02d2bb95663a505d55f4a3255e9a</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::const_iterator_type&lt; table, Cols... &gt;</type>
      <name>end</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a44a471342ac6746b94fd1b98627f85bc</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::const_iterator_type&lt; table, Cols... &gt;</type>
      <name>cbegin</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a87af9ffc8f559bc576496fb366142cc8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::const_iterator_type&lt; table, Cols... &gt;</type>
      <name>cend</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a0012c7f112982b3c47265a403c6e11f8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>span_type</type>
      <name>subspan</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a204138a9bfe46c8624d9b3a225b2ddca</anchor>
      <arglist>(size_type start, size_type count=static_cast&lt; size_type &gt;(-1)) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>rvalue_span_type</type>
      <name>subspan</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a5cc4330d0d84b76d01d781a73e9b1aa4</anchor>
      <arglist>(size_type start, size_type count=static_cast&lt; size_type &gt;(-1)) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_span_type</type>
      <name>subspan</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a1189481823687a921964d94a9accc727</anchor>
      <arglist>(size_type start, size_type count=static_cast&lt; size_type &gt;(-1)) const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_span_type</type>
      <name>const_subspan</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a9e15eeac7ced9228eaca1105e6d17be1</anchor>
      <arglist>(size_type start, size_type count=static_cast&lt; size_type &gt;(-1)) const noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_type</type>
      <name>column_count</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a772ce1be05e333d74f2889235c5ed63c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>aligned_stride</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a4499d1b68c768be5bb1976aff3d172ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>afb7c9b31b82a2f581341293d7b886bec</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept(...)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ae7e6dcd41e4076c6c0f17226c9f90606</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept(...)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a3284223bf5cebda393d8cfe864acfcf2</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept(...)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a538d7b417aa6bd97438f46cbd6fb4fcf</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept(...)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>aa4f939153878d51597644c36c682427f</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept(...)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ae16c2ee9b6ca0e308afca8f8c210e738</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>constexpr column_type&lt; Column &gt; *</type>
      <name>column</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ad8b565a03c8b7d727d0648524ae4d145</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::add_const_t&lt; column_type&lt; Column &gt; &gt; *</type>
      <name>column</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>aaee246eb90df38087349c937e3b1721b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::byte *</type>
      <name>data</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a8e8716b6e0c13a1b37ec5493bb7c7801</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const std::byte *</type>
      <name>data</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ac2a6b40384455de36e7aa3a4652f338a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>for_each_column</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a6372fccce0b54f1c795c1acd2b64c672</anchor>
      <arglist>(Func &amp;&amp;func) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>for_each_column</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>acb082b6e717b35de391cdfcdd5a402bd</anchor>
      <arglist>(Func &amp;&amp;func) const noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ab2301cc792aaeeec4f1fa7bc44c690df</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a44e5a90f68d48cc9d1215464c374504c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>max_size</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a62d7d9c723d5ba2b7291dc1b146124cf</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_t</type>
      <name>allocation_size</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ac85eb17c0528bf4640fba18859397099</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>abfc3cc96dea33c8bc5e8195cc8875511</anchor>
      <arglist>(size_type new_cap) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>capacity</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>acc9e59da33074da54c363abbd9d1773b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shrink_to_fit</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a2a61077997a3a9202aa4fe869728e3f7</anchor>
      <arglist>() noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a286e59a8423d2ed19beedf78545ecd04</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a594219234a3eb4c5eba502fdda95f801</anchor>
      <arglist>(size_type pos) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>soagen::optional&lt; size_type &gt;</type>
      <name>unordered_erase</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a2025d38ad3f8ca8c710fc86e818126d9</anchor>
      <arglist>(size_type pos) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop_back</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a808bfa88a013c8c95bcd0adb13e1b8be</anchor>
      <arglist>(size_type num=1) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a1f02ce400aef54b142b2a684882de5f8</anchor>
      <arglist>(size_type new_size) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a9886d31a2d8887f33ccf57afe8f1047d</anchor>
      <arglist>(table &amp;other) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap_columns</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a6591ea0603cb2ae33db3bda712adf2c6</anchor>
      <arglist>() noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emplace_back</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a375841a3f64d8bb5a1acae63d1acca86</anchor>
      <arglist>(Args &amp;&amp;... args) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emplace</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ab15aecb6e24d7adfd1f71b1a297e1845</anchor>
      <arglist>(size_type index, Args &amp;&amp;... args) noexcept(...)</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; table, Cols... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a0fa24aed654e0eb449f9334cd3295d37</anchor>
      <arglist>(size_type index) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::rvalue_row_type&lt; table, Cols... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a89da47204c073f4901fe8d74bc471003</anchor>
      <arglist>(size_type index) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::const_row_type&lt; table, Cols... &gt;</type>
      <name>row</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a40c5be78f31dffc6751ce614ba12c30a</anchor>
      <arglist>(size_type index) const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>row_type</type>
      <name>operator[]</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ae10683db545a9f80cc01c5a60cc1776e</anchor>
      <arglist>(size_type index) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>rvalue_row_type</type>
      <name>operator[]</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a41e66a5e72e7b3b9ad60db7156dbd869</anchor>
      <arglist>(size_type index) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_row_type</type>
      <name>operator[]</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>aeeded72d9ab3c74b37e1178ee34f1605</anchor>
      <arglist>(size_type index) const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; table, Cols... &gt;</type>
      <name>at</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a5469d0c5e03ef8693f79cde7447723ab</anchor>
      <arglist>(size_type index) &amp;</arglist>
    </member>
    <member kind="function">
      <type>soagen::rvalue_row_type&lt; table, Cols... &gt;</type>
      <name>at</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a4c2337e174270ae22b8ec6158945fd54</anchor>
      <arglist>(size_type index) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>soagen::const_row_type&lt; table, Cols... &gt;</type>
      <name>at</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a29cf692febc1491bd6e7ee879fed3c56</anchor>
      <arglist>(size_type index) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; table, Cols... &gt;</type>
      <name>front</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ab4dd4de19b6c54567c511ffb908742fb</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_type&lt; table, Cols... &gt;</type>
      <name>back</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a9b7ab8189b688c0fde43ff47aa18c853</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::rvalue_row_type&lt; table, Cols... &gt;</type>
      <name>front</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>aedb4b816ca4e301c1e164fe542b5ef32</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::row_row_type&lt; table, Cols... &gt;</type>
      <name>back</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>adcaba8ceb6c86184c1413e0a8663c2ee</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::const_row_type&lt; table, Cols... &gt;</type>
      <name>front</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ab21c09c679d06619cd2b21f38db4408f</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>soagen::const_row_type&lt; table, Cols... &gt;</type>
      <name>back</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>aaff17f4ddf7d6d13cf14bb202f5a2e97</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; table, Cols... &gt;</type>
      <name>begin</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a96c7f8357c710541db12d7a2f6e73cdb</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::iterator_type&lt; table, Cols... &gt;</type>
      <name>end</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a12f0ad175530c350d9a37c8e9ce558bd</anchor>
      <arglist>() &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::rvalue_iterator_type&lt; table, Cols... &gt;</type>
      <name>begin</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a39e9cfa9d69bd839cbde6d31dff995cf</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::rvalue_iterator_type&lt; table, Cols... &gt;</type>
      <name>end</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ae4219ff0902a8cb7b2d35214adfe26bb</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::const_iterator_type&lt; table, Cols... &gt;</type>
      <name>begin</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a8dbb02d2bb95663a505d55f4a3255e9a</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::const_iterator_type&lt; table, Cols... &gt;</type>
      <name>end</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a44a471342ac6746b94fd1b98627f85bc</anchor>
      <arglist>() const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::const_iterator_type&lt; table, Cols... &gt;</type>
      <name>cbegin</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a87af9ffc8f559bc576496fb366142cc8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr soagen::const_iterator_type&lt; table, Cols... &gt;</type>
      <name>cend</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a0012c7f112982b3c47265a403c6e11f8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>span_type</type>
      <name>subspan</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a204138a9bfe46c8624d9b3a225b2ddca</anchor>
      <arglist>(size_type start, size_type count=static_cast&lt; size_type &gt;(-1)) &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>rvalue_span_type</type>
      <name>subspan</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a5cc4330d0d84b76d01d781a73e9b1aa4</anchor>
      <arglist>(size_type start, size_type count=static_cast&lt; size_type &gt;(-1)) &amp;&amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_span_type</type>
      <name>subspan</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a1189481823687a921964d94a9accc727</anchor>
      <arglist>(size_type start, size_type count=static_cast&lt; size_type &gt;(-1)) const &amp;noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_span_type</type>
      <name>const_subspan</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a9e15eeac7ced9228eaca1105e6d17be1</anchor>
      <arglist>(size_type start, size_type count=static_cast&lt; size_type &gt;(-1)) const noexcept</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator==</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>afb7c9b31b82a2f581341293d7b886bec</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept(...)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator!=</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ae7e6dcd41e4076c6c0f17226c9f90606</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept(...)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a3284223bf5cebda393d8cfe864acfcf2</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept(...)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>a538d7b417aa6bd97438f46cbd6fb4fcf</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept(...)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>aa4f939153878d51597644c36c682427f</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept(...)</arglist>
    </member>
    <member kind="friend">
      <type>constexpr friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classsoagen_1_1table.html</anchorfile>
      <anchor>ae16c2ee9b6ca0e308afca8f8c210e738</anchor>
      <arglist>(const table &amp;lhs, const table &amp;rhs) noexcept(...)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>soagen::table_base</name>
    <filename>structsoagen_1_1table__base.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>soagen::table_traits</name>
    <filename>structsoagen_1_1table__traits.html</filename>
    <templarg>Columns</templarg>
    <member kind="typedef">
      <type>type_at_index&lt; static_cast&lt; size_t &gt;(Index), detail::as_column&lt; Columns &gt;... &gt;</type>
      <name>column</name>
      <anchorfile>structsoagen_1_1table__traits.html</anchorfile>
      <anchor>a75b3ead46bbf9ea8fa0d08765aa5d984</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>type_at_index&lt; static_cast&lt; size_t &gt;(remove_cvref&lt; IndexConstant &gt;::value), detail::as_column&lt; Columns &gt;... &gt;</type>
      <name>column_from_ic</name>
      <anchorfile>structsoagen_1_1table__traits.html</anchorfile>
      <anchor>af1064f14072744217f1817132f96432c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>column_count</name>
      <anchorfile>structsoagen_1_1table__traits.html</anchorfile>
      <anchor>a9c5de4cd50de5c424f1bd3eecc2bb228</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>aligned_stride</name>
      <anchorfile>structsoagen_1_1table__traits.html</anchorfile>
      <anchor>a7b18454ef28aa4279e1f1fc61bd15381</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>column_alignments</name>
      <anchorfile>structsoagen_1_1table__traits.html</anchorfile>
      <anchor>a0405d7fb8c928727d169f006fd46abac</anchor>
      <arglist>[column_count]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>largest_alignment</name>
      <anchorfile>structsoagen_1_1table__traits.html</anchorfile>
      <anchor>a595a21db7abeb21baf06e855b8fffd8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>rvalues_are_distinct</name>
      <anchorfile>structsoagen_1_1table__traits.html</anchorfile>
      <anchor>a66de5d19cebef9ccf3aa60d044f551d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>emplace_back_is_nothrow</name>
      <anchorfile>structsoagen_1_1table__traits.html</anchorfile>
      <anchor>a695e2fad95546b8898ede16c02ad671f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>push_back_is_nothrow</name>
      <anchorfile>structsoagen_1_1table__traits.html</anchorfile>
      <anchor>a19e6ad60702f59f07cbbbb1402504c4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>rvalue_push_back_is_nothrow</name>
      <anchorfile>structsoagen_1_1table__traits.html</anchorfile>
      <anchor>ab5f7cbb57002764b245334750f49910a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>row_push_back_is_nothrow</name>
      <anchorfile>structsoagen_1_1table__traits.html</anchorfile>
      <anchor>ae492438a126be38710810a3d7caccc8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>emplace_is_nothrow</name>
      <anchorfile>structsoagen_1_1table__traits.html</anchorfile>
      <anchor>a50163a4d0076abfbea065c459dc89d41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>insert_is_nothrow</name>
      <anchorfile>structsoagen_1_1table__traits.html</anchorfile>
      <anchor>ad9f94da28e33983443db6b097129c2f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>rvalue_insert_is_nothrow</name>
      <anchorfile>structsoagen_1_1table__traits.html</anchorfile>
      <anchor>a220c9df86d096de95686cbc25236d3e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>row_insert_is_nothrow</name>
      <anchorfile>structsoagen_1_1table__traits.html</anchorfile>
      <anchor>ae08b56d98935b644e8ca7d0ceb3e93be</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>soagen</name>
    <filename>namespacesoagen.html</filename>
    <namespace>soagen::examples</namespace>
    <class kind="struct">soagen::allocator</class>
    <class kind="struct">soagen::column_traits</class>
    <class kind="struct">soagen::emplacer</class>
    <class kind="struct">soagen::iterator_base</class>
    <class kind="class">soagen::iterator</class>
    <class kind="struct">soagen::row_base</class>
    <class kind="struct">soagen::row</class>
    <class kind="struct">soagen::span_base</class>
    <class kind="class">soagen::span</class>
    <class kind="struct">soagen::table_base</class>
    <class kind="class">soagen::table</class>
    <class kind="struct">soagen::table_traits</class>
    <member kind="typedef">
      <type>std::remove_cv_t&lt; std::remove_reference_t&lt; T &gt; &gt;</type>
      <name>remove_cvref</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>ac8013f256732192bd84bfe3853d36ecf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::conditional_t&lt; std::is_reference_v&lt; T &gt;, T, std::add_lvalue_reference_t&lt; T &gt; &gt;</type>
      <name>coerce_ref</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a61cae0db038414799d74ed645c0d4b75</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::conditional_t&lt; Cond, std::add_const_t&lt; T &gt;, T &gt;</type>
      <name>conditionally_add_const</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a07501339e061881ade9a5e289cde5e44</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::conditional_t&lt; Cond, std::add_volatile_t&lt; T &gt;, T &gt;</type>
      <name>conditionally_add_volatile</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a5af7f078cd84ad05de86d96e785ace35</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::conditional_t&lt; Cond, remove_cvref&lt; T &gt;, T &gt;</type>
      <name>conditionally_remove_cvref</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>aabbcb5b590352f499134ae2757f40df9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>copy_cv</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a0e48be776561053b3786f54a39002f68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>copy_ref</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a218d66959dafa2289235b5287004226a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>copy_cvref</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a91f8d6ec8c0d147e8cfa843d3437ce65</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>remove_lvalue_ref</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a192c4ccec6456dff7086041fb8a54880</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::integral_constant&lt; size_t, static_cast&lt; size_t &gt;(Value)&gt;</type>
      <name>index_constant</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>ad43f30999296a4d8571022ae2549ff68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>forward_type</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>acc7386f915bae0818a7078fee2350cf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::optional&lt; T &gt;</type>
      <name>optional</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a752660c356d07c3815ebe85969788ae3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>type_at_index</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a3d26167a02130bdc91a58e0c3a2f75a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>soa_type</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a63924f3ba47a2222d54cd0283e9c739f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>table_type</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a83c1e715eb12c7393c508dcc1ba6264f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>table_traits_type</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a0b1aa7477b1f150cbfcd4cfbce00ff83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>value_type</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a3039db4dcf0ce567d3779945a88a97bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>value_ref</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a441f0884c02eef972f18e1c8e2a0c672</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>allocator_type</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a85c2af2605578cc55f1e69ccac75ffc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>column_indices</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a5e25ef705982230a80cbe73aa0619e60</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>span_type</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>abc803805737c8aac01016e8c89367a42</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>rvalue_span_type</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>ae7e1c7fecfd742278fda326122cc4040</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>const_span_type</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>ad3cc3f5ab96521d9798a72c384642284</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>row_type</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a392da967263ac8a2a67633e4c1574c19</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>rvalue_row_type</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a3f3cb793e8be86dce3707191ac281d23</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>const_row_type</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a02e4ed2db8fe07c631a52549dba76eae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>iterator_type</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>add5e820b9a46b8d9ee87c375f59bc7ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>rvalue_iterator_type</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>af717b61561ab17861be4b8dc6e079441</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>const_iterator_type</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>acc48016050a0144728c68aa97828a48b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>storage_type</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a05e7d77f37a4bcb2d256798df0fcbbc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>param_type</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>adf58db246695891f9f6789a84dce309a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POXY_IMPLEMENTATION_DETAIL_IMPL</type>
      <name>rvalue_type</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a0f0b3f50730a07796f5b04cf18926d4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>for_each_column</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>ad129e8c45650fd1c9b19ce2e3214b445</anchor>
      <arglist>(T &amp;&amp;obj, Func &amp;&amp;func) noexcept(noexcept(detail::for_each_column(std::declval&lt; T &amp;&amp; &gt;(), std::declval&lt; Func &amp;&amp; &gt;(), column_indices&lt; remove_cvref&lt; T &gt;&gt;{})))</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::size_t</type>
      <name>get_source_offset</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>aff3c4ef98f7876f1b8163a8b2ca72fe1</anchor>
      <arglist>([[maybe_unused]] const T &amp;object) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>ac09aa330dbbcf78f7794ac8232c46d66</anchor>
      <arglist>(table&lt; Args... &gt; &amp;lhs, table&lt; Args... &gt; &amp;rhs) noexcept(soagen::has_nothrow_swap_member&lt; table&lt; Args... &gt;&gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr decltype(auto)</type>
      <name>get_from_tuple</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>afba1151592ae109c0d8758a64b03893c</anchor>
      <arglist>(T &amp;&amp;tuple) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_column_traits</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>aabcf58d0029fe593e95833cb07c4f7a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_cv</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a33f1ab2862c86938e20c474a5b454551</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_cvref</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a6807d6e29ce4c1c6923e2214a3bd6b83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_integer</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a26eb6d5dd00e245d1100c028ee8af498</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>all_integer</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a85d7ea90620b08fe88b334fe5a52c9ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_unsigned</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>aa4ea4199aca8afd46bccd2c067e16aa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>any_same</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a0e0ba083c71c58486abb3a35973d210a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>any_same_value</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a23b24b02f81c64707fd6931609489102</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_implicit_lifetime_type</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a24f6ae16c76ca86d6bf594a40daea0bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>is_detected</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a419e437a6695ca5f441f9325e602f239</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_swap_member</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a85b5060347f1c2ccc296b67ead6bfb56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_resize_member</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a1cd6fd46b1d4f17bc0df5bff58ffbec8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_erase_member</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>acec9fc64e4bef77e711e70d8cac40100</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_unordered_erase_member</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a9ce88699add310eee6ef77255b5bcece</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_data_member</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a60597862a1a2fe5e93a0b8f7e38df031</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_emplace_member</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a12132107501d9efbc7d37470148986e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_emplace_back_member</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a0377f5449c0e14162750477ab1dd1e78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_equality_comparable</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a1feeeeac75c633a5479f91f6d96aef85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_less_than_comparable</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>ac633e60da34e1b33f52b02ae74570820</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_nothrow_swap_member</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a26feac0abbb3db577bc5e749ea2d84e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_nothrow_resize_member</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a152b3745ab0ec710c3de653f78b8949f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_nothrow_erase_member</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a57815a9f658fa8f6a11cbe0122184e25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_nothrow_unordered_erase_member</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>afc873f4a7018715a58de25729c724f9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_nothrow_data_member</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>ac39e6aa84e74f60370b9ca737fefddec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_nothrow_emplace_member</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a90edad47b305b552d36170fb234a8624</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_nothrow_emplace_back_member</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a73cdff9c884e02690bb3ce66f1c081ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_nothrow_equality_comparable</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>ae343150616e0e79217848e4fb27c0be5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_nothrow_less_than_comparable</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a5bae32f1abaf115c96d228ac3c92e407</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_table</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a52fd2ec6fe868575bdbacf17d045573a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_soa</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>af1ebb4d107e208fb28942fdea2cb6fa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_row</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>af318a46d5e993f9a3742d0dc5f9604cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_span</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>adf9b9dab27f779e56d4e812369987974</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_iterator</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>ad541e11816c26f9d3a00693f2b8de590</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>same_table_type</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a1409c1b176ccdc74c3452146e5da5d06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr size_t</type>
      <name>actual_alignment</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a099c8df53cfca23b2c245258dc938594</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_emplacer</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a28a13532fbc8ec520bcc036345af34f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_invocable</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a19e4d4167db86ba0bc02efea5a786c91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_nothrow_invocable</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a525d4590bf07fd46a55a5c8295821265</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_invocable_with_optional_index</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>aa770bb381662b58ca547ff1b63b5aaeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_nothrow_invocable_with_optional_index</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a78142dc539b1099ec0acd3af52f7cdce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_source_offset</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>a3f36e2218bfdbfa3f33ac5fbe48a3bb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_table_traits</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>ae01a388ac93f910d43246f50ac3648b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_tuple</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>ae247ccddc819bfc71997070cd3981970</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_constructible_by_unpacking_tuple</name>
      <anchorfile>namespacesoagen.html</anchorfile>
      <anchor>adf11ed476930c3845d8310a46a7e3a46</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>soagen::examples</name>
    <filename>namespacesoagen_1_1examples.html</filename>
    <class kind="class">soagen::examples::entities</class>
    <class kind="class">soagen::examples::boxes</class>
    <class kind="class">soagen::examples::spheres</class>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>namespacesoagen_1_1examples.html</anchorfile>
      <anchor>ab27a4c779651cc5c8bb538ba7f5b7802</anchor>
      <arglist>(entities &amp;lhs, entities &amp;rhs) noexcept(soagen::has_nothrow_swap_member&lt; entities &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>namespacesoagen_1_1examples.html</anchorfile>
      <anchor>a73ca6e1dfeb7041e934e8694d2cf2d6b</anchor>
      <arglist>(boxes &amp;lhs, boxes &amp;rhs) noexcept(soagen::has_nothrow_swap_member&lt; boxes &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>swap</name>
      <anchorfile>namespacesoagen_1_1examples.html</anchorfile>
      <anchor>a2f2937d0182090b040da55081644f65f</anchor>
      <arglist>(spheres &amp;lhs, spheres &amp;rhs) noexcept(soagen::has_nothrow_swap_member&lt; spheres &gt;)</arglist>
    </member>
  </compound>
  <compound kind="page">
    <name>schema</name>
    <title>Config Schema</title>
    <filename>schema.html</filename>
    <docanchor file="schema.html" title="&lt;root&gt;">schema_root</docanchor>
    <docanchor file="schema.html" title="allocator">schema_root_allocator</docanchor>
    <docanchor file="schema.html" title="namespace">schema_root_namespace</docanchor>
    <docanchor file="schema.html" title="hpp">schema_hpp</docanchor>
    <docanchor file="schema.html" title="banner">schema_hpp_banner</docanchor>
    <docanchor file="schema.html" title="brief">schema_hpp_brief</docanchor>
    <docanchor file="schema.html" title="combined">schema_hpp_combined</docanchor>
    <docanchor file="schema.html" title="footer">schema_hpp_footer</docanchor>
    <docanchor file="schema.html" title="header">schema_hpp_header</docanchor>
    <docanchor file="schema.html" title="includes">schema_hpp_includes</docanchor>
    <docanchor file="schema.html" title="prologue">schema_hpp_prologue</docanchor>
    <docanchor file="schema.html" title="structs">schema_structs</docanchor>
    <docanchor file="schema.html" title="allocator">schema_structs_allocator</docanchor>
    <docanchor file="schema.html" title="annotations">schema_structs_annotations</docanchor>
    <docanchor file="schema.html" title="attributes">schema_structs_attributes</docanchor>
    <docanchor file="schema.html" title="brief">schema_structs_brief</docanchor>
    <docanchor file="schema.html" title="copyable">schema_structs_copyable</docanchor>
    <docanchor file="schema.html" title="default_constructible">schema_structs_default_constructible</docanchor>
    <docanchor file="schema.html" title="details">schema_structs_details</docanchor>
    <docanchor file="schema.html" title="epilogue">schema_structs_epilogue</docanchor>
    <docanchor file="schema.html" title="footer">schema_structs_footer</docanchor>
    <docanchor file="schema.html" title="header">schema_structs_header</docanchor>
    <docanchor file="schema.html" title="mixins">schema_structs_mixins</docanchor>
    <docanchor file="schema.html" title="movable">schema_structs_movable</docanchor>
    <docanchor file="schema.html" title="prologue">schema_structs_prologue</docanchor>
    <docanchor file="schema.html" title="static_variables">schema_structs_static_variables</docanchor>
    <docanchor file="schema.html" title="swappable">schema_structs_swappable</docanchor>
    <docanchor file="schema.html" title="variables">schema_structs_variables</docanchor>
    <docanchor file="schema.html" title="static_variables">schema_static_variables</docanchor>
    <docanchor file="schema.html" title="access">schema_static_variables_access</docanchor>
    <docanchor file="schema.html" title="brief">schema_static_variables_brief</docanchor>
    <docanchor file="schema.html" title="const">schema_static_variables_const</docanchor>
    <docanchor file="schema.html" title="name">schema_static_variables_name</docanchor>
    <docanchor file="schema.html" title="type">schema_static_variables_type</docanchor>
    <docanchor file="schema.html" title="value">schema_static_variables_value</docanchor>
    <docanchor file="schema.html" title="variables">schema_variables</docanchor>
    <docanchor file="schema.html" title="alignment">schema_variables_alignment</docanchor>
    <docanchor file="schema.html" title="default">schema_variables_default</docanchor>
    <docanchor file="schema.html" title="name">schema_variables_name</docanchor>
    <docanchor file="schema.html" title="param_type">schema_variables_param_type</docanchor>
    <docanchor file="schema.html" title="type">schema_variables_type</docanchor>
  </compound>
  <compound kind="page">
    <name>poxy_changelog</name>
    <title>Changelog</title>
    <filename>poxy_changelog.html</filename>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>soagen: Structure-of-Arrays for C++</title>
    <filename>index.html</filename>
    <docanchor file="index.html" title="TL;DR">intro_tldr</docanchor>
    <docanchor file="index.html" title="Motivation">intro_motivation</docanchor>
    <docanchor file="index.html" title="Typical data layouts (Array-of-Structures)">intro_motivation_typical</docanchor>
    <docanchor file="index.html" title="Structure-of-Arrays">intro_motivation_soa</docanchor>
    <docanchor file="index.html" title="A naïve implementation">intro_motivation_soa_naive</docanchor>
    <docanchor file="index.html" title="Problem #1: Multiple allocations">intro_motivation_soa_multiple_allocation</docanchor>
    <docanchor file="index.html" title="Problem #2: Manual Synchronization">intro_motivation_soa_manual_sync</docanchor>
    <docanchor file="index.html" title="Problem #3: Identities are weakly-typed">intro_motivation_soa_iterators_weakly_typed</docanchor>
    <docanchor file="index.html" title="Problem #4: AoS-style access is cumbersome">intro_motivation_soa_struct_mode_hard</docanchor>
    <docanchor file="index.html" title="Problem #5: Not idiomatic C++">intro_motivation_soa_idiomatic</docanchor>
    <docanchor file="index.html" title="Problem #6: Elegance or Names - pick one">intro_motivation_soa_names</docanchor>
    <docanchor file="index.html" title="Introducing soagen">intro_introducing_soagen</docanchor>
    <docanchor file="index.html" title="Getting started">intro_getting_started</docanchor>
    <docanchor file="index.html" title="Prerequisites">intro_getting_started_prerequisites</docanchor>
    <docanchor file="index.html" title="Installing soagen">intro_getting_started_generator</docanchor>
    <docanchor file="index.html" title="Creating an SoA container class">intro_creating_a_class</docanchor>
    <docanchor file="index.html" title="Installing soagen.hpp">intro_installing_soagen_hpp</docanchor>
    <docanchor file="index.html" title="Configuring #includes">intro_configuring_includes</docanchor>
    <docanchor file="index.html" title="A brief aside: terminology">intro_nomenclature</docanchor>
    <docanchor file="index.html" title="Adding rows">intro_adding_rows</docanchor>
    <docanchor file="index.html" title="Removing rows">intro_removing_rows</docanchor>
    <docanchor file="index.html" title="Capacity">intro_capacity</docanchor>
    <docanchor file="index.html" title="Working with columns">intro_columns</docanchor>
    <docanchor file="index.html" title="Working with rows and iterators">intro_rows</docanchor>
    <docanchor file="index.html" title="Equality">intro_equality</docanchor>
    <docanchor file="index.html" title="Comparison">intro_comparison</docanchor>
    <docanchor file="index.html" title="Over-aligning columns">intro_custom_over_aligning_columns</docanchor>
    <docanchor file="index.html" title="Using custom allocators">intro_custom_byo_allocator</docanchor>
    <docanchor file="index.html" title="Customizing allocators for soagen">intro_customizing_allocators</docanchor>
    <docanchor file="index.html" title="Specifying a min_alignment">intro_customizing_allocators_min_alignment</docanchor>
    <docanchor file="index.html" title="Alignment-aware allocate()">intro_customizing_allocators_aligned_allocate</docanchor>
    <docanchor file="index.html" title="Accessing the underlying buffer">intro_access_underlying_buffer</docanchor>
    <docanchor file="index.html" title="Integrating with reflection systems">intro_integration_with_reflection</docanchor>
    <docanchor file="index.html" title="Creating your own SoA types without the generator">intro_using_without_generator</docanchor>
    <docanchor file="index.html" title="Next steps">intro_next_steps</docanchor>
  </compound>
</tagfile>
