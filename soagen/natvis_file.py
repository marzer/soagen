#!/usr/bin/env python3
# This file is a part of marzer/soagen and is subject to the the terms of the MIT license.
# Copyright (c) Mark Gillard <mark.gillard@outlook.com.au>
# See https://github.com/marzer/soagen/blob/master/LICENSE for the full license text.
# SPDX-License-Identifier: MIT

from xml.sax.saxutils import escape as _xml_escape

from . import utils
from .column import *
from .configurable import Configurable
from .metavars import *
from .writer import *



class NatvisFile(Configurable):

	def __init__(self, config, structs):
		super().__init__(config)
		self.path = self.config.path.with_suffix('.natvis')
		self.structs = structs if utils.is_collection(structs) else [structs]

	def write(self, o: Writer):
		o(
			rf'''
		<?xml version="1.0" encoding="utf-8"?>
		<!--
		// This file was generated by soagen - do not modify it directly
		-->
		<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">
		'''
		)

		with Indent(o):
			for struct in self.structs:
				with MetaScope(self.config.meta_stack, struct.meta):
					o(
						rf'''
					<!--{"="*(120 - o.indent_width - 4)}
					{struct.name}
					{"="*(120 - o.indent_width - 3)}-->'''
					)
					with Indent(o, pre=f'\n\n<Type Name="{_xml_escape(struct.qualified_type)}">', post='</Type>'):
						o(
							r'''
						<Intrinsic Name="size" Expression="impl_.row_count" />
						<Intrinsic Name="capacity" Expression="impl_.row_capacity" />
						'''
						)
						for col in struct.columns:
							o(
								rf'''
							<Intrinsic
								Name="get_{col.index}"
								Expression="reinterpret_cast&lt;{_xml_escape(col.type)}*&gt;(impl_.columns[{col.index}])"
							/>
							'''
							)
						o(r'<DisplayString>{{ size={size()} }}</DisplayString>')
						with Indent(o, pre='<Expand>', post='</Expand>\n'):
							o(
								r'''
							<Item Name="[size]">size()</Item>
							<Item Name="[capacity]">capacity()</Item>
							<Item Name="[memory pool]">*impl_.pool</Item>
							'''
							)
							for col in struct.columns:
								get = rf'get_{col.index}()'
								o(
									rf'''
								<Synthetic Name="{col.name}">
									<DisplayString Condition="size() &gt; 3u">{{{{ {{*({get})}}, {{*({get} + 1)}}, {{*({get} + 2)}}, ... }}}}</DisplayString>
									<DisplayString Condition="size() == 3u">{{{{ {{*({get})}}, {{*({get} + 1)}}, {{*({get} + 2)}} }}}}</DisplayString>
									<DisplayString Condition="size() == 2u">{{{{ {{*({get})}}, {{*({get} + 1)}} }}}}</DisplayString>
									<DisplayString Condition="size() == 1u">{{{{ {{*({get})}} }}}}</DisplayString>
									<DisplayString Condition="size() == 0u"></DisplayString>
									<Expand>
										<ArrayItems>
											<Size>size()</Size>
											<ValuePointer>{get}</ValuePointer>
										</ArrayItems>
									</Expand>
								</Synthetic>
								'''
								)
					for span in struct.spans:
						if span.const:
							continue
						with MetaScope(self.config.meta_stack, span.meta):
							local_meta = MetaVars()
							local_meta.push('struct::scope', rf'{struct.qualified_type}::')
							with MetaScope(self.config.meta_stack, local_meta):
								with Indent(
									o, pre=f'\n\n<Type Name="{_xml_escape(span.qualified_type)}">', post='</Type>'
								):
									o(
										rf'''
									<AlternativeType Name="{_xml_escape(span.qualified_const_type)}" />
									<Intrinsic Name="size" Expression="size_" />'''
									)
									for col in struct.columns:
										o(
											rf'''
										<Intrinsic
											Name="get_{col.index}"
											Expression="reinterpret_cast&lt;{_xml_escape(col.type)}*&gt;(arr_->impl_.columns[{col.index}]) + offset_"
										/>
										'''
										)
									o(r'<DisplayString>{{ size={size()} }}</DisplayString>')
									with Indent(o, pre='<Expand>', post='</Expand>\n'):
										o(r'<Item Name="[size]">size()</Item>')
										for col in struct.columns:
											get = rf'get_{col.index}()'
											o(
												rf'''
											<Synthetic Name="{col.name}">
												<DisplayString Condition="size() &gt; 3u">{{{{ {{*({get})}}, {{*({get} + 1)}}, {{*({get} + 2)}}, ... }}}}</DisplayString>
												<DisplayString Condition="size() == 3u">{{{{ {{*({get})}}, {{*({get} + 1)}}, {{*({get} + 2)}} }}}}</DisplayString>
												<DisplayString Condition="size() == 2u">{{{{ {{*({get})}}, {{*({get} + 1)}} }}}}</DisplayString>
												<DisplayString Condition="size() == 1u">{{{{ {{*({get})}} }}}}</DisplayString>
												<DisplayString Condition="size() == 0u"></DisplayString>
												<Expand>
													<ArrayItems>
														<Size>size()</Size>
														<ValuePointer>{get}</ValuePointer>
													</ArrayItems>
												</Expand>
											</Synthetic>
											'''
											)

		o(r'</AutoVisualizer>')

	@property
	def clang_format(self) -> bool:
		return False



__all__ = [r'NatvisFile']
